Submission Title,Submission Url,Plain Description,Video,Website,File Url,Desired Prizes,Built With,Submitter Screen Name,College/Universities Of Team Members,Additional Team Member Count,Team Member 1 Screen Name,...
Clara AI,http://yhack2017.devpost.com/submissions/83476-clara-ai,"Inspiration

There has never been a more relevant time in political history for technology to shape our discourse. Clara AI can help you understand what you're reading, giving you political classification and sentiment analysis so you understand the bias in your news.

What it does

Clara searches for news on an inputted subject and classifies its political leaning and sentiment. She can accept voice commands through our web application, searching for political news on a given topic, and if further prompted, can give political and sentiment analysis. With 88% accuracy on our test set, Clara is nearly perfect at predicting political leaning. She was trained using random forest and many hours of manual classification. Clara gives sentiment scores with the help of IBM Watson and Google Sentiment Analysis APIs.

How we built it

We built a fundamental technology using a plethora of Google Cloud Services on the backend, trained a classifier to identify political leanings, and then created multiple channels for users to interact with the insight generated by our algorithms.

For our backend, we used Flask + Google Firebase. Within Flask, we used the Google Search Engine API, Google Web Search API, Google Vision API, and Sklearn to conduct analysis on the news source inputted by the user.

For our web app we used React + Google Cloud Speech Recognition API (the app responds to voice commands). We also deployed a Facebook Messenger bot, as many of our users find their news on Facebook.

Challenges we ran into

Lack of wifi was the biggest, putting together all of our APIs, training our ML algorithm, and deciding on a platform for interaction.

Accomplishments that we're proud of

We've created something really meaningful that can actually classify news. We're proud of the work we put in and our persistence through many caffeinated hours. We can't wait to show our project to others who are interested in learning more about their news!

What we learned

How to integrate Google APIs into our Flask backend, and how to work with speech capability.

What's next for Clara AI

We want to improve upon the application by properly distributing it to the right channels. One of our team members is part of a group of students at UC Berkeley that builds these types of apps for fun, including BotCheck.Me and Newsbot. We plan to continue this work with them.
",,https://github.com/tinahaibodi/covfefe,,"Poynter Fellowship: Best Hack to Counter Fake News, Best Civic Hack, Facebook: Best use of a Facebook API or SDK, Best Education Hack, Rough Draft Ventures: Most Entrepreneurial Hack, Google: Best Google Cloud Platform Hack","react-native, flask, firebase, google-cloud, google-search-engine, google-vision, ibm-watson, google-cloud-search, google-web-speech-api, sklearn",aahmed19,"University of California - Berkeley, queens university",2,michaeleliot,tinahaibodii
Tetris,http://yhack2017.devpost.com/submissions/83477-tetris,"Tetris by Christopher Morillo and Andy Zhu

Inspiration

Inspired by the classic arcade game.

What it does

Pieces move down and lines clear when they are full. 7 different pieces. 

How we built it

Java and Eclipse. See extensive in-code commenting for more details!! 

Challenges we ran into

Line clearing was very buggy at first. 

Accomplishments that we're proud of

Score label! Game Over label! All the labels!

What we learned

Tetris is hard, but once completed, very fulfilling.

What's next for Tetris

Better graphics, bells and whistles. 
",,,https://s3.amazonaws.com/challengepost/zip_files/production/27943/zip_files/Tetris.zip,"","java, eclipse",cmorilloo,Brown University,1,AndyZhu
d3adliner,http://yhack2017.devpost.com/submissions/83571-d3adliner,"d3adliner

Deadliner is an application being developed for YHack 2017 at Yale University.
Deadliner allows you to input your goals, deadlines, todos, and it generates a comprehensive schedule and suggests tips for you based on your daily routines. 
",,https://www.d3adliner.net/,,"Best Education Hack, Intuit: College Student Prosperity Case","java, android-studio",reecemartin,University of Toronto,2,BlackSpade741,lokchow
VRbind,http://yhack2017.devpost.com/submissions/83572-vrbind,"Inspiration

Our mission is to foster a culture of understanding. A culture where people of diverse backgrounds get to truly connect with each other. But, how can we reduce the barriers that exists today and make the world more inclusive?
Our solution is to bridge the communication gap of people with different races and cultures and people of different physical abilities.

What we built

In 36 hours, we created a mixed reality app that allows everyone in the conversation to communicate using their most comfortable method:

You want to communicate using your mother tongue?
Your friend wants to communicate using sign language?
Your aunt is hard of hearing and she wants to communicate without that back-and-forth frustration?

Our app enables everyone to do that.

How we built it

VRbind takes in speech and coverts it into text using Bing Speech API. Internally, that text is then translated into your mother tongue language using Google Translate API, and given out as speech back to the user through the built-in speaker on Oculus Rift. Additionally, we also provide a platform where the user can communicate using sign language. This is detected using the leap motion controller and interpreted as an English text. Similarly, the text is then translated into your mother tongue language and given out as speech to Oculus Rift.

Challenges we ran into

We are running our program in Unity, therefore the challenge is in converting all our APIs into C#. 

Accomplishments that we are proud of

We are proud that we were able complete with all the essential feature that we intended to implement and troubleshoot the problems that we had successfully throughout the competition.

What we learned

We learn how to code in C# as well as how to select, implement, and integrate different APIs onto the unity platform.

What's next for VRbind

Facial, voice, and body language emotional analysis of the person that you are speaking with.
",,https://github.com/jiexunxu/VRbind,,"Mirum and JWT: Can a Computer Hear How You Feel? Seeing the emotion in IM and voice, Facebook: Best use of a Facebook API or SDK, Rough Draft Ventures: Most Entrepreneurial Hack, Google: Best Google Cloud Platform Hack, Intuit: College Student Prosperity Case","google-cloud, bing-speech-api, google-translate-api, oculus-gear-vr, unity, leap-motion",Suparit,"Drexel University, Cornell University",3,meenakshisivapriya,Archeane,jiexunxu
Collective,http://yhack2017.devpost.com/submissions/83602-collective,"Inspiration

My small hometown of Greenwich, CT has the largest municipal government in the United States. 260 elected members across twelve districts act as a collective legislative body to ensure a high standard of living for all residents. Local governments such as this date back to this country's founding and are a cornerstone of American democracy. Unfortunately, they are also the most forgotten. 

In 2015, Dallas saw a less than two percent voter turnout in adults aged 18-34 for their mayoral election. In Portland, Baby Boomers and the Silent Generation (aged 65 and older) were found to have 33 times the voting power as Millennials. It's time we revolutionize civic involvement and bring a voice back to America's youth and disenfranchised. It's time for Collective.

Overview

Collective is a secure and transparent portal for town residents to participate in local ballots. Unlike Doodle poll, these votes are real and can transpire in concrete legislation. 

In order to register to vote, residents simply take a picture of themselves and their license as well as add a username and password to their account. Collective will ensure a match between the live headshot and driver license photo and read the user's license for their address and date of birth. This information is then used to identify a user and determine their eligibility for district voting. 

As a registered voter, Collective users are able to participate with a real-time feed of district agenda items. They may sort proposed bills by the responsible district boards as well as analyze the results of past items for a holistic view of their local government in action. Our vision is that a user may access the Collective portal anywhere in the world to efficiently educate themselves and vote on the issues they care about in a matter of minutes. 

How we built it

User authentication was implemented using Kairo’s facial recognition and Google Cloud’s machine learning API. To verify a person’s identity, we required the user to take a selfie, which was then cross-referenced to a database of eligible voter’s pictures. Kairo accurately performed the cross-reference and provided a confidence level based upon similarities to their actual headshot. We resolved that 80% confidence would be stringent enough for the user to be confirmed.

Next, to check voter eligibility, we had the user take a photo of their driver’s license which was then analyzed using Google Cloud’s machine learning API. We had Google Cloud’s API extract Name, Address and Date of Birth and photo. We again used Kairo to ensure that the photo the user took before and the driver license photograph matched. Then, we used the extracted values to ensure that the user was over 18 and lived in the district of voting, thus ensuring the user is eligible to vote. In addition, the values extracted from the drivers license are used to populate the registration form that the user must fill out. 
Once the user is verified, we used Cloudfare technology to improve general security and enhance performance.

For the actual vote we implemented blockchain technology with JavaScript to further secure the online voting process. In this process a single vote becomes a block which is then added to an expanding ledger. Because the block chain database is not stored in a single location, the data is accessible to everyone, and decentralization makes it difficult to hack. We envision that government subsidies and computing power would assume responsibility for mining. The final results of a ballot cannot be modified as the blockchain is immutable. 

The actual front end of the website was built with HTML, CSS & JavaScript.

Challenges we ran into

Our biggest challenge was integrating all of our respective workflows into a complete, clean and intuitive user interface within 36 hours. Accurate computer vision for user verification and account creation was instrumental to the app's practicality as a voting portal and posed unique challenges in it's implementation. Specifically, we encountered and resolved issues configuring the uploaded images and connecting them with the Google Cloudvision API. Incorporating blockchain hashes as a vessel for secure voting was another difficult yet worthwhile hurtle for our group. We knew the application was possible and luckily had some helpful sources for constructing the final JS framework.

Accomplishments that we're proud of

The Collective team is proud to have built a functional political portal without the clutter and dreary UX of a typical governmental website. We passionately believe Collective can be implemented by municipalities and student governments for legislation and see it as a critical step to maintaining a healthy democracy. This is a platform that will have especial value to college students who may feel disheartened by today's political climate and unaware of the action they can take. It is an application that will inform and empower individuals and rebuild faith in America's democracy. 

What we learned

On the backend, our team learned a lot about Google Cloud's suite of APIs and data storage tools and how to use them for a image recognition-based application. Collective offers implementation of cutting-edge Blockchain technology and demonstrated to our team its true value for secure voting. Lastly, it was shocking to read some of the recent statistics on disparities in civic involvement between different demographics in the United States. It is clear that wealth, race and access to voting resources play a unjustifiable role in who has a voice in municipal government.

Applications in combatting FAKE NEWS

There are two core principles behind battling ""fake news"" in politics: 
i. The need for credible and traceable sources
ii. Transparency in the democratic process
Collective removes the noise around policy with unbiased and credible information straight from Town Hall. This is the last thing our users see before they vote and it emphasizes the objective community-centered purpose of the legislation being proposed. Additionally, by dramatically increasing voter participation and education, we reduce the influence of the less-moderate, outspoken activists that tend to dominate the current local government ecosystem. 

What's next for Collective

Municipalities are a great beachhead for revolutionizing civic engagement, however, we see the ultimate goal as expanding to the state and federal stratums. Scaling a secure blockchain voting system will be paramount to this expansion. 

Other future applications of Collective include a portal system specialized for student government, a mobile version for Android and iOS, and incorporation of a natural language processing API to parse bills and extract keywords for an optimized user feed and cross platform notifications based on interests. 
",,,,"Poynter Fellowship: Best Hack to Counter Fake News, Cloudflare: Put Cloudflare in front of your hackathon project, make a Cloudflare App, Google: Best Google Cloud Platform Hack, Intuit: College Student Prosperity Case","android, google-cloud, html, css, blockchain, cloudflare, javascript, kairos",nashanator17,"McMaster University, University of Connecticut",3,rashidlasker,smatonis,AkilHamilton
Blossom,http://yhack2017.devpost.com/submissions/83770-blossom,"Inspiration

In our society today, our smart-connected devices are our planners, our cameras, and our communicators. With goals in mind to make a positive contribution to the health field, we thought of how the integration of technology has already played such a big role and what other potential it offered. We originally conceived the notion of an app that could track what someone with Alzheimer's does or where they go throughout the day via machine-learning and the use of GPS. If the patient forgets what they are doing, the tracking of movement and routine patterns allows the app to automatically suggest what they are probably doing (""suggestion: you are going to the supermarket""). The app would require an account login, which could be administered by the caregiver or close family/friends who have access rights. Furthermore, the caregiver(s) can input tasks or routines that the patient does and where they will go during it. Other aspects such as a family tree and personal facts/info would be integrated as well to provide the necessary information in the case of an emergency and also as a reminder to both the patient and the caregiver.  The purpose of the app was to customize it to the patient and have all the necessary information and resources available in order to allow them to remember important aspects of their life while to continuing to live normally.

What it does

We decided to create a web application that was geared more towards the blossoming of potential alleviation for the patient’s Alzheimer's (cognitive impairment). The caregiver and the patient can both use the program via the same account login, and can see quizzes, games, FAQs, reminders, and other personal information and facts. Reminders can be set up by the caregiver and linked with a certain song that can help trigger memories to the patient. Quizzes and games are a way to encourage the patient to remember via a stress-free environment and also reward the patient when they get answers correct. What we integrate in the web app is meant to help maintain or improve the memory of the patient via mental and physical exercise, as well as nutrition and medicinal information. 

How we built it

For the front-end, HTML, CSS, JavaScript was used to create the encouraging and calming aesthetic of the web app. For the back-end we used Flask and MySQL to manage the database of all of the accounts and their quiz/game scores, and Python Processing for the facial recognition game. 

Challenges we ran into

As a team, we fell into the problem of scaling for our project due to the variety of languages/technologies used. The team consisted of two Computer Science majors, a Business Technology Management major, and a Chemical -Biological Engineer. As a team, we implemented JavaScript, Python, Matlab, HTML, CSS, MySQL and Flask into our projects but it was very hard to scale those different programs into one web application. While this was a challenge, it sparked creativity and increased functionality of the application, which allowed us to not only satisfy the users but surpass their expectations. 

Accomplishments that we're proud of

We created an application that is not only both relevant in the real world and technically intensive, but also easy for a non-technical user to experience. We are proud of dedicating ourselves to creating an idea created at our first Hackathon but were unable to execute without more advanced knowledge. Furthermore, the real world applicability of developing a tool to alleviate Alzheimer's through an emphasis on memory retention, social interactions, and physical health is important not only to society but also our satisfaction for helping others. Through the utilization of Matlab for data analysis of a patient’s memory retention, the patient, his or her caretaker, and more importantly the person's family know how they are improving one day at a time. While Alzheimer's cannot be prevented or cured, it can be alleviated, and Blossom is the one step towards that process.

What we learned

Through this Hackathon experience and the development of Blossom, as a team we learned about Pipeline. In many cases, our programs consisted of chains of functions arranged that many of the outputs of each element it the input of the next.

What's next for Blossom

This web app can further be developed for other diseases. For example, for people with PTSD, there can be a tab with videos and activities that can be used to calm them down or provide alternative therapy. Given the time constraint of this event, one of the only feasible platforms for creating our program was through a web application. However, due to Alzheimer's patients typically being mutually inclusive with the elderly, we realize that a website is not the most practical solution. In the future, we would want to first expand to a mobile setting, which would already be more convenient than a website. Afterwards, the final stage would be creating a hardware equivalent to replicate similar functionalities of our design but be much more realistic as it could be lightweight and attached to a person. In regards to our goals towards the people's overall improvement of health, a goal for the future would be to further customize the application for a wider array of prominent health concerns.
",,https://github.com/LawrenceLarryLiu/blossom,https://s3.amazonaws.com/challengepost/zip_files/production/28259/zip_files/blossom.zip,"Best Healthcare Hack, Best Education Hack","html5, css3, bootstrap, flask, python, processing, pyglet, javascript, matlab, mysql, git, github, frontend, backend, fullstack",LawrenceLiu,New York University,3,daherreros,NikhilVaidyamath,NaiyaPatel
Lazie,http://yhack2017.devpost.com/submissions/83778-lazie,"Inspiration

As first-year students at Columbia, we've come to discover the difficulty in managing time in university. Busy with our studies and lives, students constantly face time constraints. Lazie aims to connect students with spare time, with those who need to finish every day tasks. 

What it does

Lazie is your platform for everyday errands. It connects students who want to do and those who want to ask. Students who ask are people who have requests - from walking a dog, to saving a spot in the library - and students who do are those who complete them. We allow students create an account in which they can both do and ask, keeping track of errands that they requested and errands that they are running. We help students save both time and earn a bit of extra money. 

How we built it

We built the back-end of the code using Flask, Bootstrap, MongoDB, Jinja and Python. For the front-end, we used CSS and HTML to code the page designs. We further used Invision after our wireframing process to create a MVP. 

Challenges we ran into

As a team of beginner coders, we had a difficult time connecting our varying sources of knowledge together to create a cohesive platform. With preliminary knowledge in a select amount of languages, we had to learn while we made the platform. Connecting the front-end and back-end while leveraging data was one of our greatest challenges. This experience was a great learning opportunity for all of us. 

Accomplishments that we're proud of

We are proud of how far we have come with our product despite our level of expertise. We were able to come up with a product idea that we love, code that functioned succesfully, and the prototype of a platform that we think could be highly influential for college students.

What's next for Lazie

Lazie is currently operating on a website, but we hope to develop it towards an app. With its flexibility and open-ended nature, Lazie has the ability to transcend beyond the university campus and into corporate and community life. 
",,https://invis.io/EPERRSD9U,,"Rough Draft Ventures: Most Entrepreneurial Hack, Intuit: College Student Prosperity Case","html, css, python, mongodb, flask, wtforms, bootstrap, jinja",VeraWang,Columbia University in the City of New York,2,ireneyaejinnam,yunsukim10
Fairwell,http://yhack2017.devpost.com/submissions/83856-fairwell,"Inspiration

As busy, broke, and inexperienced college students, we often don't have time or don't know where to look for the best flights home for breaks. We wanted to create an application that would solve this problem.

What it does

This app would optimize the cost efficiency of travel for students, allowing them to find the best deals in flights with just one click.

How we built it

We used Python and Flask to build our webapp and allow users to input information about their flight including university, destination, and date of departure. Our server then accesses this information and finds available flights that match the user's preferences. It then displays paths departing from the two airports nearest to the user.

Challenges we ran into

We experienced challenges integrating different platforms such as Python, Flask, the Google Cloud SDK, HTML, and CSS. We learned how to make each of these programs compatible with each other to create a functional and easy-to-use interface.

Accomplishments that we're proud of

We are proud of creating a functional webapp in the span of 36 hours at our first hackathon as freshmen.

What we learned

We learned both front end and back end skills in creating our webapp and learned how to collaborate through platforms such as Github to write code together.

What's next for Fairwell

We hope to implement the Google Maps API to automatically detect the closest airports for college students and expand our service to all college students in the US.
",,https://github.com/maggie1059/yhack-2017,https://s3.amazonaws.com/challengepost/zip_files/production/28227/zip_files/yhack-2017-master.zip,"JetBlue: Best Use of JetBlue Low Fares and Deals Data, Google: Best Google Cloud Platform Hack, Intuit: College Student Prosperity Case","python, flask, html, css, google-cloud-app-engine, google-cloud-sdk",amqzong,"Columbia University in the City of New York, Brown University",3,maggiewu1059579,cavalos99,jk4104
Knock Your Socks Off!,http://yhack2017.devpost.com/submissions/83946-knock-your-socks-off,"Inspiration

There are over 40 million elderly in the United States alone. For many, everyday tasks are a struggle, including taking their socks off. Our device and service help to alleviate this problem, and help them to regain their independence.

What it does

With a simple text message, a user can have their socks quickly and easily taken off for them in moments.

How I built it

It's powered by the cloud, eco-friendly, and cheap to setup.
",https://www.youtube.com/watch?v=s33yO0p69yg,,,"Rough Draft Ventures: Most Entrepreneurial Hack, Intuit: College Student Prosperity Case","",theryan722,SUNY Stony Brook,1,fredericachen
FRLRM (From Random Locations Real Memories),http://yhack2017.devpost.com/submissions/83949-frlrm-from-random-locations-real-memories,"From Random Locations Real Memories (FRLRM)

Who We Are

FRLRM is a platform that allows travelers to book mystery travel experiences sold at the best price available, without compromising the quality of flight service. In order to accomplish a seamless online customer experience, our service provides a user-friendly reservation platform that displays travel recommendations based on the customer’s preference inputs and a broad array of value-conscious travel options. Our travel experiences are selected based off a mixture of customer preference inputs that include travel dates and desired destination region, as well as big data such as Facebook Graph data to determine best travel experiences for the user. FRLRM tackles the whole travel experience, offering a variety of personalized experiences at the user’s destination. 

Inspiration

We recognized that there is intense price competition in the low-cost carrier airline industry and the need to provide personalized, high-quality travel and service experiences for value-conscious leisure travelers. We saw an opportunity for network airlines to capitalize on excess unused seats by offering targeted travel experiences based on both the individual’s perceived willingness to pay and closely-monitored preferences. This could add value to loyal frequent flyer customers and be utilized as a digital strategy that attracts the next generation of experience-driven millennial travellers. 

What It Does

We provide a flight metasearch product that also has reservation functionality. FRLRM aggregates several mystery travel packages based on information from the customer’s specific itinerary including but not limited to preferences for departure airport, geographic region for destination, and flight period. Our machine-learning powered “randomizer” chooses destinations based on the customer’s preferences, flight availability, and pricing data. After booking, the customer will receive information on the departure airport location and expected arrival time. On the day of the flight departure, the customer will be pushed a notification about the flight information (e.g. gate number, seat assignment, flight number and destination) and hotel reservations. 

How We Built It

We used bootstrap for our front-end web development, integrating the Google Maps API and Google Geocode API to display possible destination airports from the JetBlue data sets as well as Jinja2 to produce a front-end results display of available travel experiences. Our backend was written in Python using various REST API calls using the inputs from a questionnaire on our website. We hosted our entire web application on Google App Engine.

Challenges We Ran Into

The wifi had regular issues preventing us from working for roughly 8 hours of the event. We wanted to integrate more third party libraries, particularly for the personalization aspect of our web app, but it was difficult given the limited time we had with full access to the internet. We also had difficulty in finding appropriate data sets to allow full functionality of certain intended features.

Accomplishments That We're Proud Of

This was the first hackathon for one of our users and she was able to help significantly with the front-end web development and product design, while picking up back-end experience and knowledge as well.
We are also proud of our ability to leverage our knowledge from a previous hackathon that two of our team members attended to more easily parse data and utilize it in a web app through the Google App Engine.
This is also the first web app that three of our team members have worked on, so we are proud of creating a web app with strong utility based off real data sets from a large airline.

What We Learned

We primarily learned from each other - one member had experience in Google Cloud Platform and was able to help the rest of us become familiar with it. We were able to teach one member Python, and two members how to use and parse REST API calls with Python.
We also all had our first experience working within the flight and travel industry.

What's Next For FRLRM

Since more and more consumers are using AI voice assistance devices (e.g. cellular devices or smart speakers), we want to integrate natural language processing to allow customers to say where they want to go and what they want to do. We also want to take full advantage of the conversational capabilities that would provide customers with a more personalized and service-oriented experience. The AI will also record the user’s everyday hobbies and analyze his/her travel data (e.g. locations, usual vacation period, type of travel, and activity preferences). We would also like to link our app to Facebook Graph API data and other big data to enhance the ease and quality of personalization. Ultimately, our technology will be intelligent enough to recognize the user’s interests without the customer having to manually input his/her preference inputs every time he/she books a travel package. As a longer-term product, we also hope to gain access to larger data sets of flights, and to a data set of hotels, to have more data to search from allowing us to connect users with the widest variety of high quality travel experiences.
",,http://frlrm-187801.appspot.com,,"JetBlue: Best Use of JetBlue Low Fares and Deals Data, Rough Draft Ventures: Most Entrepreneurial Hack, Google: Best Google Cloud Platform Hack, Intuit: College Student Prosperity Case","python, jinja, google-cloud, google-geocoding, google-maps, google-app-engine, jetblue, webapp2, bootstrap, html, css, javascript, github, google-analytics",JamesGan,"Cornell University, , USF",3,kevinyin1,Pizzaface97,LinhVuu
Mobilize the Revolution,http://yhack2017.devpost.com/submissions/83978-mobilize-the-revolution,"Inspiration

Asking students at my school what app they would want.

What it does

Brings passionate students together

How we built it

Android app

Challenges we ran into

Accomplishments that we're proud of

What we learned

What's next for Mobilize the Revolution
",https://www.youtube.com/watch?v=V5qctY5M8F8,https://github.com/senecameeks/MobilizetheRev,,Intuit: College Student Prosperity Case,android,senecameeks,"Brown University, Harvard University",3,uyenphuongn,mindy_ng,tmlove
The Magic Square,http://yhack2017.devpost.com/submissions/83981-the-magic-square,"As a newbie learning coding (and C++) just recently, I was very scared of the outcomes, since I was only good at designing and not very good at coding. But as I learnt C++ through others, I found things to be really fun. I was able to learn how to do a magic square, which consists of the sum of rows/columns to be 15, and also design the app and the powerpoint of the team with the app RewardEd. Overall, I am proud of my achievements.
",,https://github.com/Tiankunwang/Thebrightstudent,https://s3.amazonaws.com/challengepost/zip_files/production/28151/zip_files/YHack_2017_submission_KunYi.zip,"","",KunYi,"Concordia University, Montreal",0
Intuit API - Customer Data Trends,http://yhack2017.devpost.com/submissions/83986-intuit-api-customer-data-trends,"Inspiration

Wanted to try working with an API and using OAUTH with ML.

What it does

It is supposed to pull logged in customer data from a quickbooks account and determine relationships between periods of high spending and the sort of person prone to that kind of spending.

How we built it

The backend was written in node.js and express.js. The quickbooks npm repository was very helpful. Machine learning was supposed to play a part, but I wasn't capable of integrating it sufficiently.

Challenges we ran into

As this was my first time using javascript on the backend, I ran into issues compiling the project because I wasn't handling asynchronous operations properly. Because of that I wasn't able to correctly integrate ML.

Accomplishments that we're proud of

Successfully using OAuth 2 and basic MVC architecture.

What we learned

A lot about async javscript

What's next for Intuit API - Customer Data Trends

Hopefully getting async to work and subsequently processing the data with some machine learning models and displaying it using some visual framework like react.js.
",,https://github.com/Tardishade/IntuitAPIChallenge,,Intuit: College Student Prosperity Case,"node.js, express.js, jade, mongodb",Tardishade,University of Waterloo,0
Reflection,http://yhack2017.devpost.com/submissions/83989-reflection,"Inspiration:

We want to make healthcare more available to everyone - based on data from the AAMC, there will be a shortage of more than 100,000 doctors by 2030 and 4/10 adults with health insurance say they have difficulty affording their deductible. These challenges affording care result in people delaying or skipping care due to high costs.

What it does

Today there is a trend of machine learning in analyzing MRI and CT scans for doctors to determine whether a patient is sick. What we did was bring this technology into preventative healthcare for everyone at home who isn’t able to afford or don’t have time to go to a doctor through an algorithm that examines your facial features closely.
When you see your face everyday, it's hard to notice change from a week ago, a month ago, or even a year ago, because your brain adapts to microscopic changes. By examining your facial features closely, you can read details in your own health - how do know if the facial change is cause for concern or harmless? For example, our app is able to detect smile droop, one of the 3 most important warning signs that someone will have a stroke.
Anyone, anywhere, anytime can take pictures of themselves and Reflection helps you see your health condition trends overtime. Our algorithm utilizes machine learning to process the photos and triage your health conditions based on signs and symptoms shown on your face. 
Reflection will help you determine if you're healthy. If you're in need of immediate care, our app will suggest you call 911. Otherwise, we will follow up with an interactive survey of questions related to your health condition to help you better understand what's going on.
All this can happen in the palm of your hand, anywhere, anytime, without having to visit a clinic or hospital.

How we built it

We used Python to build a Flask backend that acts as REST api that our front end can make requests to. We used Google’s Vision API to find facial landmarks to calculate the risk of an illness or disease based on the locations of the landmarks in relationship to each other.

In this hackathon, we implemented a stroke risk calculation. We observed the most obvious yet often overlooked sign of a stroke, the droopy mouth. Using the x and y coordinates of the eyes and mouth and with k-means clustering we discovered that the line formed by the center of two eyes and the line formed by the 2 corners of the mouth will form an angle greater than or equal to 25 degrees in most cases.

In addition to using Google’s Vision API, we also implemented a convolutional neural network with Tensorflow that is trained on a dataset that we mined and put together ourselves to detect sleep deprivation from selfies you take.

We implemented the frontend using Swift 4 and Objective-C in XCode to create an iOS app that the users will use to take photos and upload them into Google Firebase and our backend to perform neural network predictions and facial landmark analysis.

All our backend is hosted on Google Cloud Compute Engine.

Challenges we ran into

The biggest challenge is finding a dataset for machine learning. We weren’t able to find any, that’s why we created our own. By using Selenium, a web scraper, as well as OpenCV to create a dataset that trains the model to predict from an image. 

Some of the other challenges we ran into was putting everything in the VM and testing it. There were many compatibility issues, as well as classes and functions our team members wrote. We were also struggling to connect and make requests to the Google Cloud APIs. Eventually we were able to overcome these issues by working as a team.

Accomplishments that we're proud of

The biggest accomplishment was getting and creating that dataset for training the machine learning model. There are no public dataset like this on Kaggle or anywhere on the web. We were able to put together labeled 1000 images and train our model with a loss of 0.14 and a accuracy of 97% on the validation set, and 88% accuracy on the test set.

Another big accomplishment was brainstorming and researching relationships between facial landmarks for a patient that is at risk of having a stroke. We were able to find a general trend using k-means clustering and manual assessments of thousands of images of stroke patients and healthy people to determine the best algorithm to calculate the risk of stroke.

Other accomplishments we were proud of is coming together as a team to solve issues and achieve milestones. We were able to work individually and as a team efficiently to build an all around incredible project.

What we learned

The biggest lesson to all of us is humbling ourselves and working together to solve problems and brainstorming ideas.

We also learned how to use and set up a backend server using Flask, and making requests to Google’s Vision API.

What's next for Reflection?

The possibilities with this app is infinite. We want to make this app open source, anyone can upload the datasets they created to triage and predict an illness or disease. Of course we would need to get professional doctors to make sure these datasets are valid before processing it for machine learning.

We also want to work with hospitals to create datasets and come up with more algorithms to find relationships from the human face. People often say eyes are the window to your soul. Your face is also a window—by looking closely at your facial features, you can read details for your own health.

Lastly, we want to improve the interface to be more user friendly, powerful, and efficient.
",,,,"Rough Draft Ventures: Most Entrepreneurial Hack, Google: Best Google Cloud Platform Hack, Intuit: College Student Prosperity Case","python, swift, objective-c, keras, tensorflow, google-cloud, google-vision, google-compute-engine, google-firebase",kate55,"University of Pennsylvania, University of Waterloo",3,frankwang971120,arjunrathreya,Ivy727
Fevzi,http://yhack2017.devpost.com/submissions/83993-fevzi,"Inspiration

We are the leaders of the robotics club at the University of Toronto. With robotics as our primary interest, we had our minds set on developing a hardware device related to robotics that could potentially change the lives of millions. Yhacks provided us the opportunity to work with technology that brought us closer to that goal. This thought motivated us to create ""FEVZI"", a robotic arm that can be controlled wirelessly through user's arm motion with great detail.

What does it do

FEVZI moves in a three dimensional space through user's hand gestures and arm movements.

How we built it

We used the ""Myo armband"", a gesture control armband to retrieve electrical signals from the muscle movements of user's arm. We extracted these signals to our laptops using the Myo SDK. Once this was accomplished we delivered these signals to an Arduino board, processed the data to recognizable hand gestures, and use the recognized gestures to control 3 servo motors to move the robotic arm in multidimensional space. We built the robotic arm using minimal resources: cardboard, duct tape, and components inside the Sparkfun's Inventor's Kit.

Challenges we ran into

One of the biggest challenges we faced was getting the Myo armband to communicate with the Arduino.

Accomplishments that we're proud of

Being able to accomplish this with minimal resources in terms of building material was a great improvisational leap for our team. With more time and required material this design can be enhanced to a device that can perform feats such as surgeries across vast oceans.

What we learned

We learned that with great technological advancements and right focus on helping humanity we can all work towards a much better future.

What's next for Fevzi

We plan to making it more precise and providing it more degrees of freedom by using better construction material such as carbon fiber, stainless steel, nuts and bolts, etc.
",,,https://s3.amazonaws.com/challengepost/zip_files/production/28153/zip_files/robotArm.zip,"","arduino, sik, myo",KevinHe,University of Toronto,1,Kaylil
Nocux,http://yhack2017.devpost.com/submissions/83994-nocux,"Inspiration

We were trying to code something in C, so we were looking online for tutorials and guides for specific programs. We came across cprogramming.com and realized how old and how terrible the website is. So we decided it'd be fun to learn html instead and create a template website that would replace cprogramming.com.

What it does

It is a template html website for the home page of cprogramming.com

How I built it

We had to use a lot of html and css tutorials and lots of sweat and brute force. Both of use have never used HTML or CSS before so it was a fun challenge to do something new that could be functional. 

Challenges we ran into

Easily the major challenge was working with three languages where 2/2 of us had no previous knowledge with HTML. Any basic functions, syntax, and methods required research. Figuring out how to do everything from run the website to make sure it was able to be seen on mobile was a challenge.

Accomplishments that I'm proud of

I'm proud of making a template of a website that looks awesome, if I say so myself.

What I learned

We learned about flex boxes and the general design of a website, which we didn't realize is much harder than we expected.

What's next for Nocux

Wonderful sleep and a beautiful shower. Maybe a foot mask if I say so myself.
",,,https://s3.amazonaws.com/challengepost/zip_files/production/28154/zip_files/redesign.html,"","html, css",marshalllerner,Brown University,0
Wolo (☞ﾟヮﾟ)☞,http://yhack2017.devpost.com/submissions/83995-wolo,"Inspiration: Music theory classes reveal that there are many rules to follow when composing sheet music that may be easily forgotten.

What it does: Scans sheet music, represented in XML format, for parallel fifths, eighths, in order to prevent aural issues.

How we built it: Python

Challenges I ran into: Keeping track of some of the math

Accomplishments that I'm proud of: Parsing XML successfully and having fun in New Haven

What I learned: How XML files represent data and how to interact with them.

What's next for Wolo: WOLOWOLO!
",,,https://s3.amazonaws.com/challengepost/zip_files/production/28155/zip_files/omxpfa.zip,Intuit: College Student Prosperity Case,"python, xml",Acbn-Nick,"Boston College, Harvard University",1,warsawpact
Today@Brown,http://yhack2017.devpost.com/submissions/84004-today-brown,"Inspiration

The current news source for Brown students is an unorganized, inefficient email that is not used frequently. We decided to take action to change this in our community and provide a better way for students to receive news. 

What it does

The product is still in the design stage, that is why there is just a rough outline of the Swift design, but we will continue building it into a functional app.
",,,https://s3.amazonaws.com/challengepost/zip_files/production/28160/zip_files/Today_Brown.xcodeproj.zip,Intuit: College Student Prosperity Case,"swift, python",nishakhater,Brown University,0
MovieEmotion,http://yhack2017.devpost.com/submissions/84010-movieemotion,"Inspiration

I wanted to try to do something on my own this time, so I went solo and tried to learn as much as I could.

What it does

An Android app that you can talk to and it will examine the tone/emotions in your message. Then it will recommend a movie for you to watch based on the results of your emotions

How I built it

Using Android, IBM Watson's Tone Analyzer API and TheMovieDB's API, I integrated all of it together along with speech to text to make the app.

Challenges I ran into

The biggest challenge was communicating with the APIs but eventually with trial and error, I figured it out.

Accomplishments that I'm proud of

The fact that I went solo on this project, I was very proud of myself for learning new things by myself.

What I learned

How to communicate with various APIs as well as the importance of time management.

What's next for MovieEmotion

Maybe to do something after recommending a movie such as linking it to the show on Netflix or in theaters, but there was no API good enough for this function right now.
",,,https://s3.amazonaws.com/challengepost/zip_files/production/28162/zip_files/Eats.zip,Mirum and JWT: Can a Computer Hear How You Feel? Seeing the emotion in IM and voice,"ibm-watson, android-studio, api, solo",jaschung,University of Western Ontario,0
Sight,http://yhack2017.devpost.com/submissions/84029-sight,"Inspiration

Imagine a world where your best friend is standing in front of you, but you can't see them. Or you go to read a menu, but you are not able to because the restaurant does not have specialized brail menus. For millions of visually impaired people around the world, those are not hypotheticals, they are facts of life. 

Hollywood has largely solved this problem in entertainment. Audio descriptions allow the blind or visually impaired to follow the plot of movies easily. With Sight, we are trying to bring the power of audio description to everyday life.

What it does

Sight is an app that allows the visually impaired to recognize their friends, get an idea of their surroundings, and have written text read aloud. The app also uses voice recognition to listen for speech commands to identify objects, people or to read text.

How we built it

The front-end is a native iOS app written in Swift and Objective-C with XCode. We use Apple's native vision and speech API's to give the user intuitive control over the app. 



The back-end service is written in Go and is served with NGrok.



We repurposed the Facebook tagging algorithm to recognize a user's friends. When the Sight app sees a face, it is automatically uploaded to the back-end service. The back-end then ""posts"" the picture to the user's Facebook privately. If any faces show up in the photo, Facebook's tagging algorithm suggests possibilities for who out of the user's friend group they might be. We scrape this data from Facebook to match names with faces in the original picture. If and when Sight recognizes a person as one of the user's friends, that friend's name is read aloud.



We make use of the Google Vision API in three ways:


To run sentiment analysis on people's faces, to get an idea of whether they are happy, sad, surprised etc. 
To run Optical Character Recognition on text in the real world which is then read aloud to the user.
For label detection, to indentify objects and surroundings in the real world which the user can then query about.


Challenges we ran into

There were a plethora of challenges we experienced over the course of the hackathon.


Each member of the team wrote their portion of the back-end service a language they were comfortable in. However when we came together, we decided that combining services written in different languages would be overly complicated, so we decided to rewrite the entire back-end in Go.
When we rewrote portions of the back-end in Go, this gave us a massive performance boost. However, this turned out to be both a curse and a blessing. Because of the limitation of how quickly we are able to upload images to Facebook, we had to add a workaround to ensure that we do not check for tag suggestions before the photo has been uploaded.
When the Optical Character Recognition service was prototyped in Python on Google App Engine, it became mysteriously rate-limited by the Google Vision API. Re-generating API keys proved to no avail, and ultimately we overcame this by rewriting the service in Go.


Accomplishments that we're proud of

Each member of the team came to this hackathon with a very disjoint set of skills and ideas, so we are really glad about how well we were able to build an elegant and put together app.

Facebook does not have an official algorithm for letting apps use their facial recognition service, so we are proud of the workaround we figured out that allowed us to use Facebook's powerful facial recognition software. 

We are also proud of how fast the Go back-end runs, but more than anything, we are proud of building a really awesome app.

What we learned

Najm taught himself Go over the course of the weekend, which he had no experience with before coming to YHack.

Nathaniel and Liang learned about the Google Vision API, and how to use it for OCR, facial detection, and facial emotion analysis.

Zak learned about building a native iOS app that communicates with a data-rich APIs.

We also learned about making clever use of Facebook's API to make use of their powerful facial recognition service.

Over the course of the weekend, we encountered more problems and bugs than we'd probably like to admit. Most of all we learned a ton of valuable problem-solving skills while we worked together to overcome these challenges.

What's next for Sight

If Facebook ever decides to add an API that allows facial recognition, we think that would allow for even more powerful friend recognition functionality in our app. 

Ultimately, we plan to host the back-end on Google App Engine.
",,https://github.com/ricek/sight,,"Facebook: Best use of a Facebook API or SDK, Google: Best Google Cloud Platform Hack","go, google-vision, google-compute-engine",NathanielO,"Brown University, Hofstra University",3,ricek,Najm,zak_wegweiser
InterviewMe,http://yhack2017.devpost.com/submissions/84037-interviewme,"Inspiration

We all know practicing and preparing for interviews sucks, especially as very busy students. Even when we do have time, practicing for an interview on your own sucks, and sitting awkwardly on a webcam in front of someone else can be very awkward when you're just starting out.

What it does

InterviewMe is an Amazon Alexa voice skill which conducts mock interviews. Users can specify a position and even a company, as well as the types of questions they would like to work on.

How we built it

We built this using a combination of both Amazon Web Services lambda functions and the Amazon Developer Alexa Skills kit to implement this solution. 

Challenges we ran into

Our team consists of 4 Canadians eager for the opportunity to learn how to use Amazon's Echo Alexa that just recently released in Canada (late November). What the team learned very late into the hackathon is that there are several issues that have come with this Canadian release of Alexa. These issues included preventing Canadians from implementing Alexa Skills onto American Amazon Echos (specifically the Amazon Echo 1) due to language compatibility issues (English US compared to English CA). In addition to this, both of the Amazon developer tools required web access as they were online resources, and with the higher than average connections to the internet during this hackathon - disconnections caused implemented code to be wiped out on more than one occasion. This combination of high network latency and centralized work environment really limited the team's ability to accomplish the most complete solution. 

Accomplishments

After a variety of challenges and set backs the team is proud to have been able to implement a voice skill that can receive and handle responses to some degree.

What we learned

The team learned a lot about using and interfacing with Amazon's Web Services during this hackathon. This skill is very useful to team members as the demand for smart home appliances (such as speakers) continue to rise, the opportunity for voice skills to integrate into every day life and to offer assistance and accessibility to clients will also increase making this skill, an asset.

What's next for InterviewMe

We would like to keep working on this project and implement several things, We would like to implement a web scraper, which would pull questions from websites such as Glassdoor, etc. We would also like to create a website so that users can log in and review their questions and answers after the interview.
",,https://github.com/the-randolph/JAR-N,,Intuit: College Student Prosperity Case,"amazon-web-services, amazon-alexa, javascript",natstret,"Queen's University, queens university",3,jackiebett,Crudough,the-randolph
Sci-Collab (Unsolvable Problems),http://yhack2017.devpost.com/submissions/84041-sci-collab-unsolvable-problems,"Inspiration: One of our group members wondered why there isn't a cure for Parkinson's Disease. He then stepped back and realized that just like him, there are others who wonder about other uncured and unsolved problems. What began as an interest on Parkinson's disease, resulted as a web app that raises awareness.

What it does: Wikipedia lists the unsolved problems in the world. Unsolved math, philosophy, uncured diseases etc., Our web app aggregates all the problems.

Challenges: Styling the webpages was the most difficult part because we all have minimal experience with CSS.

Accomplishments: We learned how to setup a basic database to store values, and how to create an app on Google AppEngine. 

What's next for Sci-Collab: In theory, we want our website to include a countdown to incentivize solutions to cures and other problems. Other next steps would be to market the app to other coders, so they can refine it to attract scientists.
",,https://yhacks-2017-team1.appspot.com/,,"","python, firebase, css, javascript, html",josueal1,"University of California - Irvine, York University, Quinnipiac University",2,dkim260,enewton24
Animation,http://yhack2017.devpost.com/submissions/84052-animation,"Idea

Originally the idea was just to animate a single object around the window. I wanted to expand on it and include 2 objects that would be related to one another, leading to a chase. 

What I learned

I started to learn Python and this animation was a small, simple project for me to practice!
I learned a lot about using the Pygame module, and the concepts behind building games.
It was also a challenge to debug the program and it was really rewarding when it finally worked.
",,,https://s3.amazonaws.com/challengepost/zip_files/production/28176/zip_files/Tom_and_Jerry_Animation.zip,"","",kathytam,McGill University,0
H2ODaily,http://yhack2017.devpost.com/submissions/84059-h2odaily,"H2ODaily

Inspiration

We always hear the 8-cups a day rule. It seems ambiguous and doesn’t apply to everyone. We decided to create an app that takes into account different factors like the weather, the age, the country, the type of sport exercised, number of hours of sleep, etc.. to tell the user exactly how much water is needed to stay healthy.

What it does

H2ODaily is app that calculates how many cups of water are needed to maintain a healthy lifestyle. It considers the weight, the duration of exercise time and number of previously consumed cups to calculated how many more cups necessary for the day.

How we built it


Android Studio


Challenges we ran into

We struggled to work fast using the internet connection. Most team members do not have android experience, so we must pick the skills up onsite. We had trouble coming up with an algorithm that summarizes all the factors we wanted to consider so that the calculation would be as personalized as possible.

Accomplishments that we’re proud of

Some members of our team learned how to use Android Studio. We improved our experience with Java.

What's next for H2ODaily

Due to the time constraint, we could not include all the factors into the program. In the future, H2ODaily would also include input from:
• Gender (it would have a completely different program for pregnant women)
• Exact sport practiced
• Country
• A weather API to tell the exact temperature and humidity level of the day
• A Google maps API to calculate distance walked by the user and update the amount of water to consume.
• A detailed schedule of water intake while exercising 
• Urine color
• Exercise intensity
",,https://github.com/SiaSyPeng/H2ODaily,https://s3.amazonaws.com/challengepost/zip_files/production/28180/zip_files/H2ODaily.zip,"","java, android-studio",SiaSyPeng,Dartmouth College,2,nourbenmohamed21,AndrewSosanya
empathee,http://yhack2017.devpost.com/submissions/84060-empathee,"empathee

What it is

empathee is a web app that helps people understand all the emotions in a body of text or audio recording. Built with the IBM-Watson Tone Analyzer and Google Web Platform WebSpeech APIs, this powerful tool can help educate children who struggle to understand and empathize with emotions with the click of a button. 

Applications


help kids with autism or aspergers recognize and respond to emotions (demo version's primary purpose)
form of self-checkup: analyze journal/diaries to catch mental disease symptoms early and prevent self-harm or suicide
can aid social workers and psychiatrists, measuring emotional intelligence in patients and ensuring that communications are properly delivered and received
in customer service training, help employees recognize patterns of emotions in customers as well as for employers to look at statistics of effective customer service employees 
campaign speech writing, to analyze tones of syntax for correct impact 


-
",,https://my-project-1512243447496.appspot.com/,https://s3.amazonaws.com/challengepost/zip_files/production/28181/zip_files/empathee-master.zip,"Mirum and JWT: Can a Computer Hear How You Feel? Seeing the emotion in IM and voice, Google: Best Google Cloud Platform Hack","html, javascript, css, ibm-watson, google-web-speech-api, node.js, express.js",isabelringing1,Yale University,1,anniezhou301
Henlo,http://yhack2017.devpost.com/submissions/84061-henlo,"Inspiration

We wanted to work on a civic hack.

What it does

The project is a Slack app that sends a user a response for onboarding when the user types ""henlo.""

How we built it

We used a tutorial for using the Slack API, we used Node.js, and the Slack API.

Challenges we ran into

We ran into a variety of challenges. We took a long time to decide on which project to work on. Eventually we decided on doing the civic hack. We wanted to find a way to use the Slack API to send direct messages to new members but we could not find much documentation on how we can do that using the Event API. We tried building off of the pre-existing channel messaging but it did not work. After many attempts, we decided to stick with channel messaging. Then we worked on formatting the JSON message. Every time we made changes, we had to rely on one member to test the changes as only he had access to stdlib. We also needed to redeploy/reinstall the app in order to see the changes take effect. 

Accomplishments that we're proud of

We are proud of being able to explore and work with the Slack API and learning a bit about Node.js. 

What we learned

We learned about proper directory organization from the tutorial. We then learned how to use the organization and where to make changes. We learned about the Slack API and looked through some of their many events they support. 

What's next for Henlo

We hope to be able to delve deeper into the Slack API, possibly take a new direction and change the implementation of the app.
",,https://github.com/gpagliaro/henlo,,Rough Draft Ventures: Most Entrepreneurial Hack,"node.js, slack",KarenLo,University of California - San Diego,2,Gpagliar,jennywong
Carbon Calculator,http://yhack2017.devpost.com/submissions/84063-carbon-calculator,"Climate change is not a hoax. Period. So, we created this app to counter and overcome it. 

Carbon Calculator calculates the social cost of your carbon footprint-- and links you to a website where you can donate to a nonprofit dedicated to fighting climate change. 

We created the app using Android Studio. To design the algorithm, we pulled data from the academic journal Nature, the Yale Community Carbon Fund, and the Yale Sustainability Calculator Methodology, enabling our algorithm to accurately calculate the social cost of an individual's carbon footprint. 

The Yale Code4Good originally preferred a WordPress plugin; however, after consulting a representative we decided that a smartphone application, with access to real-time location data, would be a more effective solution. 

With more time, we plan to use Facebook's API to share your amount of carbon saved with that of your friends. This community-based system will encourage and motivate users to inspire their peers to consume less energy and be conscious of their carbon footprint. 

Additionally, we plan to use PayPal's API to allow users to directly donate their calculated carbon footprint cost to a specific organization. 

Building this application required our entire team to persevere, especially in learning new technologies. This is only the start of Hackathon journey, and we can't wait to discover what lies ahead. 
",,,https://s3.amazonaws.com/challengepost/zip_files/production/28182/zip_files/CarbonCalculatorYHack.zip,"","android-studio, java",leo_ryu,Brown University,3,jessicadai,megantran17,kyle_qian
Vtech,http://yhack2017.devpost.com/submissions/84064-vtech,"YHack-2017 is a story in itself. Nothing to add!

Ups and downs. Confusion about the libraries we used. Frustration with the WiFi.

Lots of fun.

AI itself is around 30% accurate; considering there are 4 possible outcomes, it's slightly better than random. However, based on our limited knowledge of AI/ML and difficulties working with scikit-learn, we were unable to finish the project in a satisfying way.
",,https://github.com/saleid2/YHack-2017,,Vitech: Life Insurance Quoting Challenge,"html, python, javascript",saleid2,Ecole Polytechnique,1,Thienng97
TravelReady,http://yhack2017.devpost.com/submissions/84069-travelready,"Inspiration

As college students, we saw a need to aid low income and first generation college students navigate travel as travel, especially cross national and international travel. Because this population tends to have less experience with such travel, they may lack knowledge about the steps to successful execute their travel from where to look to book tickets, to what they need to bring and how to get to their desired location. 

What it does

The app allows the user to input their desired location and then allows them to see a map of their destination. This map allows the user to explore their destination. For example, imagine a incoming first-year student at Dartmouth seeks to make the trek to rural New Hampshire. Where would he or she begin? By using our app, the student simply searches for Hanover, NH and is presented with a map of the town. From this map, the student will be able to see that there is bus stop on campus, while also gaining knowledge about the geography and location of their college. By exploring the area around Hanover, the student would also learn that very close to Hanover there is an Amtrak Train Station. Our app allows the student to consider a variety of transportation options visually--a unique characteristic which simply presents students with another means to synthesize travel information. This is especially important for first generation and low income students for which finances are a main concern because, given the geographic diversity of Dartmouth and other colleges, many students may not be very familiar with or accustomed to different means of travel. For instance, by seeing the proximity of the train station to Dartmouth, the student, who may not have traveled via trains before or is from a region of the country where rail transportation is virtually nonexistent, will be able to use the train to travel to Hanover--an option that tends to be cheaper thus saving the college student money and providing them with a fun means to consider a variety of travel options. 

How we built it

We used React Native so the app can work on both iOS and Android devices, using a StackNavigator to control the ability of the user to navigate through the app.  We also used AirBnb's Maps API to display visual information about a specific destination, and Google's Places API to 1) have a database of all cities in order to autocomplete user input in the correct format to be 2) read by Google's Geolocation API.

Challenges we ran into

We had trouble moving forward and adding more complicated features to the app. For instance, we hoped to add more character to the introduction screen. We envisioned adding in a small animation of a college student dragging a suitcase on the screen. This kind of design would add another layer of complexity and flair to our app, however, we were unsuccessful in this pursuit because we had trouble eliminating the bugs with this code. Thus, we resorted to the blue home screen because, while less visually appealing, it is functional. We favored usability over aesthetics. 

Accomplishments that we're proud of

We are proud of the fact that the app functions! Because we have little coding experience, we thought we would be intimidated by the knowledge and experience of our fellow hackers. However, working together, with the help of the mentors to refine our idea and app development, we were able to create something that functions and that is an incredible feeling!

What we learned

We learned how to code an app! This is incredibly exciting because given our little experience coding, we were still able to create an app that functions. While it is not as complex as envisioned, we are proud of the work we were able to accomplish this weekend.

What's next for TravelReady

Next we will continue to brainstorm ideas to further improve the app. Perhaps we will include an area where users can comment on their travel recommendations.  We are also planning on including compatibility with Rome2Rio, the premier website for showing the different ways to get from one location to another transcending mode and time of travel (we were unable to because our request for an API required 24-48 hours to approve.)
",,,https://s3.amazonaws.com/challengepost/zip_files/production/28186/zip_files/App.js,Intuit: College Student Prosperity Case,"google-places, google-geocoding, react-native, airbnb-maps",AlexandreaGosnell,Dartmouth College,1,jiachen
AR-FPS-Game-Design,http://yhack2017.devpost.com/submissions/84072-ar-fps-game-design,"AR FPS Game Design

Unity

C

Teach Programming to students aged 12-15
",,https://github.com/echoxii/AR-FPS-Game-Design,https://s3.amazonaws.com/challengepost/zip_files/production/28187/zip_files/HelloDog.apk,Stanley Black & Decker: Storage Solutions Augmented Reality,"c#, shaderlab, objective-c++, c, objective-c",echoxii,"",0
Tonalyzer,http://yhack2017.devpost.com/submissions/84077-tonalyzer,"Inspiration

We were inspired by IBM Watson Tone Analyzer.

What it does

This is a web app that allows users input some English texts and analyzes the emotion within the texts with the help of IBM Watson Tone Analyzer API.

How we built it

Basically just use Python, flask, HTML, and CSS along with the Tone Analyzer API to build a web app with a friendly user interface.

Challenges we ran into

I had no experience in developing web in Python and flask, and I encountered some challenges when I used the Tone Analyzer API

Accomplishments that we're proud of

Able to recognize the emotion in the text successfully.

What we learned

Web development technique in Python and how to use the Tone Analyzer API

What's next for Tonalyzer

Use Twitter / Facebook API to get the users' posts information and analyze them; analyze the voice of the users.
",,https://github.com/shawnchan2014/yhack2017-tonalyzer,https://s3.amazonaws.com/challengepost/zip_files/production/28199/zip_files/YHack2017-Tonalyzer.zip,Mirum and JWT: Can a Computer Hear How You Feel? Seeing the emotion in IM and voice,"flask, python, ibm-watson-tone-analyzer, html, css",shawnchan2014,University of Rochester,0
Havana Travels,http://yhack2017.devpost.com/submissions/84078-havana-travels,"Havana Travels

Havana Travels stemmed from the idea that everyone should travel - yet the price is often prohibitory. Thus, an idea to make a budget focused, flexible date flight search engine came along. Havana Travels aims to open up traveling to everyone by first and foremost finding the cheapest flights to any airport, inspiring trips to new locations.

College students will especially benefit from Havana Travels: the website's focus on low price above all else allows students to find a new escapade without breaking the bank. The feature to specify the number of travelers lets users plan cheap group trips. Students can organize spring break trips, summer excursions, and winter break adventures with their friends, while still affording to pay their tuition.

Havana Travels used JetBlue's Deals data to generate new, cheap trips for students or larger groups. We hope that anyone can find a new place to visit within their price range using Havana Travels.

-Havana Travels Team
",,https://github.com/harshyyy21/Yale_Hack,,"JetBlue: Best Use of JetBlue Low Fares and Deals Data, Intuit: College Student Prosperity Case","python, html, css, javascript",ivanasamy,"Massachusetts Institute of Technology, Tufts University, Yale University",2,harshyyy21,pagorska
soulfood,http://yhack2017.devpost.com/submissions/84080-soulfood,"SoulFood

Web app for good food planning and better company. End product allows users to log in and add food events, search up recipes and add restaurants to a calendar. It also allows for others to ""book"" meal times. 

Built With


Edamam - Recipe Search API
Zomato - Restaurant Search API


Acknowledgments


Hat tip to all those who witnessed this 24-hour adventure from Philly to New Haven

",,https://github.com/luciahuo/soulfood,,"","javascript, html",luciahuo,University of Pennsylvania,0
Pak!,http://yhack2017.devpost.com/submissions/84081-pak,"Inspiration

Thanksgiving is a holiday for a family to get together and bond. Unfortunately, in arguably the most polarized political climate ever in the history of this great country, Thanksgiving has become a time where you meet distant relatives who spew vitriol rhetoric on the dinner table. What was once the great American holiday has been reduced to an ideological battleground. 

What happened? What radicalized and emboldened once pleasant and demure relatives to spew divisive words? Some studies have concluded that the exposure of fake and biased news via Facebook and other social media platforms have contributed to this phenomenon.

Thus the problem at hand. We cannot control which articles people click and open. However, what if we could identify articles which are potentially biased and fake, and replace, without the users knowledge, the contents of such articles. Thus, Pak! the fake news destroyer was born. 

How I built it


Interface with the Mercury Web Parser (MWP) API to obtain headline, author, body text, relevant images.
Obtain the article body and send to Google Cloud Platform Natural Language API to obtain named entities.
Selected top entities and used as search term to look for similar news from Associated Press from GDELT API.
Take url of the returned article from GDELT API and submit to MWP API.
Replace old article and inject the AP article content returned by MWP API. TADAAAA!


Challenges I ran into


Don't know how to code
Not very smart
Allergic to fake news


Accomplishments that I'm proud of


Finishing hacking
Sleeping a little


What I learned


Believe in yourself
Believe in your teammates
Red Bull gives you wings


What's next for Pak!


Saving the world one step at a time.

",,https://github.com/TKim18/FakeNewsExtension,,"Poynter Fellowship: Best Hack to Counter Fake News, Google: Best Google Cloud Platform Hack","chrome, javascript",tristanang,Wesleyan University,1,carlomedina
Conductor,http://yhack2017.devpost.com/submissions/84083-conductor,"Inspiration

I was inspired by the idea of having computer generated music interact with human expression, and working with Leap Motion gave me the idea for a Soundfont-powered web app that controls some aspects of MIDI playback using only the user's hand movements.

What it does

This project plays a number of MIDI channels which interact.A general chord progression guides a chord backdrop, an arpeggiator, a bass, and other instruments which play a number of different melodies (which can be changed using the keyboard). However, hand motions provided to the Leap control the complexity of the chords and melodies, and the intensity of their playback. For instance, a level, closed fist will silence all instruments. Extending an index finger controls the arpeggiated melody, extending a pinky controls the bass, and tilting the hand controls the chords. Raising the hand makes the notes more legato, and staccato if the hand is lowered. Generally, the user can control the intensity of the playing music using only their hand motion.

Change chord progression, top row of keyboard: (q through t)
Change arpeggio melody, middle row of keyboard (a through f)
Change bass melody, bottom row of keyboard (z through v)

How I built it

I built this almost completely using JavaScript, jQuery, and the Leap Motion JavaScript API. I also used MIDI.js and some instrument soundfonts I had on my computer to make the music.

Challenges I ran into

Interactively creating music is challenging. In this project, most of the instruments don't algorithmically play, but play pre-programmed melodies. Getting all instruments in sync, and to follow one chord progression were challenges I faced.

Accomplishments that I'm proud of

I successfully read hand gestures from the Leap Motion API, to great effect. You can really control the intensity of the music and come up with some cool songs, if you get the hang of it.

What I learned

I learned that algorthmic song creation (which I originally intended to implement) is a deeply challenging problem. Music is so subjective that it pretty much cannot be left up to a computer.

What's next for Conductor

It could be expanded to have more melodies, or some way of inputting custom melodies or chord progressions. It could better implement gesture control to 
",https://www.youtube.com/watch?v=KFsjhmXP0SM,https://github.com/JeffDemanche/yHackLeap,,"","javascript, html5",Jeff2845D,"",0
Chug2Puff,http://yhack2017.devpost.com/submissions/84084-chug2puff,"Chug2Puff

Chug2Puff is a visualization tool to help promote users to keep track of their daily water intake. This application was coded in MATLAB and allows the user to input a variety of factors - such as age, gender, weight and exercise activity -
 and will output a reasonable recommended target of how much water the user should consume.

Our group focused on trying to track this daily progress in a friendly manner by displaying the results along with a puffer fish avatar that inflates as the user progressed toward their recommended goal. This application also gives the user an opportunity to graph their results over time whenever they please.

By giving the user a friendly interface that challenges them to meet their target we hope that Chug2Puff will promote a healthier lifestyle in individuals and make them more aware of how much water they are consuming.

We hope you guys enjoy our application. Thank you!
",,https://github.com/brufino/WaterVisualizationApp,https://s3.amazonaws.com/challengepost/zip_files/production/28191/zip_files/YHack-Chug2Puff-master.zip,"",matlab,BrandonRufino,McMaster University,2,JessicaTrac,MilosBijelic
EthReviewTokens ,http://yhack2017.devpost.com/submissions/84085-ethreviewtokens,"What it does

In my last hackathon, I worked on a decentralized EthJournal, where gas was transferred between authors/peer reviewers/users automatically. However, this did not account for the ""review"" a respective author/peer reviewer would receive. As a result, I built a token called the ReviewToken, which accounts for reviews, which count for credibility of the users. This token would determine the amount of ether transferred in the transactions. 

How I built it

Really just playing around with Ethereum, gas, Rinkeby, Solidity. I started off looking at how to make a coin, and how the coin could be used alone and in integration with the aforementioned application. 

Challenges I ran into

Compiling Solidity. I was using REMIX fundamentally, and most of the time, did not have reliable enough internet connection to be able to test. For a good 4-5 hours, my MetaMask extension was unable to connect to Rinkeby test network. When I finally got connected to Rinkeby, my wifi was too slow, and I couldn't connect to the faucet for Rinkeby. There was just really large inconveniences with the wifi, which significantly slowed down my development. 

Accomplishments that I'm proud of

Working with Solidity again. Syntax wise, I don't think it is significantly challenging. More idea-wise. I was a lot more unsure of my process and how to do things in Solidity in my last project. This time, it was a bit smooth, as I was more easily able to look up docs (when they loaded)... 

What I learned

To download Solidity docs. I also learned I need to find an alternative for running Remix online, when there isn't reliable wifi. At ETHWaterloo, I read about a way to download REMIX locally, but I don't have strong enough internet to find out how to do it. 

What's next for EthReviewTokens

Integrate it with the transfer of ether between authors and peer reviewers. App is also using local storage; I want to use Storj. 
",,,,"","solidity, ethereum",Nat_Chin,McMaster University,0
Trendcast,http://yhack2017.devpost.com/submissions/84086-trendcast,"What it does

Trendcast takes sentiment analysis data of tech articles from major tech news sources along with Google Trends data to generate an overall rating over time based on popularity and overall sentiment. Machine learning is then used to predict future trends by training past data on Long Short Term Memory networks.

How we built it

The front end was built using React and is hosted on Firebase. The back end used Python to scrape news articles from archives using Beautiful Soup, analyzed sentiment with NLTK, a natural language processing toolkit. The time series predictions were done using Keras and Tensorflow models with recurrent neural networks.

Our challenges

It was difficult and frustrating to scrape so much data over really slow WiFi. It was also our first time trying out machine learning libraries and we were all unfamiliar with data science. Aside from some major technical challenges, the volatility of cryptocurrency prices combined with the newness of the technology made it difficult to predict future trends with a high degree of confidence.

Accomplishments that we're proud of

We are very proud of actually implementing the idea, putting the front end together with an elegant UI, hooking everything up to Firebase, scraping and processing a ton of data and getting the prediction model to work.

What we learned

Through this project, we learned a lot about data management and analysis, machine learning libraries such as Tensorflow, new trending technologies (biometrics is growing FAST) and full stack web development. 

What's next?

We want to add more trending technology categories and a live news feed for current topics. This could be done with a real-time news aggregating model that can collect and analyze data from major news sources and APIs automatically.
",,https://trendcast-yhack.firebaseapp.com/,https://s3.amazonaws.com/challengepost/zip_files/production/28194/zip_files/trendcast.zip,"Informa: Best Hot Technology Predictor, Google: Best Google Cloud Platform Hack","python, javascript, css, html, beautiful-soup, nltk, tensorflow, keras, react, pandas",edwinzhang,University of Waterloo,3,andywang,LeoLuHeng,justwong99
Crown & Anchor Game,http://yhack2017.devpost.com/submissions/84087-crown-anchor-game,"Inspiration

I am fairly new to programming and began learning Python 3 months ago. I learned the basics of lists, loops, parameters, etc, but had never integrated this all into one program. I've been meaning to do this but never had the time/focus to dedicate myself to starting/finishing a project of this scale. While the focus of the game doesn't fall under the categories for YHack, I wanted to build a simple program (preferably a game since they're fun) that would combine everything I've learned about Python.

What it does

The program allows the user to play the card game, Crown and Anchors.

Challenges I ran into

Lots of trouble passing parameters and getting the program to continuously run.

Accomplishments that I'm proud of

Finishing it!

Where is it?

I've copied and pasted the code below, sorry if this is sketchy, I just don't want to put it on my GitHub yet!

MY SUBMISSION
import random

def main():

    Players = num_users() #collects the dictionary of players returned from num_users()
    UserBet = []
    for player, balance in Players.items():
        if balance > 0:
            aUserBet = make_bets(player, balance)
            UserBet.append(aUserBet) #creates a list of dictionaries, with each dictionary being a bet a user made
        else:
            return False

    bigSlot = rand_slot() #collects the list of randomly generated slots from rand_slot()

    counting(UserBet, bigSlot) #calls the counting function

    occurances = counting(UserBet, bigSlot) #collects the list of the number of times each round a user's symbol bet matches what was generated in the random slot

    winnings = calculation_winnings(UserBet, Players, occurances) #collects the list of the amount each user won

    Players = calculation_players(UserBet, Players, occurances) #collects the Players dictionary with the updated user balance

    repeat(UserBet, Players, occurances, winnings, player, balance, bigSlot) #calls the repeat function which continually re-executes the program


def num_users(): #determines the number of users playing
    try:
        Users = int(input(""How many users are playing? ""))
        while Users > 5:
            Users = int(input(""How many users are playing? (at most 5 can play) ""))
    except ValueError:
        Users = int(input(""How many users are playing? (enter an integer) ""))
        while Users > 5:
            Users = int(input(""How many users are playing? (at most 5 can play) ""))

    Players = {}
    for i in range(Users):
        Players[""User "" + str(i)] = 10 #for each number of users entered, creates a new object in a dictionary with the value 10
    return Players


def make_bets(player, balance): #asks if user is participating this round and if so, asks which symbol they're betting on and how much money they're betting
    Participating = input(""Would you like to bet this round? Enter 'Yes' or 'No'. "") #checks if they're participating in the round
    while Participating != 'Yes' and Participating != 'yes' and Participating != 'No' and Participating != 'no':
        Participating = input(""Would you like to bet this round? Enter 'Yes' or 'No'. "")
    if Participating == ""No"" or Participating == ""no"":
        return
    else: #if they are participating, do the following

        bet = {}

        UserBetSy = True
        while UserBetSy == True: #collect the symbol they are betting on
            print('''Which symbol would you like bet on?
                        hearts
                        spades
                        diamonds
                        clubs
                        crowns
                        anchors''')
            UserBetSy = input(""Enter full symbol in lowercase (e.g., 'hearts')\n"")
            while UserBetSy != 'hearts' and UserBetSy != 'spades' and UserBetSy != 'diamonds' and UserBetSy != 'clubs' and UserBetSy != 'crowns' and UserBetSy != 'anchors':
                UserBetSy = input(""Which symbol would you like bet on? Please choose only the available symbols and write in lowercase.\n"")

        try:
            UserBetMo = int(input(""How much money would you like to bet?\n"")) #collect the amount of money they want to bet
        except ValueError:
            UserBetMo = int(input(""How much money would you like to bet? (enter an integer)\n"")) #catch if they don't enter an integer
        while UserBetMo > balance:
            UserBetMo = int(input(""How much money would you like to bet?\n"")) #catch if they enter an amount larger that what's in their balance

        bet[UserBetSy] = UserBetMo #make a new dictionary object with the symbol they bet as the key and the amount bet as the value

    return bet


def rand_slot(): #generates a random slot of symbols used in Crown & Anchor
    options = ['hearts', 'spades', 'diamonds', 'clubs', 'crowns', 'anchors']
    slot1 = random.choice(options)
    slot2 = random.choice(options)
    slot3 = random.choice(options)
    bigSlot = [slot1, slot2, slot3] #creates the 3-symbol slot of randomly generated symbols
    print(""The slot is"", bigSlot, ""\n"")
    return bigSlot


def counting(UserBet, bigSlot): #counts the number of times a user's bet equals the slot of random symbols generated
    occurances = []
    for i in range(len(UserBet)):
        if i == 'None':
            break
        else:
            for symbol, bet in UserBet[i].items():
                value = symbol
                counter = 0
                for j in range(len(bigSlot)):
                    if value == bigSlot[j]: #checks the number of times each round a user's symbol bet matches what was generated in the random slot
                        counter += 1
                        continue
                    else:
                        continue
        occurances.append(counter) #creates a list of the number of times there was a match
    return occurances


def calculation_winnings(UserBet, Players, occurances): #calculates how much each player won and what their new balance is, and prints this information
    winnings = []
    playerTurn = -1
    for player, balance in Players.items():
        playerTurn += 1 
        for symbol, amount in UserBet[playerTurn].items(): #iterates through the dictionary of players and list of dictionaries of each user's bet
            if occurances[playerTurn] == 0: #checks the number of times there was a match between the symbol bet and random slot generated
                win = occurances[playerTurn] * amount #creates a variable that collects how much money a user won
                balance -= amount
                print(player, ""won"", win)
                print(player, ""has a balance of"", balance, ""\n"")
            elif occurances[playerTurn] == 1:
                win = occurances[playerTurn] * amount
                balance += win
                print(player, ""won"", win)
                print(player, ""has a balance of"", balance, ""\n"")
            elif occurances[playerTurn] == 2:
                win = occurances[playerTurn] * amount
                balance += win
                print(player, ""won"", win)
                print(player, ""has a balance of"", balance, ""\n"")
            else:
                win = occurances[playerTurn] * amount
                balance += win
                print(player, ""won"", win)
                print(player, ""has a balance of"", balance, ""\n"")
            continue
        winnings.append(win) #appends the amount a user won to a list
    return winnings


def calculation_players(UserBet, Players, occurances): #calculates how much the user won, uses this to change their balance and puts this new balance in place for the old balance, to allow an updated Players dictionary to be used throughout the program
    playerTurn = -1
    for player, balance in Players.items():
        playerTurn += 1 
        for symbol, amount in UserBet[playerTurn].items():
            if occurances[playerTurn] == 0:
                win = occurances[playerTurn] * amount
                balance -= amount #updates a user's balance based on the results of the last round
            elif occurances[playerTurn] == 1:
                win = occurances[playerTurn] * amount
                balance += win
            elif occurances[playerTurn] == 2:
                win = occurances[playerTurn] * amount
                balance += win
            else:
                win = occurances[playerTurn] * amount
                balance += win
            continue
        Players[player] = balance #updates the dictionary of containing each user and their balance
    return Players


def read_file(Players, winnings, player, balance): #reads the user's winnings into a text file
    file = open(""/Users/liamweld/Downloads/game.txt"", ""a"") #opens a new file and appends the results from each round into the file
    Round = 0
    Round += 1
    for player, balance in Players.items():
        for i in range(len(winnings)):
            file.write(player) #writes the user to the file
            file.write(str(winnings[i])) #writes the user's winnings from the last round to the file
            break
    file.close()


def repeat(UserBet, Players, occurances, winnings, player, balance, bigSlot): #asks the user if they want to quit the game and if not, continues playing the game
    EndGame = input(""Enter any character if you want to continue playing. Enter 'Q' if you want to quit the game. "")
    if EndGame == 'Q' or EndGame == 'q':
        return
    else:
        UserBet = []
        for player, balance in Players.items():
            if balance > 0:
                make_bets(player, balance)
                UserBet.append(newUserBet)
            else:
                return False
        rand_slot()
        counting(UserBet, bigSlot)
        calculation_winnings(UserBet, Players, occurances)
        calculation_players(UserBet, Players, occurances)
        read_file(Players, winnings, player, balance)

        repeat(UserBet, Players, occurances, winnings, player, balance, bigSlot) #continues executing the entire game until the user quits

main()
",,,,"",python,liamjweld,queens university,0
po-h8-oh,http://yhack2017.devpost.com/submissions/84088-po-h8-oh,"Inspiration

Despite the hate, we really like potatoes! Neither of us had ever touched any mobile development so this was a great experience learning React Native.

What it does

You can poke a potato.

How we built it

We used React Native and the Expo XDE. 

Challenges we ran into

Learning React Native for the first time was very difficult and many of our original ideas did not work. 

What's next for po-h8-oh

Poking the po-h8-oh itself instead of a helper button, and making the po-h8-oh make cool noises or have a visible reaction.
",,https://github.com/helenawu1998/poh8o,,"Facebook: Best use of a Facebook API or SDK, Rough Draft Ventures: Most Entrepreneurial Hack, Intuit: College Student Prosperity Case","react-native, javascript",helenawu1998,"California Institute of Technology, Columbia University in the City of New York",1,lzha97
Google Trends Custom API For Emerging Technologies,http://yhack2017.devpost.com/submissions/84089-google-trends-custom-api-for-emerging-technologies,"Inspiration

I was inspired by the abundance of unused and untapped potential of search engine statistics, and how this data can be valuable to firms in their decisions and planning for the future. 

What it does

Using a modified custom build google trends API, the algorithm takes one or more search terms and displays the popularity of that term over time. By cross referencing one or more terms with other similar terms, the algorithm takes the big picture of a set of search terms. By statistically analyzing the datas through a quadratic least squares regression, the algorithm gives those inputted terms a past and direction, allowing a completely new and unique view of the data. 

How I built it

I used an open source python google trends API (not created by google), as the backbone of the project, changing the API source to better fit the efficiency and input needs of my algorithm. Next I used this same interface to access an expandable number of additional variable terms, and cross reference those terms with the root term. I used bounds to determine the breadth and depth of analysis. Next, using the matplotlib library, I created a easily accessible, comparable, and expandable visualization of the data over an any possible number of terms. 

Challenges I ran into

Installing and configuring the pytrends API was especially dificult, as I needed to alter the API to fit my needs, and I was not aware of how an API works. Also, I had to completely wipe and reinstall my python computer framework because of multiple versions. 

Accomplishments that I'm proud of

I am proud of my visualization, which is eye catching, expandable, and easily readable. 

What I learned

I relearned python, about Google API, handling large amounts of data, and Unix command line syntax.  

What's next for Google Trends Custom API For Emerging Technologies

This algorithm is only the beginning of huge capabilities in this framework. After removing the data from google trends, there are countless applications and visual representations to be made. The data is very responsive to real world events as easily shown in the data and has clear value to private entities looking to analyze portions of the market. 
",,https://github.com/scott-huson/Google-Trends-API-Algorithm.git,https://s3.amazonaws.com/challengepost/zip_files/production/28195/zip_files/googleTrendsAlgconverttopy.txt,"Informa: Best Hot Technology Predictor, Google: Best Google Cloud Platform Hack","python, matplotlib, pytrends, anaconda, pandas",ScottHuson,"",0
Instinct - sentiment analysis,http://yhack2017.devpost.com/submissions/84090-instinct-sentiment-analysis,"Inspiration

What it does

It uses Indico API to crystallize the sentiment of a passage into a simple emotion.

How we built it

Challenges we ran into

Accomplishments that we're proud of

What we learned

What's next for Sentiment Analysis

-more languages
-merging with voice-to-text APIs
-chrome extension
",,https://github.com/utvompl/sentiment-analysis,https://s3.amazonaws.com/challengepost/zip_files/production/28196/zip_files/drive-download-20171203T064045Z-001.zip,Mirum and JWT: Can a Computer Hear How You Feel? Seeing the emotion in IM and voice,"javascript, indico",utvompl,Wesleyan University,1,eatalig
Echno,http://yhack2017.devpost.com/submissions/84091-echno,"Inspiration

Our country is now more polarized than ever. Social media exacerbates this divide by creating echo chambers, an online ecosystem in which where people are only exposed to news articles that are already in line with their existing political views. Our product works to combat this issue by giving users a way to become more aware of their biases, while also supplementing their news intake with articles from sources that may be outside of their echo chambers. 

What it does

Our product is a Google Chrome extension that addresses the issue of echo chambers in two concrete ways. 1) color codes social media feeds according to the article's political leaning while also providing warning for articles that are clearly untrue or misleading, 2) running analytics on user's news consumption and providing them with article suggestions from news sources they do not normally encounter.  

What's next for Echno

The next steps for Echno are to extend the application to other social media platforms beyond Twitter.
",,https://github.com/stervy/echno,,"","chrome, python, google-web, twitter, html, css, javascript",AlexandraJunn,"Yale University, Princeton University",1,StephenCognetta
FlyBabyFly,http://yhack2017.devpost.com/submissions/84092-flybabyfly,"FlyBabyFly

link
link

What it does

Its a mobile app that matches people with travel destinations while providing great deals.

Swipe right to like! Swipe left to see next deal.

After you like a city you can learn about the city's attractions, landmarks and history. It can help you book right from the app, just pick a date!

How we built it

We used React Native and JetBlue's provided data.

Accomplishments that we're proud of

We believe this is a refreshing approach to help people discover new cities and help them plan their next vacation

What's next for FlyBabyFly


Add vacation packages that include hotel bundles for better prices.

",,,,JetBlue: Best Use of JetBlue Low Fares and Deals Data,"react, javascript",pliang,"",1,bvv218
mood.ai,http://yhack2017.devpost.com/submissions/84093-mood-ai,"Inspiration

Journaling is a psychologically proven helpful tool for recovery from stressors. One of the key benefits of journaling is increased emotional/mood awareness, which allows one to channel negative energy into positive energy and growth. The benefits of journaling can be applied to other texts, through mood analysis. Therefore, by writing public posts, users will be able to gain additional insight regarding their emotions. 

What it does

mood.ai is a mood tracking application that takes in information from a users Facebook profile and text from public posts. The text information is then processed using a model and categorized based on five emotions: joy, sadness, anger, fear and surprise . A suicide tendency index is also allocated to each post. 

The _ mood.ai _ application displays this information for a users post in a particular day in a five petalled flower design, where each petal representing one mood. A translucent triangle stretches above these petals based on the mood indexes of the day. A calendar on the top tracks longitudinal data for each of the moods that can be selected by spinning the flower.  

How I built it

_ mood.ai _ was by sorting data from API's into categories. Inputed data could then be compared to pre-existing data such that indexes could be allocated to these categories using binary trees. 

Challenges I ran into

Difficulties with incorporating Facebook API. 

Accomplishments that I'm proud of

Learning how to process and categorize data. 

What I learned

Basics of neuro-networks and binary trees. 

What's next for _ mood.ai _

_ mood.ai _ can also be applied to a Journaling App, which could incorporate mood and suicide tendency to provide additional emotional insight for the user.
Data from _ mood.ai _ can also be personally disclosed to psychologists to track if a patient is recovering or digressing. 
",,https://github.com/MaxMB15/mood.ai,,"Mirum and JWT: Can a Computer Hear How You Feel? Seeing the emotion in IM and voice, Facebook: Best use of a Facebook API or SDK, Rough Draft Ventures: Most Entrepreneurial Hack, Google: Best Google Cloud Platform Hack","python, google, ios, google-cloud, google-cloud-natural-language-api, google-cloud-sql, facebook-graph, reddit, scikit-learn, flask",rebecca_zuo,"Brown University, McGill University",3,dynamix101,XingHanLu,MaxMB15
Sway,http://yhack2017.devpost.com/submissions/84095-sway,"Inspiration

In a time with increasing difficulty in discerning truth online and stakes greater than ever, we decided to try to use our various tech skills to challenge the prevalence of fake news on social media. 

What it does

projectName empowers users to see the factual validity and biased slant of every article they read and share online. Our program uses machine learning to grant a score to every article on how factual and how biased it is. On Facebook, users can utilize a a Chrome extension that presents scores for news articles built into the timeline view. On Twitter, users can @ invoke our TwitterBot, which will reply with a score of factuality and bias for any given tweet.

How we built it

To access real, authentic news, we scraped news using a custom built API and then transitioned to Google's News API for scalability and for speed. The Twitter bot was developed in Python utilizing Tweepy and the Twitter SDK, always listening for a new @ reply into a conversation to then check a tweet and write a reply, all within milliseconds.  Our Chrome extension was developed using JavaScript, HTML, and CSS to effectively showcase both the credibility and the bias of an external link on Facebook. 

Challenges we ran into

We had initially hoped to be able to develop a Facebook Messenger bot that would always be listening to a user's conversation and would reply anytime some fictitious was said. However, we later learned through various methods, APIs, and SDKs that Facebook does a fantastic job securing users' private conversations, making an always-listening bot impossible. This is why we pivoted to the Twitter bot, which allows us to tackle fake news on two of the largest social media platforms today. Also, time and sleep deprivation caused many struggles.

Accomplishments that we're proud of

Ozzie tried valiantly to scrape Facebook but is most proud of his beautiful Chrome extension. Nakul was most proud of his creative backend architecture. Olivia built her first Twitter bot using Python for the first time. 

What we learned

We learned that Facebook has some serious restrictions, that machine learning is complicated and tedious, and that we're all great friends. ❤️

What's next for TestProject

We'd like to add more data points to increase the algorithm's credibility. 
",,https://github.com/oliviabrown9/RealFactsBot,,"Poynter Fellowship: Best Hack to Counter Fake News, Facebook: Best use of a Facebook API or SDK, Google: Best Google Cloud Platform Hack","python, twitter, javascript, tensor-flow, html, css, chrome, facebook",OkItsOlivia,Stanford University,3,nakulrocks,EricZelikman,kirkbyo
DoorHero,http://yhack2017.devpost.com/submissions/84096-doorhero,"Inspiration

Automatic Doors

What it does

How I built it

Challenges I ran into

Accomplishments that I'm proud of

What I learned

What's next for DoorHero
",,https://github.com/Li-Eric/YHack2017,,Stanley Black & Decker: Secure Android App Enabling Cloud Analysis of IoT Data,"java, python, android, flask",Li-Eric,University of Waterloo,2,tash-had,rchliu
IOTize,http://yhack2017.devpost.com/submissions/84097-iotize,"Inspiration

With iOS rolling out an in built QR code scanner in the camera, this provides a ubiquitous, easy to use (very low barrier of use) way to interact with real world objects. We envision a world where can access information about any real world object and interact with these objects simply by scanning and clicking. The use cases are endless: scanning bus stop to get bus schedule and pay ticket, scanning medications to get drug content and directions, scanning school equipment to get instruction and request maintenance, scanning restaurant check to pay and give feedback. Furthermore — this paves the way for the upcoming AR revolution!

What it does

We're building the first online, crowdsourced registry for physical objects. Users, organizations, manufacturers can snap an image of an object in the world, assign it some metadata, then print out a QR code representing that digital record of the object. Other users simply scan a QR code and access the page associated with the object. Imagine seeing a washing machine that's broken — what if you could scan its QR code, read about how to fix it, and contact a service person right in that UI?

How We built it

We build this with ReactJS, Node, Express, and MongoDB.

Challenges I ran into

Trying to figure out what features to double down on, and also how to work on front-end and backend concurrently (without getting out of sync with our API design).

Accomplishments that I'm proud of

Getting this to actually work!

What I learned

That ideas are cheap — execution is everything. Also, that your idea evolves as you build it.

What's next for IoTize

Nail the QR code interaction user flow. More robust UI. Get some sleep. Getting a more robust and idiot proof MVP. Add a security layer. Invest more on data analytics. We're hoping to also come up with an idea of how to represent ""Events"" or ""Interactions"". What if you could scan a QR code, and engage in an interaction that taught you more about financial literacy? or credit cards? Or what if you could scan a QR code for an event or promotion?
",,https://iotize.herokuapp.com/,,"Stanley Black & Decker: Storage Solutions Augmented Reality, JPMorgan Chase: Finance of the Future, JetBlue: Best Use of JetBlue Low Fares and Deals Data, Rough Draft Ventures: Most Entrepreneurial Hack","node.js, react, express.js, mongodb",zfranklyn,Yale University,1,hongxinyupires
Pyground,http://yhack2017.devpost.com/submissions/84098-pyground,"Inspiration

We were inspired by Xcode's Swift playground, which evaluates code live in a sidebar.

What it does

This is an extension for Atom that evaluates Python code and presents it live next to the corresponding line in the code editor. Thus, the user can see how every variable is changed as the user is typing the program. Users can keep typing and catch whatever mistakes they has have committed without having to run the code. This benefits for students of computer science and more advanced users who would like to prototype quickly.

How we built it

There is a Python backend with our custom Python interpreter that evaluates expression and displays user-friendly output. On the front-end, we created an Atom package. We used Javascript ES6 and Atom APIis.

Challenges we ran into

The main challenge was building the interpreter. It was difficult to do this since no interpreter out there already did what we needed. We had to parse the code and prevent all sorts of errors involved in running code within code.

It was also challenging to figure out the Atom APIs to get a user-friendly and very responsive interface.

Accomplishments that we're proud of

We got some logic in the interpreter, and it is somewhat useful. It is also extensible and can be built-upon by others.

What we learned

We learned about interacting between a Python program and an Atom extension. We learned Atom APIs and also some basic Python parsing and interpreting.

What's next for atom-playground

We would like to add graphics to understand loops and support for recursion analysis.
",,https://github.com/CaoRuiming/atom-playground,,"","javascript, python, css",dorian_charpentier,Brown University,1,raymond_cao
FakeOut,http://yhack2017.devpost.com/submissions/84099-fakeout,"Inspiration

We all have that grandparent that shares fake articles on Facebook.  While we know they have good intentions, this practice only increases stress for both our grandparents and us.

What it does

Fake Out uses machine learning to identify when you are posting an article that has fake news. It then notifies you through our chrome extension and gives you an option of other news you can share instead.
",,https://github.com/NoahNaiman/YHack2017,,"Poynter Fellowship: Best Hack to Counter Fake News, Facebook: Best use of a Facebook API or SDK","python, beautiful-soup, flask, facebook, machine-learning, chromium",SarahGreisdorf,Boston University,2,NoahNaiman,mdematte
Detecting Potential Fake News,http://yhack2017.devpost.com/submissions/84100-detecting-potential-fake-news,"Inspiration

We wanted to find fake news and learn valuable skills that will be relevant throughout our lives.

What it does

The program takes in an article, and parses several keywords.  It then runs a google search for those keywords, and parses the text from the top several results.  Then, the articles are split into sentences, and sentiment analyses are performed on each sentence, with each sentence having a negative, neutral, and positive value.  These values are then collapsed into 2 dimensions and plotted, allowing us to detect outliers.

How we built it

python

Challenges we ran into

Too many to name

Accomplishments that we're proud of

Built our first non-trivial program!

What we learned

Data scraping, PCA, Machine learning, sentiment analysis, html to text parsing

What's next for mailTrophyToRoncalli402

Getting it to predict fake news more accurately, run more efficiently, and parse more articles without being kicked out by google.
",,,https://s3.amazonaws.com/challengepost/zip_files/production/28197/zip_files/yhack_submission.zip,Poynter Fellowship: Best Hack to Counter Fake News,python,snickerdoodles777,Boston College,1,hugc
Image Editor,http://yhack2017.devpost.com/submissions/84101-image-editor,"Inspiration

Class project

What it does

Allows you to upload an image and play with its orientation, position, color, and more

How I built it

Using java on eclipse, with the help of some starter code for the web server and test cases

Challenges I ran into

Can't get the expand/shrink function to work

Accomplishments that I'm proud of

Getting the rotate and color shifting functions to work

What's next for Image Editor

Fixing expand/shrink function, adding new functions, making existing functions more complex
",,,https://s3.amazonaws.com/challengepost/zip_files/production/28198/zip_files/Transform.java,"",java,kimiphirano,University of Illinois at Urbana-Champaign,0
G-Pass: Revolutionizing Grocery Sharing,http://yhack2017.devpost.com/submissions/84102-g-pass-revolutionizing-grocery-sharing,"Inspiration

We thought about a major issue that we face in our daily lives and noticed that when we cook meals, we generally use less than everything we’ve bought and the rest goes to waste. Alternatively, we buy groceries and end up a little short in the amount we bought. In order to resolve this issue, we built G-Pass (short for Grocery Pass) with the hope of revolutionizing grocery exchange. The concept is simple: we bring the store to you.  

What it does

If a student bought too many groceries, for example 12 eggs, and ends up using only 8 before they expire, they can post to G-Pass to the whole student community that they have 4 eggs they’re willing to pass on. Similarly, another student can search for groceries they're looking to purchase and then the two can exchange.The benefit of this is three fold. First, the food isn’t wasted. Second, someone else can have a healthier meal because they have proper groceries to cook with. Third, both people save money because the seller would have had 0 gain initially and the buyer can purchase without traveling to a grocery store and buy less than retail price. The impacts may be localized at first, but with time and data collection, individual users can combat net waste. With G-Pass, sharing groceries, cooking healthy meals, and making a global impact has never been easier. 

How we built it

Our current app is a web app, that will be converted into a phone app later. The home page is designed to look like a refrigerator, with a button that brings you inside the fridge to the main menu. There, the top shelf is food that’s trending/food that you frequently buy, the middle has a link to the exchange platform, and the bottom is the profile. Every user can upload food to sell. The suggested sell price is devised by an algorithm: 0.75 scaling x the retail price x the amount of product sold. For example, if you’re selling half a loaf of bread you bought for $4, it would be .75 x $4 x .5 = $1.50. On the item’s page will be the places the seller is willing to go to exchange the item, the purchased date, the best by date, the sell by date, and a description. When a buyer is interested, they’ll send the seller a message, and the seller can accept or decline. Buyers can click on the seller and see their profile as well as their rating (based on previous sales). Every user can also view their purchasing history, where they can see previous transactions. We wanted our app to be safe, so we are keeping our app closed to only college students, since students are more likely to know each other, and the school has some control over its students’ safety. In addition, students can meet in a list of secure places, such as dormitories and on-campus locations.
Another common concern would be the health aspect of this app. In order to try and combat the possibility of bad food, we have the requirement that a seller must post an up-to-date picture each day, as well as list the sell by and best by date. Further, as of now, we do not permit the selling of meat over this app, because meat goes bad easily and bad meat poses huge health concerns for users. Finally, we allow users to meet in person and inspect food before fulfilling the purchase. 

Challenges we ran into

We struggled with developing the core of the web app as well as implementing all of the features we had in mind, so we had to make compromises on functionality while retaining the core idea and present the best version of that to date. 

Accomplishments that we're proud of

We're extremely proud of the impact that this app could have on a number of important topics like students health, economic management, and most importantly saving waste globally because that's a huge problem both in America and globally and we hope to combat that locally one pass at a time. 

What we learned

We learned about React and front-end development as well as all of the moving parts that go into making a functional and robust web app. 

What's next for G-Pass: Revolutionizing Grocery Sharing

In the future we plan to expand in multiple ways:
-Build a full scale working implementation to test on university campus within 6 months 
-Ethereum smart contracts to ensure that exchanges are both secure and efficient with a shared ledger
-Automate from active to passive selling where receipts can be scanned at the grocery store and based on past usage, extra groceries are automatically posted to sell threads
-Scalability with the MEAN Stack with a focus on NodeJS and MongoDB to facilitate large and efficient data storage and manipulation
-Machine Learning to personalize items with notifications as they appear, spot trends in purchase times, and identify more popular locations. 
-Partnerships with grocery stores to get students the best deals and promotion of bake sale fundraisers for social good.
",,https://github.com/A-Shah19/yhack.git,,"Rough Draft Ventures: Most Entrepreneurial Hack, Intuit: College Student Prosperity Case","react-native, mongodb, node.js",A-Shah19,"Cornell University, Yale University",3,TonyYang,gillianreyes,Omarqureshi26
Potato,http://yhack2017.devpost.com/submissions/84104-potato,"Inspiration

Studying can be considered tedious for many students and we often find ourselves with low motivation to study and keep up with our schoolwork. By implementing a rewards program that promotes educational development, students can become more prosperous in their education, health and finance.

What it does

Potato is an educational rewards program that grants you a chance to earn points and credits through a variety of options. Partnering with your local school, you can complete problem sets that are selected from your very own professor and review for your courses to help reinforce concepts learned in class. Each problem set completed will grant you 5 points in the rewards program of your choice along with additional points for calories burned to promote healthy and educational behavior. 

How we built it

We built Potato using Swift.

Challenges we ran into

Incorporating healthkit into the app, using Google datastore

Accomplishments that we're proud of

A well-polished and functional iOS application 

What we learned

Table view controllers and tab bar view controllers.

What's next for Potato

Reaching out and getting support from companies to add a larger rewards system and to add more incentives for students to study and exercise.
",,https://github.com/Chan-Matthew/YHack2017/,,"Best Education Hack, Rough Draft Ventures: Most Entrepreneurial Hack, Intuit: College Student Prosperity Case","swift, objective-c, healthkit",Chan-Matthew,McMaster University,2,Merplin,TiffanyYeung
FuelMap,http://yhack2017.devpost.com/submissions/84106-fuelmap,"Mapping the alternative fuel stations of the U.S.

Elevator Pitch

We were interested in looking at climate data, especially given the current administration's track record on environmental policy. In doing research, we happened to find an API for a dataset of all the registered alternative fuel stations (AFS) in the U.S. Although the API itself offers extremely thorough information on each individual station, we were interested in visually plotting each station on a comprehensive map, as well as offering search functionality for a user intending to find local AFS.

Inspirations & Prior Work

1. Walking in L.A.: Times analysis finds the county's 817 most dangerous intersections, via L.A. Times

This article maps and analyzes the number of pedestrian-involved traffic accidents at a number of intersections in L.A., determining several ""danger zones"" where accidents are most frequent. It uses Leaflet to develop interactive maps of the geocoded accident locations. When developing our own app, we will be using Leaflet to efficiently geocode station locations. However, due to the volume of our data, we will most likely be unable to perform analysis to the same amount of detail as the Times did.


The scope of this project is much smaller than our app's. we will have to consider how to feasibly represent the fuel stations on a map without overcrowding (since there are over 28,000 data points).
Using a visual representation and geocoding data appears to be an effective way to depict complicated data in a user-friendly way. we will be doing this for our project.


2. Estimated % of adults who think global warming is happening, 2016, via Yale Program on Climate Change Communication

We thought this article did an effective job of presenting a large dataset in a manner that is comprehensible with the first look. The percentages of adults who believed in global warming were broken down by county, so it was extremely apparent where the believers and the non-believers were concentrated, respectively. That being said, we think breaking up such a big data set into such microscopic levels has its drawbacks, specifically in its lacking of summarization of the data. We want to implement the interactivity of this map in our own project, and perhaps we will color-code the markers in our map to correspond with the fuel type offered there.


The filtering function on this project was essential for helping to understand the data. Since we have only a few days to implement this map, we will allow geographic filtering.
The different answers given to open-ended questions like ""Do you believe global warming exists?"" are much more difficult to encode than the geocoded data of alternative fuel stations. If we have time, we think it would be valuable to visually represent the types of fuel offered at each station as well.


3. How Uber Uses Psychological Tricks to Push Its Drivers’ Buttons, via The New York Times

This article investigates the way Uber leverages its driver-rider-matching algorithm to decrease perceived wait time at the expense of drivers. It exposed the inner workings of Uber, creating yet another public relations crisis for the company in the midst of several allegations of sexual harrassment and sexism in its workplace environment. The article also includes one of the most interesting visualizations I've ever seen. Allowing users to toggle through the different scenarios of driver to rider ratios was a very visually aesthetic way to represent data. 


While the visualization was very nice to look at, the perpetual motion of everything in it made it difficult to concentrate on any one thing at a time. We think allowing user interaction is a net positive, but keeping things simple for the user is also important. We will allow the user to interact with the map through filtering functionality as well as repositioning/resizing, but will also present the data in a static data table.


Articles

1. Western Washington Clean Cities Tout Alt-Fuel Vehicle Fleets, via Next-Gen Transportation News
When we consider alternative fuel vehicles (AFVs), the first thing that comes to mind is usually private vehicles used by the average consumer. However, a significant portion of government-owned vehicles actually run on alt fuels, and these fleets need charging stations. It would be interesting to look at the location and numbers of government-owned fuel stations.

2. First Came the Hydrogen Cars. Now, the Refueling Stations., via The New York Times
Hydrogen fuel cell-powered cars are a new technology and are currently only available in California. As a result, it is reasonable to assume that the number of hydrogen-servicing fueling stations are scarce. This article examines the rise of hydrogen cars and the subsequent appearance of the necessary infrastructure.

3. 2017 Could Prove to Be a Turning Point for Plug-in Hybrids, via The New York Times
This article covers electric-gasoline hybrid cars as a cost-efficient option for alt-fuel vehicles. As data on fueling stations will show, about half of the charging stations in the nation are privately owned. It would be interesting to utilize this data to inquire into how a private fueling station comes to be and what legal implications surround it.

Data

Our data comes from the National Renewable Energy Laboratory, which is a lab of the U.S. Department of Energy. I utilized their Alternative Fuel Stations API both to collect an initial sampling of fuel stations for our homepage and to implement the filtering features of our app.

Deployment

We deployed this app on Heroku.
",,,,"","html, python, css",cindyxkuang,Stanford University,1,charleslu
rgb color game,http://yhack2017.devpost.com/submissions/84108-rgb-color-game,"Inspiration

I wanted to build my own website without using any templates so I came to this hackathon looking to learn some web dev

What it does

helps you practices ur rgb colors

How I built it

online bootcamp
",,,https://s3.amazonaws.com/challengepost/zip_files/production/28201/zip_files/colorGame.zip,"","html, javascript, css",anjian,McGill University,0
Project Elon Musk,http://yhack2017.devpost.com/submissions/84109-project-elon-musk,"All the magic is in our in-person spiel! Stay tuned.
",,,,Rough Draft Ventures: Most Entrepreneurial Hack,dreams-and-grit,h4rmony,"Queen's University, University of Toronto",1,JoshuaConcon
Flight Finder,http://yhack2017.devpost.com/submissions/84112-flight-finder,"Flight Finder

Inspiration

Traveling to new places can be intimidating. Spontaneous road trips or even train rides are the common methods to visit new areas. However, to completely experience a new culture and place, one must travel the world. Plane rides often are planned many months in advance, considering the greater costs, commitment, and effort that flying entails. 

Our team wanted this to change. We want to make flying more spontaneous and convenient so that traveling to new, foreign places can be done easily. In a world that is increasingly more interconnected, traveling to far areas should be more common.

What it does

Flight Finder is a web app that instantly searches through future flight data so that you can be matched with a trip. All you need is your nearest airport and flight date to find a flight. The web app, sorting through hundreds of thousands of data, matches you to a destination and loads relevant information about it. On top of flight information, the user will find photos of the destination and a concise Wikipedia summary all in one convenient page.

Our main idea is to randomize the travel destination. By utilizing this web app, users will travel to places that are previously overlooked or unknown, to develop a greater understanding of the world and different cultures. Users are no longer confined to common and mainstream travel destinations and no longer have to go through the hassle of scheduling. 

How we built it

Utilizing JetBlue's future flight data set, which came in a CSV, we used Python to sort and organize the flights. The data entries were then converted into dictionaries so that they could be used more conveniently within the program. Given user input, the program outputs a round trip that satisfies the user's location and available times. The locations' summaries are instantly generated through the implementation of Wikipedia API in Python. The web app was primarily built with Django in tandem with HTML/CSS.

Challenges We ran into

JetBlue's flight data came with over 100,000 entries which made working with the data difficult due to the sheer size of the CSV file. We came across many errors that could not be searched up due to wifi connectivity issues that at times halted progress. Finding a way to most efficiently store the entries into dictionaries was challenging because the data came with many parameters, such as origin, destination, flight time, and price, and it was not clear at first how they should be organized. The use of the Wikipedia API required learning an entirely new API. 

Accomplishments that we're proud of

With Flight Finder, we built a web app that converts multiple steps of planning flights to just one easy click-- making flying a much more convenient and attractive mode of travel. Users will no longer have to go through the hassle of looking through potential destinations and searching up each of them on Google. We were able to work with data at a massive scale and parse it effectively in a way that works instantly from the user's perspective. 

What's next for Flight Finder

We want to use more APIs in the future so that the user can obtain more relevant information with a single click. Moreover, we will optimize our sorting and search algorithms in order to make the process on the user's end even faster. 
",,,https://s3.amazonaws.com/challengepost/zip_files/production/28204/zip_files/flight_site.zip,"JetBlue: Best Use of JetBlue Low Fares and Deals Data, Rough Draft Ventures: Most Entrepreneurial Hack, Intuit: College Student Prosperity Case","django, python, html, css, bootstrap, photoshop",tyj144,Brown University,3,sonny3690,dsam99,ryanchoi9575
Email Analysis Tool,http://yhack2017.devpost.com/submissions/84113-email-analysis-tool,"Inspiration

As college students, we have a lot of emails in our inboxes. Our team was curious to learn more about our inboxes and see what sorts of trends we could find.

What it does

Our Email Analysis Tool provides a simple platform for you to learn about your inbox. You sign into your Gmail account, and the tool displays a webpage containing some bar graphs and data tables that summarize various aspects of your email.

How we built it

We wrote Python code for the server and also used Jinja to automatically create html for the front end. We used the Gmail API.

Challenges we ran into

We faced challenges regarding optimizing runtime for large inboxes. We also faced challenges regarding streamlining the user experience at first.

Accomplishments that we're proud of

We produced a web application that successfully allows a user to log in to their Gmail and see statistics about their inbox in one very concise place. We also overcame many challenges along the way to get to the final product. 

What we learned

We learned about the power of resilience and determination in developing a project from start to finish. Also, Hackathons are fun! 

What's next for Email Analysis Tool

We want to make our tool compatible with computers of all ages/types. We also want to translate this application to a publicly accessible web application so that anybody can use it.
",https://youtu.be/xWt_Bt9cniA,https://github.com/captainsn/AlphaMail,https://s3.amazonaws.com/challengepost/zip_files/production/28223/zip_files/finalproject.zip,Google: Best Google Cloud Platform Hack,"python, gmail, google-gmail-oauth, flask, jinja",captainsn,Harvard University,1,dmohnot
IntelliQuote,http://yhack2017.devpost.com/submissions/84114-intelliquote,"When this is about the fate of those you love, it's obvious you would only choose the best for them. That's why we developed a state-of-the-art machine learning algorithm and recruited some of the best professionals in the field to support your decisions. This quote on your life insurance is not just merely a simple number or payment. It's comprehensive. It's dynamic. It's intelligent.
",,http://iquotr.azurewebsites.net/,https://s3.amazonaws.com/challengepost/zip_files/production/28260/zip_files/IntelliQuote_YHack_Li.zip,Vitech: Life Insurance Quoting Challenge,"scikit-learn, python, azure, html, css, matlab, api, adobe-illustrator, photoshop",zichenli,New York University,3,mk5921,sb5829,thenameszhou
Tabnabbing Detector,http://yhack2017.devpost.com/submissions/84116-tabnabbing-detector,"Inspiration

We all grew up in poverty. Our families couldn't afford good internet security while browsing for hot memes. That's when it hit us! We'll learn to code and write Chrome extensions that will protect everyone! Tabnabbing is one such atrocity one may encounter while googling kitty cat images or whatever it is they do online.

What it does

First, let's briefly explain tabnabbing. Tabnabbing is a phishing attack a site can do by appearing benign at first (maybe an article detailing the latest news about Bitcoin) but after detecting that you have switched to another tab, alters its appearance to that of say, a Yhack login page! Then when you go back to that tab later, you believe you were on the yhack website and were logged out and so you enter your credentials to log back in. The bad guys now have all your top secret yhack info!

Our extension detects these changes and alerts the user to how much the tab has changes since you last saw it. This is done by taking a screenshot before you change tabs and another once you come back to that tab. We run some high tech image analysis on the two screenshots to find the differences and overlay an image detailing what has been changed in bright pink. Why pink? Why not? The user can also look to the extension's icon to see the screenshots as well as the percentage of what has been changed.

How we built it

Using Chrome's built in APIs we were able to take the screenshots and run them through image analysis software using Resemble.

Challenges we ran into

Preventing not-exactly-race-conditions-because-it's-javascript-which-is-a-single-threaded-environment with all the asynchronous calls we had to make with Chromes tabs API.

Accomplishments that we're proud of

It successfully informs the user of any changes.

What we learned

The internet is a dangerous place for rascals like us... making software like this very valuable.

What's next for Tabnabbing Detector

Who can say?
",,https://bitbucket.org/Chuntak/tabnabdetector,https://s3.amazonaws.com/challengepost/zip_files/production/28207/zip_files/tabnabdetector.zip,"","javascript, chrome-apis, resemblejs",roberttrujillo,SUNY Stony Brook,2,binzhou1,chuntakkong
YHack ,http://yhack2017.devpost.com/submissions/84117-yhack,"Inspiration

built for new crypto investors

What it does

real time news analytics

How we built it

nodejs, google app engine, all the good stuff

Challenges we ran into

everything

Accomplishments that we're proud of

everything

What we learned

everything

What's next for YHack

everything
",,,,"","node.js, google-app-engine",dynamix101,"McGill University, Rutgers, The State University of New Jersey",1,jacobhl
Emotionyze,http://yhack2017.devpost.com/submissions/84119-emotionyze,"Inspiration

We wanted to make customer service a better experience for both parties. Arguments often arise during phone calls due to misunderstanding, so we wanted to create an app where voice can be analyzed and a course of action is suggested.

What it does

Our program is able to record a conversation and display the emotional state of the person speaking. This mobile app allows users, specifically people who are working the customer service department, to understand the caller better. As the customer explains the situation, the sadness, joy, fear, anger, and disgust in his/her voice is calculated and displayed in a graph. After a summary is given from entire conversation and the strongest, emotional tone, language tone, and social tone are given. The user has the ability to see the specific details of what the strongest tone consisted of. Lastly, a course of action is given according to the combination of tones.

How we built it

We began building our app using traditional paper prototyping and user research. We then, designed screens, logos, and icons with photoshop. Afterwards, we used keynote to display interactive data to showcase emotion. Lastly, we used Invision to prototype the app. For the backend, we attempted to use IBM Watson Tone Analyzer API to help detect communication tones from written text.

Challenges we ran into

The challenges we ran into was slow wifi, lack of technology and a basic coding knowledge. 

Accomplishments that we're proud of

Were are proud of finishing a prototype in a two person in the demanding situation. We were able to design the user interface and user experience and challenge learning curves in the short amount of time. The mobile application is beautifully designed and capture our mission of helping the customer service field through understanding and listening.

What we learned

We learned the importance of the design process of ideate, research, prototype, and iterate. We learned programs such as principle and developed our skill in photoshop, keynote, sketch, and Invision. We attended the Intro to APIs workshop and learned about http request and how to use them to interact with APIs.

What's next for Emotionyze

We are going to continue to work on IBM Watson Tone Analyzer API to further develop the detection of communication tones from written text. We are also going to work not the overall User Experience and User Interface to create an effective mobile application
",,https://invis.io/37ERT3OV8,https://s3.amazonaws.com/challengepost/zip_files/production/28208/zip_files/Yhack_Submission_-_Emotionyze.pdf,"Mirum and JWT: Can a Computer Hear How You Feel? Seeing the emotion in IM and voice, Rough Draft Ventures: Most Entrepreneurial Hack","keynote, sketch, invision, photoshop",amandreoc,University of Waterloo,1,kaylinlee
TWB,http://yhack2017.devpost.com/submissions/84121-twb,"Inspiration

School clubs often require communication using Discord and Facebook. Sometimes, Admins forget to put information on one, leading to confusion. With this tool, organizers can control what goes on both pages from Discord.

What it does

Users can use to pull post from Facebook onto Discord channels and also able to send post to Facebook pages as well.

How I built it

Using Facebook Graph API and Discord.py, we created an app that allows easily shared information through utilization of resources from Facebook and Discord. 

Challenges we ran into

Learning Facebook Graph API and Discord.py was the toughest challenge we faced.

Accomplishments that I'm proud of

This is our first hackathon so we are all proud of ourselves for finishing our project as intended.

What I learned

Json and Javascript are important to understand on working with any web related application.

What's next for TWB

Add some functions such formatting text, running bot off AWS server instead of a workstation.
",,https://github.com/Bwatada/DisBook,,Facebook: Best use of a Facebook API or SDK,"python, facebook-graph, discord",Rayliu109,McMaster University,1,Bwatada
thefeels,http://yhack2017.devpost.com/submissions/84126-thefeels,"Inspiration

A way to present emotions to users by showing a given meme!

Challenges I ran into

Hard getting the google cloud working and api's, tried best and learned 

What's next for thefeels

Hope to work more on this in the future.
",,,https://s3.amazonaws.com/challengepost/zip_files/production/28217/zip_files/yhacksub.zip,"","html, css, google-cloud",jqw115,Cornell University,0
CalPal,http://yhack2017.devpost.com/submissions/84128-calpal,"Inspiration

For freshmen in college, it is not only intimidating, but more challenging to gain access to events that upperclassmen plan. Our application will not only allow them to quickly know when the times for their favorite events are, eliminating hassles from club leaders in trying to get the message out about their club, but it also facilitates in allowing freshmen meet upperclassmen much more easily, which is vital in helping the freshmen prosper (upperclassmen can and do become great mentors for struggling freshmen, as they have experienced firsthand the same problems that freshmen face.)
In a way, this app will provide a network without having to reach out to mentors personally. 

What It Does

Our idea is to create an application that complies all the events of a college’s club into a calendar. We would take the idea a step further by then creating pop-up screens for each event with information on where, how expensive and if there will be refreshments served.  

How We Built It

The application will first start with a welcome screen with drop down menus for the college, club name and month of the events. Once selected and once the user hits submit, the webpage would then be redirected to another page containing the calendar. We planned on making the calendar from HTML and CSS. On each cell of the calendar, we will insert a pop-up screen that will contain more information on the event, besides the person hosting it and what time of day it will be held. 

Challenges We Ran Into

Since we built a webpage to model our application idea, the biggest problem was linking the CSS to the HTML file. We also had trouble creating the calendar out of HTML and CSS and attempted many times to cut down the code (there were many components of the list for the days of the month that we just couldn’t cut down). We tackled this challenge by just putting the HTML and CSS files in the same directory so they would be able to find each other more easily. We were not skilled in Javascript so we did not know how to use if statements to manipulate the drop down menus into displaying items that were characteristic to the appropriately chosen school. Another problem we ran into was the problem of the options for “What clubs/associations?” being displayed, even though we did not click on the drop down menu to open. 

Accomplishments

We were able to create a dynamic welcome page that scrolls down to more options and is then connected to another calendar page. In the end, we did create a calendar out of just HTML and CSS and we were able to link the correct CSS file to an HTML file. We were also able to fix the malfunctioning dropdown menu problem by taking out the links on the html document. Since we are still on the same HTML page, it was not necessary to insert links of the same page, with just a number difference or # difference. This did solve the problem and the organizations popped up as a list once clicked on.

What I Learned

It really is better to brainstorm before coming to the venue. Initially thinking that the concepts were out of our leagues, we didn’t really take time to pick a topic we were passionate in beforehand. Having thought of this idea as freshmen that find it hard to navigate the events on campus, we really could have furthered the idea if we started earlier. We also learned that having knowledge of Javascript would have been a huge booster in our ideas of only showing certain options if a certain college is chosen. It would also have been helpful in the pop-up windows that we wanted to make on our calendar dates. 

What’s Next for Test

We definitely need to finish coding the calendar and make it have dynamic functions, such as pop-up windows with more information or even have information to begin with. We would also like to attempt Javascript when we are more comfortable programming in different languages. Perhaps we could even loop into syncing this app idea to a student’s email or student portal in college (which would aid them in figuring out a schedule for not only leisure events but also academic ones). 
",,,https://s3.amazonaws.com/challengepost/zip_files/production/28220/zip_files/CalPal_Code.pdf,Intuit: College Student Prosperity Case,"html, css",lz2583,Barnard College,1,maz2130
textbook buy-sell,http://yhack2017.devpost.com/submissions/84129-textbook-buy-sell,"Inspiration

We noticed that our Facebook textbook exchanges aren't very efficient and can be prone to misunderstandings

What it does

Displays textbooks based on what you provide (more options if you provide less, specific textbooks you need for if you provide as much information as possible: school, major, subject, year, course name)

How I built it

front end almost finished, back end could not be done b/c of issues with Google App Engine

Challenges I ran into

Time problems, Google App Engine had gcloud errors that could not be resolved for java

Accomplishments that I'm proud of

helping with front end

What I learned

backend connections with frontend

What's next for textbook buy-sell

further development.
",,https://www.figma.com/proto/OrE8jVsc24LQ7r4drGRf74TM/textbook?scaling=contain&node-id=21%3A54&redirected=1,https://s3.amazonaws.com/challengepost/zip_files/production/28221/zip_files/YHack_textbook.zip,"","java, google-app-engine, html",Advanceshipper,Duke University,0
Intellisurance Quoting,http://yhack2017.devpost.com/submissions/84130-intellisurance-quoting,"Inspiration

Machine learning is fun and there was a lot of fun data to play with

What it does

Predicts life insurance quotes using some simple information about you

How we built it

The front end is simply built with html, CSS and Javascript. The backend is based in Python and built with Flask. Sklearn is used for the majority of the machine learning.

Challenges we ran into

Reading the data at first was a little challenging because the formatting of the index variable was a little strange.

Accomplishments that we're proud of

Some of are predictions are pretty accurate, and we found lots of interesting trends that could be exploited.

What we learned

Data formatting, linear regression, and other similar ML techniques in sklearn.

What's next for Intellisurance Quoting

Predicting what plan customers will buy and optimizing profit with those predictions.e
",,,,"Vitech: Life Insurance Quoting Challenge, Best Healthcare Hack","python, flask, machine-learning",ejmejm,"Dartmouth College, Yale University",2,amy-guan,BenjaminMartin
Stealthy Summary and Sentiment ,http://yhack2017.devpost.com/submissions/84131-stealthy-summary-and-sentiment,"Inspiration

I was inspired by my brother bugging me when I didn't know Star Wars trivia. He's a big fan and knows everything about it, honestly. I wanted to stealthily look up Star Wars facts without him knowing so I could impress him.

What it does

You text a Twilio number and it uses the Viacom data-point core API to get Star Wars data from the Swapi API. You can get the scrolling summary of any Star Wars movie as well as the sentiment of the summary (the one that rolls at the start of each film.)

How I built it

Node.js, Viacom, Twilio, JavaScript, Ngrok for local tunnel

Challenges I ran into

Making the right endpoint/URL with Viacom data-point core and I started this Saturday night when the wifi was so bad I couldn't do the hack I'd started Friday that needed to send more data over my ngrok tunnel. Also, the wifi was still bad so it took time to test my text messages.

Accomplishments that I'm proud of

It works, others can use it, it's stealthy.

What I learned

Viacom API, endpoints, swapi

What's next for Stealthy Summary and Sentiment

Add translation, ideally with Google cloud. Add a website so there's a UI (right now it's just backend that powers the texting SMS with Twilio.
",,https://github.com/elizabethsiegle/yhack2017,,Viacom: Best Use of the Viacom DataPoint Javascript Utility ,"javascript, twilio, viacom, node.js",lizziepika,Bryn Mawr College,0
JetBlue Trip Generator,http://yhack2017.devpost.com/submissions/84132-jetblue-trip-generator,"Inspiration

A backpacking trip one of our members did a few years ago

What it does

Using the given parameters it creates an itinerary for the customers with the best deals.

How we built it

Implemented Dijkstra's Algorithm in Java. 

Challenges we ran into

GUI, adding a LinkedList to the edges, getting enough sleep

Accomplishments that we're proud of

GUI

What we learned

It is important to work as a team

What's next for JetBlue Trip Generator

Compilation!
",,https://github.com/nyurdakul/JetBlue/,https://s3.amazonaws.com/challengepost/zip_files/production/28232/zip_files/JetBlue_2.zip,JetBlue: Best Use of JetBlue Low Fares and Deals Data,java,nyurdakul,Columbia University in the City of New York,0
Bucket List,http://yhack2017.devpost.com/submissions/84133-bucket-list,"Inspiration

As college students, we want to be able to find cheaper and effective ways to travel home for the holidays during our breaks. Compared to other applications, Bucket List combines jetBlue's best deals to come up with suggestions for your next trip. 

What it does

Bucket List takes advantage of jetBlue's Lowfares and Deals data sets and displays it in several ways to users to make travel plans. The app's Explore section offers pictures of potential travel destinations, which when expended, displays departing points one could go from to reach the destination. In the Analytics section, users can find graphs of best fare deals depending on the time of year they are available to travel, based from their closest airport. 

How we built it

We built our application on Ionic to simulate iOS and Android surfaces simultaneously. We converted jetBlue's data sets into mySQL, where we extracted its individual data to display on the app, using Php and HTML. Our login page was incorporated with a splash screen and used firebase to complete the login system. 

Challenges we ran into

At first, we spent time choosing a framework to work with; starting off with a web app. However, with progress, we decided that a mobile application would better suite our goals, having user interface be easier to navigate. When we parsed the data sets from a mySQL database to the home page using Php, we found that Php commands does not work on mobile applications, therefore having to upload the files onto a host and embedded it onto our app. 

Accomplishments that we're proud of

We're proud of developing an application that has an easy to navigate user interface. The team was divided into sections of front-end and back-end where we accomplished each of our roles. An early achievement was that we had successfully parsed the data sets from mySQL onto our page, after several failing attempts, finally getting us a jumpstart into the design process knowing that we have the data to work with. 

What we learned

We were learning about Node.js and the React js library, before having changed from a web app to mobile. Furthermore, we believe we gained skills and became familiarised working in the Ionic interface, towards the end of the event. 

What's next for Bucket List

Moving forward we hope to add more customizability features for a user's account. For the analytics page, we plan to better incorporate the view-ability of data: Fare points, for example, is only effectively shown as a graph if the user is a frequent flyer. In the future, we would like to have the opportunity to directly increment jetBlue's API into Bucket List, for an updating data set of flight deals. 
",,https://github.com/ezhu5/bucket-list,https://s3.amazonaws.com/challengepost/zip_files/production/28222/zip_files/Github.docx,JetBlue: Best Use of JetBlue Low Fares and Deals Data,"ionic, php, mysql, html5, javascript, typescript, css, firebase",JayAgaskar,"Northeastern University, Johns Hopkins University",3,reecewgriffith,shaunkh,ezhu5
Alarm Clock Assistant,http://yhack2017.devpost.com/submissions/84134-alarm-clock-assistant,"Inspiration

We were inspired by the new AI digital assistant of today; these include Google Assistant, Siri, Alexa and many more. These programs are very helpful and we made a simple assistant for android devices. Many times, the first few things we do when we wake up are snooze your alarm and check the time. With this app, it makes this easier by reading out the time.

What it does

When you select a time, it reads it out loud.

How we built it

We built the text-to-speech program and alarm clock separately in android studio and then combined them.

Challenges we ran into

We ran into challenges combining the programs because we had different classes and it was difficult to put things together.  

Accomplishments that we're proud of

We are proud that we managed to put it together.

What we learned

We learned how to use android studio to make an android app. 

What's next for Alarm Clock Assistant

Next, we will add weather functionality, in which the assistant will read the weather forecast along with the time. 
",,https://github.com/kevin-mao/yhack2017,https://s3.amazonaws.com/challengepost/zip_files/production/28225/zip_files/AlarmClock2.zip,"Stanley Black & Decker: Secure Android App Enabling Cloud Analysis of IoT Data, Google: Best Google Cloud Platform Hack","android-studio, java, xml",kevin-mao,Columbia University in the City of New York,1,vvvin
Inspiring Quote Generator,http://yhack2017.devpost.com/submissions/84135-inspiring-quote-generator,"What it does

With a click of a button, users can obtain randomly generated quotes while changing the background to random colours. Users can also decide to share the quote they obtain on twitter. 
",,https://github.com/macraagas/quoteGenerator,https://s3.amazonaws.com/challengepost/zip_files/production/28226/zip_files/newRandoQuoteGenerator.zip,"","html, css, javascript",reyraagas,McGill University,0
ViQuote,http://yhack2017.devpost.com/submissions/84136-viquote,"Inspiration

We are all interested in the potential and power of machine learning, and the fact that this challenge additionally incorporated elements of public good only added to the appeal. Further, as a biomedical engineering student, Rounak was particularly drawn to the health insurance aspect of the challenge, while Raymond and Nahum (both of whom are computer science students) were deeply interested by the data sets and potential UI designs. 

What it does

Our web app provides a user-friendly interface through which prospective health insurance buyers can get highly reliable quotes through their browser by submitting their information to a cloud-based machine-learning model.

How we built it

We trained a machine learning model with over 130,000 randomly sampled ViTech data points, each of which represented a health insurance policyholder. Using Python Requests, we sampled data points from the  ""v_participants_detail"" field, and used the IDs provided there to query the corresponding ""v_participants"" and ""v_quotes.""

We parsed these data points into a CSV to contain information about:


age
gender
height
weight
location
employment status
annual income
marriage
usage of tobacco
preconditions
number of people covered
additional coverage
premiums for bronze, silver, gold, platinum plans


We used a three-layered Keras neural network to train our model to predict premium costs based on each policyholder's features (such as age, gender, etc.). Roughly 70,000 of the data points were used as training data, while the remaining 60,000 were used for validation.

We used React.js to create the form through which each prospective policyholder would submit their information. In addition, in order to incorporate our Google Cloud Machine Learning model, we created a Flask application API endpoint to access the API. We deployed the app using Heroku.

Challenges we ran into

We had issues with the Google Cloud backend, as the current documentation only provides Python implementation. Thus, because our project was primarily created in JavaScript, we created a separate Flask application API endpoint through which we could access the Google Cloud ML API. It was then necessary to configure the CORS settings for both the JavaScript and Python code. In addition, it was initially difficult to query the data and to parse our large datasets. Fine-tuning our machine learning model was a cryptic challenge, as none of our team members had ever had experience with such APIs before.

Accomplishments that we're proud of

In a short time, we were able to create and deploy a Google Cloud-based machine learning model. We generated an robust, styled, responsive application by using an incredibly diverse array of developmental tools, and all garnered a strong initial comprehension of machine learning. Finally, we all deepened our technical competency in creating data-rich applications.

What we learned

machine learning, CORS, Flask, data parsing, Google Cloud API

What's next for yhack2k17

We would like to further refine our neural network by running it on far more data and testing different network configurations. In addition, it will be incredibly useful and informative to create interactive data visualizations of the insurance policy information. To improve the user experience, we would like to streamline the ""latitude"" and ""longitude"" form inputs to instead query the Google Maps API for geocoding of one's address.
",,https://github.com/Ray725/yhack2k17,,"Vitech: Life Insurance Quoting Challenge, Google: Best Google Cloud Platform Hack","javascript, python, css, html",rounakbera,Columbia University in the City of New York,2,Ray725,nahum365
Food Chat,http://yhack2017.devpost.com/submissions/84137-food-chat,"Inspiration

It's usually difficult to decide on what to eat. So it would be nice to have options to choose from.

What it does

Shows people nearby restaurants when they chat something with ""food"" or ""eat"" in their message.

How we built it

We used socket.io, javascript, node.js, and HTML/CSS. We also used the Google Places API.

Challenges we ran into

We ran into challenges with implementing the Google Places API.

Accomplishments that we're proud of

We made a chat room that works locally and shows suggestions when someone types in food or eat. It shows 5 nearby restaurants and gives links to them.

What we learned

We learned how to build a chat room with socket.io and learned how to implement the Google Places API.

What's next for Food Chat

We would like to improve the UI to be more aesthetic. We would also like to add more features for showing the restaurants, like adding a map feature and showing where the restaurants are.
",,https://github.com/renelee/foodchat.git,https://s3.amazonaws.com/challengepost/zip_files/production/28228/zip_files/foodchat.zip,Intuit: College Student Prosperity Case,"",renelee22,"University of California - Berkeley, Cornell University",2,kimkao,Timx123y
Uvent,http://yhack2017.devpost.com/submissions/84138-uvent,"Uvent

Alexa skill to discover events around you

Inspiration

One of the greatest truisms in the entrepreneurship space is that no one wants an events app - and we concur. People prefer asking their friends!

Example:


“Hey, Tim! What are you doing tonight?”


But if you’re a CS/EECS/CE kid without friends, you can ask the next best thing - Alexa from the 5th Echo Dot you’ve won at a hackathon! With that we present Uvent, the premier Alexa skill for discovering events around you.

Example:


“Hey Alexa! Ask Uvent what’s going on this weekend?”


Finally, you can get some use out of your Echo Dots!  

Components

Amazon Alexa Interface

Users can ask Uvent via Amazon Alexa what events are nearby!

Background processes

Each morning, Uvent will automatically update our event database with any new postings from the datasets we're following.

Frontend web interface

We also built a web interface (you can also use it on mobile) for users to submit events they know about as well as scroll through our database of events.

Publicly exposed API

We want everyone to experiment with event data, so we've exposed our APIs for anyone to play around with. We've done the hard work of cleaning up the data - you just have to come up with a cool idea!

How we built it


Alexa Skill Kit
DynamoDB: stores event data
API Gateway: exposes a public API to upload and get events
AWS Lambda: Node.js functions to interface with DynamoDB and expose to API Gateway, scheduling daily web scraping, Alexa Skill logic
Elastic Beanstalk: hosts the website (we created a Node/Express server because why not)
Materialize CSS


Challenges we ran into

With any date/time based project, there's a lot of converting between different formats, time zones, etc... which quickly gets frustrating. That took some time to get hashed out, but eventually we got it.

CORS also gave us some trouble with sending POST requests to our API. We were able to add a Access-Control-Allow-Origin fix that allowed us to send the requests.

What we learned

Our goal with this project was to use as much of AWS as possible, and I think we’ve definitely learned a ton. Reading and learning about AWS or any tech isn’t the same as actually using it in a project, so this really opened up our eyes in terms of how to configure our services and what the applications of each are.

What's next for Uvent

We’re initially launching Uvent for events near the University of Maryland, College Park. Because of our familiarity with event datasets in our area, that's what we're starting out with. In the future, we plan to expand nationwide, covering as many college campuses as possible (and even further after that)!

Ultimately, we want Uvent to tailor events based on every user's interests. As the user uses the skill more, they will receive more events that are filtered for their preferences. When someone asks Alexa for event suggestions, it will list out the events that are most relevant.

Technical Documentation

Public API

POST /events
{
  ""operation"": ""create"",
  ""payload"": {
    ""Item"": {
      ""name"": ""Bitcamp"",
      ""description"": ""Bitcamp is a place for exploration. We're a hackathon that values participant experience and mentorship over competitiveness and points. Come to have fun with your friends, learn something new, eat s'mores, and have a generally awesome time. We have all sorts of crazy activities planned for you...you'll have to come to find out the rest!"",
      ""location"" : ""Xfinity Center"",
      ""startDate"": ""2018-04-06T17:00:00Z"",
      ""endDate"": ""2018-04-08T15:00:00Z"",
      ""categories"": [
        ""Competition"",
        ""Hackathon"",
        ""Multiday"",
        ""Technology""
      ]
    }
  }
}

GET /events?begin=[beginDateTime]&end=[endDateTime]
var startStr = ""2018-04-03T00:00:00Z"";
var endStr = ""2018-04-10T00:00:00Z"";
var url = ""/path/to/our/url/"" + startStr + ""&end="" + endStr;

$.get(url, function(res, status) {
  for(var i = 0; i < res['Items'].length; i++) {
    const e = res['Items'][i];
    console.log(e['Name']); // Print out each event name
  }
});

DB Schema

Events
{
    eventID:integer,
    name:string,
  description:string,
  location:string,
    startDate:Date, //format: `date ""+%Y-%m-%dT%H:%M:%SZ""`
    endDate:Date,
    categories:[string],
    creationDate:Date
}

User
{
    alexaId,
    eventHistory:[Event uid],
    categoryWeights:{
        category:weight
  }
}
",,https://github.com/timothychen01/uvent,,Intuit: College Student Prosperity Case,"amazon-alexa, amazon-web-services, dynamodb, node.js, lambda, api-gateway",timothychen01,University of Maryland - College Park,2,robotal,zkhan124
EmoBot,http://yhack2017.devpost.com/submissions/84139-emobot,"Inspiration

We were inspired by the challenge: 
Mirum and JWT: Can a Computer Hear How You Feel? Seeing the emotion in IM and voice.

What it does

By analyzing IM and voice, EmoBot will be able to score and visualize the emotional tone of a conversation.

How we built it

With love and a dash unicorn dust... jk,

We built the back-end in Python. We researched API’s that analyzed text for sentiment, and used the IBM Watson Tone Analyzer API which assigns an emotion to input text. Our input text comes from a text file which we read. The Tone Analyzer assigns either anger, joy, disgust, sadness, or fear. It also tells us if the text was analytical, tentative, or confident. The API also returned a score between -1 and 1 for each emotional state to indicate magnitude. We also used a natural language API from Google to detect if a phrase is positive or negative. Google also returned a score between -1 and 1. If the score is above 0, it indicates a positive emotion. If the score is negative, that indicates a negative emotion. In python, we have our program read a text file and analyze it through both the IBM and Google APIs. We then compared the results from both Google and IBM. We used Google API as a backup to verify our results from the IBM API. If the APIs returned nothing for the outputs, we assumed that the phrases were emotionless and assigned it as “neutral”. Our program outputs the emotion associated with the text along with the score.

Challenges we ran into

One of the challenges we faced was implementing the API into our program. We were unfamiliar with using these API and getting it to work in Python; this took some time and research. Trying to extract the correct output emotions and logistically inputting text into the API was challenging. We also needed to create a server through Flask to connect the back-end to front-end which was challenging at first because it was a new topic.

Accomplishments that we're proud of

We made EmoBot work! And we all slept at some point during this weekend.

What we learned

Human Emotions are complicated... very complicated.

What's next for EmoBot

In a big picture, EmoBot can be further developed and implemented into fields like commercial advertisement, IoT, & daily-care etc.

More specifically, we are still in the process of improving the accuracy of the evaluation. Right now there are emotions that we are pretty confident about, but there are also a couple of feelings that are more difficult to detect. Solving issues like this can improve general user experience of EmoBot.
",,https://github.com/tonylearn09/emobot_server,https://s3.amazonaws.com/challengepost/zip_files/production/28233/zip_files/emobot_server-master.zip,Mirum and JWT: Can a Computer Hear How You Feel? Seeing the emotion in IM and voice,"python, css, html5, javascript, flask, api, json",vickywang,"Wellesley College, Northeastern University, Rutgers, The State University of New Jersey",3,kevinjqliu267,zhung2,anshuru
Sleepover,http://yhack2017.devpost.com/submissions/84140-sleepover,"What it does

Allows a user to send out a request to their Facebook friends who live near their current location to get a room for the night. 

How we built it

Backend was developed in Node.js, frontend was mainly pure html, using some libraries, notably Bootstrap.

What we learned

How to make a web-app from start to (almost) finish.

What's next for Sleepover

Finish developing the app (unfortunately we didn't have time to finish writing the whole project over the weekend, but we plan to keep in touch and finish developing it over winter break.)
",,https://github.com/davistardif/y-hacks17,https://s3.amazonaws.com/challengepost/zip_files/production/28230/zip_files/y-hacks17.zip,"Facebook: Best use of a Facebook API or SDK, Rough Draft Ventures: Most Entrepreneurial Hack",node.js,davistardif,California Institute of Technology,0
Teacher's pet,http://yhack2017.devpost.com/submissions/84141-teacher-s-pet,"Inspired by the class

Bridges communication between teacher and students

Built a web application that sent Alexa questions regarding the current course

Alexa is hard to wok with

Did gud considering we changed subejcts midway through

Javascript

What's next for Teacher's pet, well... hehehe entering a classroom and beating all the other teacher's pets of course ;)
",,https://github.com/m47jiang/studentAlexa,,Google: Best Google Cloud Platform Hack,"amazon-web-services, html5, css3, javascript, natural-language-processing",m47jiang,University of Waterloo,1,GeoYS
Trendy,http://yhack2017.devpost.com/submissions/84142-trendy,"Inspiration

We met at the event- on the spot. We are a diverse team, from different parts of the world and different ages, with up to 7 years of difference! We believe that there is an important evolution towards using data technology to make investment decisions & data applications to move to designing new financial products and services we have not yet even considered.

What it does

Trendy analyzes over 300,000+ projects from Indiegogo, a crowd-funding website, for the last year. Trendy monitors and evaluates on average 20+ data points per company. Hence, we focus on 6 main variables and illustrate the use case based on statistical models. In order to keep the most user-friendly interface where we could still get as many info as possible, we have decided to create a chatbot on which the investor interacts with our platform.
The user may see graphs, trends analysis, and adjust his preferabilities accordingly.

Challenges we ran into

We have had a lot of trouble setting up the cloud to host everything. We also have had a lot of struggles in order to build a bot, due to many restrictions Facebook has set. The challenges kept us apart from innovating more on our product.

Accomplishments that we're proud of

We are very proud to have a very acute data analysis and a great interface. Our results are logical and we seem to have one of the best interfaces.

What we learned

We learnt a lot about cloud hosting, data management, and chatbot setup. More concretely, we have built ourselves a great platform to facilitate our financial wealth plan!

What's next for Trendy

We foresee adding a couple of predictive analytics concepts to our trend hacking platform, like random forests, Kelly criterion, and a couple of others. Moreover, we envisage empowering our database and analysis' accuracy by implementing some Machine Learning models.
",https://youtu.be/ZXaxPIRifcc,https://github.com/dougouk/YHacks2017,,"Informa: Best Hot Technology Predictor, Facebook: Best use of a Facebook API or SDK","node.js, python, jupyter, facebook-messenger, heroku",Jean-ChristophBtaiche,"Marianopolis College, University of Waterloo, University of Pennsylvania",2,dougouk,jthirani
Ticket Booking System,http://yhack2017.devpost.com/submissions/84143-ticket-booking-system,"Inspiration

Past experiences with other booking systems

What it does

Provides a better interface to buy flight tickets

How we built it

Java

Challenges we ran into

Check-in

Accomplishments that we're proud of

Attending our first hackathon

What we learned

Importance of sleep

What's next for Ticket Booking System

PennApps
",,https://github.com/nikikonforti/FlightTicket,https://s3.amazonaws.com/challengepost/zip_files/production/28231/zip_files/ticket.zip,"",java,ny2266,Columbia University in the City of New York,1,nfk2107
Quit Smoking Meow!,http://yhack2017.devpost.com/submissions/84144-quit-smoking-meow,"Inspiration

I'm personally allergic to secondhand smoke from cigarettes and hate it when I'm near secondhand smoke. A couple of my friends smoke on a daily basis and are addicted to cigarettes. They always mention they're broke, so I put two and two together and wanted to show my friends just how much money they're spending by smoking daily. The cats are because I think cats are cute and I think the flashiness of the website would make my webpage stick out in people's minds. 

What it does

Calculates how much money it costs to maintain a smoking habit and links to products that the user could've bought instead with that money.

How I built it

I used html and javascript to build the bulk of it and then added css and jquery to make things more fancy.

Challenges I ran into

I thought I could do everything just in html, but I was really intimidated when I realized that I'll have to learn multiple new languages to code this. I was also stuck on a certain problem for a very long time and only after talking with a friend of mine did I realize it was a limitation of the tool that I was using. 

Accomplishments that I'm proud of

It's my first hackathon that I participated in and this is the first ""real"" website that I've built from scratch. It took a lot of work and I know I was definitely stumbling over some very basic level stuff for hours, but I feel accomplished knowing that I made this. :D

What I learned

How to build a simple website. How to find solutions to coding problems on my own. 

What's next for Quit Smoking Meow!

I think there are reasons other than financial ones that make people want to quit smoking. I want to highlight those other reasons to smokers as well, so they have an even higher rate of success with their quitting. 
",,https://quit-smoking-meow.000webhostapp.com/,,"Rough Draft Ventures: Most Entrepreneurial Hack, Intuit: College Student Prosperity Case","html5, javascript, css, jquery",b596now,Northwestern University,0
Fake News Detector,http://yhack2017.devpost.com/submissions/84145-fake-news-detector,"Inspiration

In the current age of information characterized by the free flow of information, the quality of the information that is circulated has diminished. This is caused in part by the ease of access to a large audience via the Internet - where sharing opinions as fact has never been easier. While there are plenty of benefits to the Internet Era, this new paradigm requires a whole new set of tools to deal large amounts of information that have not been subject to ""quality control"" as in most traditional media. 

Technology has been tremendously successful in classification tasks in other domains and has become essential to filtering spam for example. However, the task of discriminating between real and fake news is extremely challenging from a technical standpoint and arguably an intractable problem given the current technological landscape and the state of research in NLP and ML. Therefore, designing a ""magic classifier"" that could perform as well as state-of-the-art spam filters to counter fake news seemed unrealistic.

That being said, we realized that the accuracy of the classifier for news ""sorting"" was only important if you were trying to draw an absolute line between fact and fiction. We think that addressing people's mentality when faced with information is the first step in truly mitigating the effects of fake news. For this reason, at the outset of this weekend, we were aiming to create an application that questioned news that seemed implausible rather than categorically stating that a given article was non-factual.

What it does

Our project is a Google Chrome extension that parses websites that you browse, while simultaneously querying the Bing Search API to develop a ""on-the-fly"" cluster that we could use as a ""ground truth"" metric. This was aimed to address the lack of external context of current language-based approaches to detect fake news. We then forwarded this cluster of articles on the same topic along with the target article to our server, where we used NLP and ML techniques to determine if the target article was likely to contain fake news or not. We highlighted salient sentences in the article and provided related searches in articles we considered to be ""at risk"" of being fake. This same sort of warning came when we detected strong bias or opinion in an article, regardless of whether it was positive or negative.

How we built it

The Google Chrome extension parsed the website you visit and passed on this information to the backend that performed detailed analysis on the text and the cluster of news articles.

We based this evaluation on 3 metrics:


We used a trigram language model along with a word frequency distribution to determine which sentences in the group of articles were the most salient. This allowed us to reduce the amount of noise that we had to deal with when making inferences. The algorithm we used was loosely based on the SUM-BASIC algorithm.
We them modelled these salient sentences using the pretrained word2vec embeddings (trained on Google News dataset of about 100M words). These word vectors allowed us to model semantic relationships between the articles. We compared the similar between the most salient sentences in the articles of the cluster - using their cosine similarity as a baseline. If the target article was significantly more dissimilar in relation with the difference observed within the cluster, we would expect the target article to likely contain non-factual or at least highly biased content.
To build on that last aspect, opinion in a news article that is not an editorial is often a good sign of ""fake news"". In order to increase the robustness of our analysis, we used Google's Natural Language API to do sentiment analysis on the target article. However, we were not as interested in whether the article was reflecting positive or negative sentiment, rather we cared whether the bias was strong, regardless of whether it was good or bad.


Combining these three metrics together, we would highlight the salient sentences that our algorithm suggested could be false and provided links to related articles. This follows the original idea of making people start to ask questions rather than simply classifying this as white and black. 

Given that the compute power required to do this sort of analysis was beyond the scope of ""normal"" server instances, we had to use a distributed system to host our extension. In other words, we had a server dedicated to the NLP analysis with the other to servicing the extension's requests.

Challenges we ran into

The large amount of latency that was associated with performing complex analysis on the text data meant that there was a long delay between the initial loading of a webpage and the results that were returned to the webpage.

The distributed system and the use of many different technologies created a heterogeneous system that was challenging to coordinate smoothly.

The heterogeneity of the internet made it difficult to standardize the web parsing - which then increased the difficulty of doing more advanced analysis by increasing the amount of noise.

Accomplishments that we're proud of

We think that the underlying premise behind creating an app that made the reader question rather than imposing a decision.

We integrated current and relevant ML and NLP techniques to perform inference on a difficult task.

We managed to coordinate an extremely heterogenous mix of technologies.

What we learned

Combining lots of technologies is not an easy task. It required a lot of less-than-optimal workarounds that while functional, are not robust and high-performing. Heterogeneity is difficult to deal with in tech!

What's next for Fake News Detector

Optimizing the speed of inference and increasing the complexity of the classification by using more advanced statistical models such as LSTMs, which require lots of time and effort to train and gather data.
",,,,"Poynter Fellowship: Best Hack to Counter Fake News, Google: Best Google Cloud Platform Hack","google-cloud, node.js, nltk, natural-language-processing, word2vec, bing-search-api, google-compute-engine, python, google-cloud-natural-language-api, express.js, ajax, distributed-system, chrome, machine-learning, scraping, parsing",mattscchan,McGill University,2,fanbeatsman,kevin-nam
GreatSearch,http://yhack2017.devpost.com/submissions/84146-greatsearch,"Inspiration

To inspire and encourage more people to give to/donate to/help out at charities

What it does

Generates a list of charities recommendations for users based on information collected from users' Facebook profiles. 

How we built it

HTML, CSS, Javascript, PHP, Facebook Javascript SDK

Challenges we ran into

Learning javascript/PHP, configuring Facebook Javascript SDK, attempting to build a back-end/database for our website; wifi was lagging and not working for us most of the time in the first ~12 hours of the Hackathon

Accomplishments that we're proud of

Building a website literally from scratch

What's next for GreatSearch

utilizes machine learning to generate and make recommendations of charities for users
",,http://greatsearch.x10host.com/,https://s3.amazonaws.com/challengepost/zip_files/production/28234/zip_files/GreatSearch.zip,Facebook: Best use of a Facebook API or SDK,"html, css, javascript, php",pikabelinda,"California Institute of Technology, Montgomery College, University of Maryland - College Park",2,zuritafd,djrolf815
WholesomeMash,http://yhack2017.devpost.com/submissions/84147-wholesomemash,"Inspiration

I was originally going to meet up with a bunch of team members, but found out late that they wouldn't be coming :(. So I decided to develop my fledgling Javascript skills and build a simple web app. Imagine FaceMash, but with the submissions from /r/wholesomememes! Reddit upvotes don't give that good of a relative weighting between posts that are temporally separated, so why not put them head to head?

What it does

The webpage puts two images from /r/wholesomememes from the last month, and the user selects which one they think is more wholesome. The user keeps doing so to their heart's desire, and this develops an internal ranking of memes based on Elo rating.

How I built it

The application was completely built locally with simple Node.js and Express functions, and very rudimentary JS DOM manipulation on the front end. As you can tell, I'm not much of a front end engineer, so everything looks really bad. The meme info was scraped off of reddit using the PRAW library for python.

Challenges I ran into

There were a lot of steps to learn for building and interfacing web apps. I'm glad the work I usually do doesn't really touch front end or web app design :^).

Accomplishments that I'm proud of

The Elo ranking works, surprisingly. You probably need a lot of episodes to get any variance at this point (all memes are weighted equally currently)

What I learned

Front end sucks, and you can get away with some really scaffold-y stuff with Javascript.
",,https://github.com/Veryku/WholesomeMash,,"","node.js, html5, javascript, reddit",patyang,"",0
StudentSave,http://yhack2017.devpost.com/submissions/84148-studentsave,"Inspiration

As students, we know what it's like to be on a tight budget and we want to help out others in a similar situation. 

What it does

StudentSave helps students share deals with each other.

How we built it

We used the Django framework.

Challenges we ran into

This was our first time using this framework and we ran into a lot of difficulties adding a ranking system.

Accomplishments that we're proud of

We are proud of integrating cloudflare to our website. 

What we learned

We learned how to create a abstract beautiful looking website.

What's next for StudentSave

We want to expand our website to include sections for different deals like real estate, recreation, and job opportunities. 
",,http://extrabowloframen.com,,"Cloudflare: Put Cloudflare in front of your hackathon project, make a Cloudflare App, Intuit: College Student Prosperity Case","python, javascript, cloudflare, html, css",RicardoRam,"University of Toronto, University of Waterloo",3,ntn,arriye_,chaitanyapeesapati
YhackProject,http://yhack2017.devpost.com/submissions/84149-yhackproject,"KANJOOS

The purpose of this project is to provide students a way to shop in a cheap and also convinient way.

Technology Used- Google Cloud API - Vision 

Implementation Report-
       -with the help of google cloud vision api we have transformed a receipt into text and then by crawling the text we have                     created a json file which will contain item and their price in a (key,value) format.
       - The file will also contain the address of the store.

Effect - Students can find the products they are looking for the cheapest price or the nearest store.

Created by: 
        Sougata Dafader (dafader.s@husky.neu.edu)

        Athul Karthik (muralidharan.a@husky.neu.edu)

        Zihan Liu (liu.zihan@husky.neu.edu)

        Mansi Kulkarni (kulkarni.man@husky.neu.edu)
",,https://github.com/sougatadafader/YhackProject,,"Rough Draft Ventures: Most Entrepreneurial Hack, Google: Best Google Cloud Platform Hack, Intuit: College Student Prosperity Case",javascript,sdafader,Northeastern University,2,edenliu,Mansi96
YackFront,http://yhack2017.devpost.com/submissions/84150-yackfront,"Our introduction and instructions are put on the home page of the site :)

Please take a moment to run the server and admire our results!

Do keep in mind that you can view the algorithm in the GitHub Repo!

It was hacked together by Andrew Mi, Bekah Agwunobi, Jerry Wang and Zhi Wei Gan.
",,https://github.com/pkqxdd/YackFront,,Informa: Best Hot Technology Predictor,"google-cloud, python, django, html5, css3",CaptainSkyVenom,"",1,jwang20
Class Connect,http://yhack2017.devpost.com/submissions/84151-class-connect,"Inspiration

We use moodle to get information about our classes, but it does not encourage peer and student-professor interactions. This app will make group projects, planning events, live class broadcasts, and many more things to become much easier for the student to manage.

What it does

So far, students can log in through their facebook account on the app, which will bring them through to their profile activity. There, they can access and see info about the classes that they are enrolled in. With more time, we would implement full databases for information about students, and classes. Classes can show the professor, and assignments for the students. The student database can show student name, email, and ID numbers. Lastly, we would allow for live broadcasting through Facebook live, for professors to broadcast classes from the app, and students could watch the class on the app as well. 

How we built it

We used android studio and implemented the facebook SDK to allow for facebook login access for the user. 

Challenges we ran into

Implementing the facebook login brought about many challenges, as we have limited experience with SDK implementation before. Also, accessing user data was a big challenge. 

Accomplishments that we're proud of

We are very proud of implementing the Facebook SDK on android studio. It was quite rewarding for us to log in to our own accounts. We also are proud of the icon that we created for the app.

What we learned

We learned much about app development, and how to access and implement various APIs and SDKs.

What's next for Class Connect

We would love to implement the live broadcast feature into this app. 
",,https://github.com/mvppjr/Class-Connect,https://s3.amazonaws.com/challengepost/zip_files/production/28235/zip_files/FinalYHack.zip,"Facebook: Best use of a Facebook API or SDK, Rough Draft Ventures: Most Entrepreneurial Hack","android-studio, facebook-login-api",mriley2,Connecticut College,1,mpintope
elDiff,http://yhack2017.devpost.com/submissions/84152-eldiff,"Inspiration

wanting to include elder coworkers in technological commodities to not have to focus our time on looking over files and manually filtering data

What it does

adapts the pattern of a file and sends an email with the most recent changes to the specified emails

How we built it

base: script in powershell to be further developed into a Desktop\Mobile app
Using Microsoft Docs on PowerShell

Challenges we ran into

had to log in to email every time the code ran, but created a authorization file that created a key 

Accomplishments that I'm proud of

inclusiveness in the workforce

What I learned

creating a solid scheduled platform requires stable WiFi

What's next for elDiff

developing this app and implementing in the workforce
",,,https://s3.amazonaws.com/challengepost/zip_files/production/28236/zip_files/elDiff.zip,"",powershell,lte2105,Barnard College,0
Villain be gone,http://yhack2017.devpost.com/submissions/84153-villain-be-gone,"Inspiration

Taking on Finra's Yhack 2017 challenge. 

What it does

Analysis of the Finra dataset, seeing what can be concluded regarding suspicious companies and barred brokers, and what connects them together. 

How we built it

Simple data alanytics, machine learning, and NLP are the main tools to infer information from the dataset. Visualization is done using Angular. 

What we learned

Connections come in all shapes and sizes, some more obvious than others. But with modern tools like machine learning and NLP in AI, new conclusions can be found on previously thought conclusive data. 
",,http://54.200.145.134/,https://s3.amazonaws.com/challengepost/zip_files/production/28237/zip_files/yhack2017_copy.zip,FINRA: Be a Hero - Use Data Analytics to Catch Financial Bad Guys!,"css, html, typescript, javascript, python",micklethepickle,"McGill University, ",3,silanhe,Edward-Son,LiTigre
Safe Travels,http://yhack2017.devpost.com/submissions/84154-safe-travels,"Inspiration

When I was speaking to a friend who is apart of the LGBTQ+ community, he told me about the process he goes through when planning a vacation. This includes searching for information on the country's policies and laws in regards to LGBTQ+ people, and whether or not he'll be safe in the area that he wants to stay in. When I got access to the JetBlue data, I knew that I wanted combine all the information that someone might want to know before traveling, or when planning a vacation. 

What it does

My program prompts the user to enter an origin airport, and the country that they would like to travel to. After they enter this information, all possible flights from the origin airport, to the airport(s) in that country are printed. Along with the flight information, the deal score, LGBTQ score, travel alerts, and necessary vaccinations are also printed.

How I built it

I built my program by reading in the JetBlue data as a .csv file, and extracting the needed information from the file, then using that information to create a ""Destination"" object. The LGBTQ score, travel alerts, and necessary vaccinations are taken from .txt files which I created using actual information I researched from various LGBTQ ally websites, and the State Department.

Challenges I ran into

It was challenging to translate the input of a country, into the output of multiple airports. It was also difficult to read in the JetBlue data, and translate it so that it would function in my program.

Accomplishments that I'm proud of

I have been to hackathons before, but I've always done front-end programs because that is what I am comfortable with, so this my first time submitting a back-end hack in a hackathon. Also I'm proud to have created this program because it addresses an actual issue and serves a great purpose.

What I learned

I learned how to read in .csv files, and how to directly implement data in my code without altering it.

What's next for Safe Travels

Next for Safe Travels would probably be using the data of other airlines and other methods of transportation (cruises) and a special version for travel within the states.
",,,https://s3.amazonaws.com/challengepost/zip_files/production/28240/zip_files/YHack.zip,"Best Civic Hack, JetBlue: Best Use of JetBlue Low Fares and Deals Data","java, csv, txt, eclipse",lavendar1013,SUNY Stony Brook,0
Golden-i,http://yhack2017.devpost.com/submissions/84155-golden-i,"Inspiration

""The future is here, it just isn't evenly distributed""

The best startups are started in garages, which aren't particularly known to be full of investors. On the other hand, the investor's challenge lies in finding these startups before they grow too large, and the question then becomes how to balance these two situations.

One the biggest challenges of our ever-growing world is the disconnect between investors and small startups that have valuable solutions. Because technology is such a crowded marketplace, it is very difficult to systematically find the companies that most direct solve the issues that are the most pertinent to society. Therefore, at a very high level, our piece of software seeks to bridge this gap, identifying society's needs and then using them to search for companies that are best suited to solve these issues. This in turns can serve to predict which companies are likely to be the most successful by seeing which are best equipped to tackle the modern market. 

In summary, we use cool tech to find cool tech. 

QuickBreakdown

Our software can be broken down into three main components: an web crawler that looks for issues, a web crawler that looks for solutions, and a final evaluation that joins the two.

The first web crawler trolls through social media posts in a given topic of interest, and uses the google natural language processing API to find complaints. The complaints are summarized down to keywords and sent over to a server which stores them into a database. When enough data has been collected, it is transformed into a massive graph and analyzed to find the most connected set of nodes, aka the topic of conversation. 

For the second system, a second webcrawler searches for companies that fit the conversation. It does this by filtering companies out of a search, and then identifying the ones that seem to solve the problem presented earlier on.

For the final system, the algorithm breaks down the top companies and breaks down their service and mission into a few key terms. Then, we use unsupervised learning to analyze the similarity between the content on the website and the initial search terms from the weighted graphs. The top companies are then presented in ranked order to the user for them to look further into for themselves. Links to these companies are then reposted on the same social media forums where we initially found these grievances, and their popularity is automatically analyzed to gauge how well people will latch on to their service. This serves to validate our results with the very people we are finding a solution for. 

Results

For the topic of ""bank"", the first webcrawler returned the key topics ""bank card"", ""investment"" and other similarly related terms. The second web-crawler took these keys and returned 13 unique links. Of these, 8 links were related to various banking services located in India. This seemed strange, but some research uncovered that the Indian banking system is currently experiencing a major cash shortage, marking a fantastic opportunity for innovative companies to capture market share. The other services found included Monese (an online banking service), Verifi (an eCommerce verification platform), Grameen (a Microfinance platform for people in low-income countries), the very classic fintech startup known as PayPal and NASDAQ, a major American stock exchange. 

What else?

While the software was designed to analyze technology trends, it was build in a modular fashion and has several powerful tools that can be repurposed. The first web crawler in particular was very good at analyzing cultural trends in various interests groups. For example, the main topic of discussion in BBC news Facebook headlines was mental health, while the main topic of discussion in the comments section was Brexit and the immigration crisis. 
",,https://github.com/Quinbit/Golden-i,,"Informa: Best Hot Technology Predictor, Facebook: Best use of a Facebook API or SDK, Rough Draft Ventures: Most Entrepreneurial Hack, Google: Best Google Cloud Platform Hack","python, machine-learning, natural-language-processing, node.js, unsupervised-learning, view, javascript, webcrawling, mongodb",verkhovskayaanna,"University of Waterloo, University of Toronto",3,corbin737,Quinbit,mcmorrischen
Nam's jetBlue Flight Price Tracker,http://yhack2017.devpost.com/submissions/84156-nam-s-jetblue-flight-price-tracker,"Inspiration

Nam's jetBlue Flight Price Tracker is the perfect website for users who want to regularly checkup on deals on flights in one easy and simple page. Other sites are often too hectic and messy, pushing users and potential customers away. It is usually by word of mouth or stroke of luck in social media content that users will be exposed to good flight deals. We wanted to facilitate information on to one easy and slick page where potential customers can see the lowest prices to various destinations at a glance.

What it does

Nam's jetBlue Flight Price Tracker is a niche website that displays flight ticket prices for various airport destinations from various airport origins as offered by jetBlue. The goal of the site is to keep users up to date with potential deals on cheap flight tickets and lead users straight to jetBlue's checkout page. Cards are shown for a given destination airport with a list of budget prices for a given date range. The prices in green indicate the cheapest flight tickets. Users can also scroll horizontally to view more prices (if there are).

How we built it

The web application was built using Node.js with the Express Framework. It utilizes the given data set to generate prices from origin to destination as offered by jetBlue. All pages are dynamically created with Hogan.js, alongside a dynamic URL, allowing users to search for flight deals from almost any jetBlue-supported origin flight. The page itself is fully responsive for both desktop, tablet and phone users. 

Challenges we ran into

The biggest challenges was dealing with the given data set. Designing the structure of the map to organize all our data was the key to succeeding in this project.

Accomplishments that we're proud of

The clean slick look of it and the clean slick backend map behind it. We even implemented when the International Space Station would be over a certain destination!

What we learned

An organized and thoughtful architecture is what makes or breaks an application. 

What's next for Nam's jetBlue Flight Price Tracker

Future iterations of the web application would include adding email subscriptions/notifications to deals, getting the most up to date flight information straight from the jetBlue API and including relevant hotel/lodging prices and deals to the desired destination. 
",,http://flights.kevinnam.me/jetblue/,,JetBlue: Best Use of JetBlue Low Fares and Deals Data,"node.js, javascript, express.js, digitalocean, namecheap, html5, less, from-scratch",kevin-nam,McGill University,1,fanbeatsman
Envision,http://yhack2017.devpost.com/submissions/84157-envision,"Inspiration

All three of us working on the project love traveling and want to fly to new places in the world on a budget. By combining Google computer vision to recognize interesting places to go as well as JetBlue's flight deals to find the best flights- we hope we've created a product that college students can use to explore the world!

What it does

Envision parses through each picture on websites the user is on and predicts a destination airport from the image given entities tracked through computer vision. It finds the best JetBlue flight deal based on current location, price, and similarity in destination and returns a hover over chrome extension best deal recommendation. It links to a website that shows more information about the flight, including flight type, fare type, etc, as well as pictures of the destination found through Google Places API. Envision travel effortlessly today! :))

How we built it

We build Envision using JetBlue's Deals data and the Google Cloud Platform- Google Vision API, Google Places API. First, we scraped images from Google Image Search of every JetBlue airport location. Running every image through Google Vision API, we received a list of entities that are found in the most common images. By creating a chrome extension to track images in every webpage, each picture is then translate through computer vision into an entity list, and that list is used to find the best location to recommend / most similar destination. Using JetBlue's Deals data, we found the best deal flight from the closest airport based on current location, and routed to our target airport destination, using Google Places API Place Nearby Search, Text Search, Place Details combined to find the most suitable flight to take. Using Heroku and Flask to host our web services, we created a workflow that leads to a React website with more information about the recommended flights and photos of the destination similar to that of the original images on the browsed website.

Challenges we ran into

There are many steps in our processing pipeline- which includes receiving images from the chrome extension, parsing the image to an entity list on Google Cloud Vision, finding a recommended location and the best JetBlue flight that leads to a region, as well as similar images from the area that links to the original image shown in a separate website. To connect every part together through endpoints took a lot of figuring out near the end!

Accomplishments that we're proud of

Creating a working product!

What we learned

Lots of web & API calling.

What's next for Envision

Creating a more user intuitive interface for Envision on the chrome extension as well as the website.
",https://youtu.be/7swqttVWWm8,https://github.com/joyhsu0504/yhack2017,,"Best Finance Hack, JetBlue: Best Use of JetBlue Low Fares and Deals Data, Rough Draft Ventures: Most Entrepreneurial Hack, Google: Best Google Cloud Platform Hack","google-vision, google-places, heroku, flask, web, python, javascript, html, google-app-engine, react, node.js, google-cloud",joyhsu,Stanford University,2,btroo,JasonZheng20
UMafia,http://yhack2017.devpost.com/submissions/84159-umafia,"Mafia

Mafia is a party game for a group of friends to get together and yell and lie at each other. It is incredibly fun, and I play all of the time with my friends and family. During the game of mafia, there are townspeople and mafia members, and each group seeks to kill off the other. The mafia are the informed minority: there are few of them (generally two), and the townspeople are the majority. The mafia know who is in the mafia, but the townspeople do not, so the goal of the game is for the townspeople to discover who is in the mafia. Because the game is played this way, there must be one person acting as the narrator, who tells the townspeople what the mafia do at night. This player does not participate in the game, and generally, every player in the game makes it more fun. Also, the mafia members and the townspeople must be chosen randomly, so playing cards or some other randomizer is required for the game.

UMafia comes to the rescue.

UMafia is a companion for the party game: it is meant to assist the game, rather than something like ""Town of Salem"", which is just a way to play the game online. UMafia is meant for people to sit around a living room or a campfire, and pull out their phones to vote and kill other players. UMafia takes the place of the narrator, meaning that an extra person can play, and it also randomizes the roles. It makes friendly mafia games much easier.

How I built it

UMafia is a website built with html, css, javascript and bootstrap. It should be compatible with mobile devices. I modeled UMafia after link,which is a different party game to be played in person. It is nearly 500 lines of code, made mostly from scratch, except for some bootstrap effects which I added at the last minute. The javascript creates an array pL (short for playerList), which holds playerdata, and role data. It randomizes roles, and keeps track of how many players remain. If the condition is met that all of the mafia players are dead, then the townspeople win, and if the condition is met that the amount of mafia players exceeds the amount of townspeople, then the mafia wins.
",,https://github.com/Benjreggio/UMafia,https://s3.amazonaws.com/challengepost/zip_files/production/28241/zip_files/UMafia_-_Copy.7z,Intuit: College Student Prosperity Case,"html, css, javascript, bootstrap",Benjreggio,University of Massachusetts Amherst,0
Sentonal,http://yhack2017.devpost.com/submissions/84160-sentonal,"Inspiration

Having faced many scenarios, especially while chatting with classmates over popular social media sites, we realized the deficiency of a single third-party source capable of presiding over matters where one's feelings may have been hurt.  Is it something that matters that could be considered a form of cyber-bullying?  Or was it simply the other individual taking some words a little too seriously?

What it does

When you write or copy a sentence into this tool, it gives you a simple readout (to ensure that it's easy for the user) that lets the user know whether the sentence was 'mean' or not.

How we built it

We used Python and Google APIs in the development of this software application.

Challenges we ran into

Some challenges we ran into came with the deployment of a Python application as a Google Chrome extension, but soon realized that users use various browsers (Firefox, Safari, etc) and it would be unwise to limit the use of this tool.  In addition, users could use this tool for essay-work, Facebook messages, and so much more.  So, we decided to create a stand-alone tool that gives such information quickly and efficiently (can be copied in from anywhere).

Accomplishments that we're proud of

We were able to create an application that people of all ages can use simply and efficiently across all platforms.

What we learned

We learnt a lot about using JSON data and integrating Google APIs with Python Scripts.

What's next for Sentonal

Some possible applications for future use can include creating a game out of this software application by making it more friendly and inviting to a younger audience to teach them the importance of using the right words and ensuring all parties are satisfied (generally, ensuring the younger generation is able to better recognize harsh words vs kind words).
",,https://github.com/aneeshsri/sentonal,,"Best Healthcare Hack, Best Education Hack, Google: Best Google Cloud Platform Hack, Intuit: College Student Prosperity Case","python, google",aneeshsridhar,University of Waterloo,2,kc3454,cwoozle
YME,http://yhack2017.devpost.com/submissions/84161-yme,"YME

Now this is a story all about how
My life got flipped turned upside down
And I'd like to take a minute, just sit right there
I'll tell you how YME helped you at the tech-fair

In the middle of YHacks, born and raised
On the playground is where I spent less than 2 days
Chillin' out, maxin', no sleep at all, cool
shootin' Angular injections outside of school**

Inspiration

In a world where personal branding can't be fully developed without an online platform, we have decided to take the pain out of building your own website in just a few clicks! Simply login with your Facebook account, and get ready to live your highlights using our clean and clear user interface. However, YME isn't limited to beginners! The application offers the option of exporting the HTML code generated from each unique website. This way, users can focus more on  brand creation rather than coding syntax.

What it does

YME takes relevant data on your Facebook account, including profile/cover pictures, education, work and  recently attended social events in order to construct a clean, complete yet simple way to market oneself. And all this with one Facebook login. Offered is a beautiful front-end, gallery of most ""liked"" photos from the past year on Facebook, a short biography on hometowns, education, a map of recently attended social events, and finally, a contact form to directly email the user in question. And did we mention the option to export all the code in HTML for better customization?

How we built it

We built the application by using data retrieved through the Facebook API. The front-end was built in Angular and the back-end server was built in Node. The application also utilizes AWS Elastic Beanstalk for hosting the server and AWS S3 for serving the static pages of each users generated website. The callback functions (node framework) in dependent .js and .html files were required to generate an authentication token, and the amount of information retrievable using the Graph API sometimes limited our use cases, due to lack of permissions. In addition, we used the AngularJS framework, while the Google maps SDK documentation was written for JavaScript. Hence, binding AngularJS data to Javascript functions proved challenging. However, the decision to stick to AngularJS is justified by the use of Javascript only (no Typescript as in Angular2), and the fast development rate (for less than 2 days) of a single page dynamic WebApp that would take a lot longer due to component-based Angular2.

What's next for YME

More clean, beautiful frontend options available for the user. More functions to be implemented in the Google Maps component displaying ""My Recent Places"". If YME became a more work-networking oriented platform, we would create a visual component displaying one's closest network connections.
",,http://my-face-dev.us-east-1.elasticbeanstalk.com/,,Facebook: Best use of a Facebook API or SDK,"css, javascript, html, angular.js, node.js, facebook-login-api, facebook-graph, amazon-web-services, google-maps",the_yeman,"",2,johnwu10,tiffanywang
Ploos Mloos,http://yhack2017.devpost.com/submissions/84162-ploos-mloos,"Inspiration

After asking our peers about what they, fellow college students, needed most, we realized that it all came down to money, grades, and cheap tutoring. Thus, we sought out to create a hack that would combine these fields to give students the upmost opportunities in achieving success. 

What it does

The student user creates a profile by choosing their university, entering their name and email, and a weakness and strength. Their weakness would be the subject they need help in the most, and their strength would be what they would tutor their matching student with. The program matches the user with a student with opposite strengths and weaknesses so that both students exchange skills without any money involved! So, it is totally college-budget friendly, it allows for new student connections, and it creates opportunities for boosting grades. 

How we built it

We created a website using HTML and backend programs with PHP and MySQL. Our relational database is stored on Amazon Web Services.

Challenges we ran into

During the early stages of the challenge, we had difficulty executing our ideas. We didn't know which route to pick on creating the website, as we were primarily experienced in Java but wanted to consider other options. We experienced a large learning curve, as this was our first time using HTML and PHP. 

Accomplishments that we're proud of

We learned HTML and PHP in one day! In addition, we recovered quickly after changing from a Java-based website to our final plan. We also learned about the power of the Terminal and various other languages. It's safe to say that we've been inspired to learn more skills for the future!

What's next for Ploos Mloos

We plan on hosting Ploos Mloos on a server, and making it even more useful and accessible to students across the country! 
",,,https://s3.amazonaws.com/challengepost/zip_files/production/28242/zip_files/PLOOS_MLOOS_YHACK17_4.zip,"Best Education Hack, Rough Draft Ventures: Most Entrepreneurial Hack, Intuit: College Student Prosperity Case","html5, php5, css, mysql, amazon-web-services",IRGreenberg,SUNY Stony Brook,1,kamiledemir
wheather,http://yhack2017.devpost.com/submissions/84163-wheather,"Inspiration

We wanted to make something that takes the guesswork out of getting ready in the morning. Specifically, we often struggle to decide whether 50F means sweater weather or a winter coat. Wheather helps make this decision for us!
(Wheather is a portmanteau of weather and whether - helping us decide whether we should wear a coat!)

What it does

Wheather will send users daily text messages telling them what they should wear based on the weather in their area.

How we built it

We used React.js for the front-end and Flask for the back end. We also connected to the DarkSky weather API for weather data and Twilio to send text messages to users.

NOTE: Because we're using a free trial of Twilio, phone numbers need to be verified by hand before they can be used with Wheather.
",,http://moonlit-creek-187814.appspot.com/,,"Google: Best Google Cloud Platform Hack, Intuit: College Student Prosperity Case","python, flask, react, javascript, npm, css, html, google-app-engine",shawnaness,"Brown University, California Institute of Technology",2,hlo323,Wingfril
WikiMap,http://yhack2017.devpost.com/submissions/84164-wikimap,"What it does

WikiMap allows a user to search for any topic and creates a list of prerequisites needed to understand that topic.

How I built it

We used a Python script to scrape the Wikipedia page, the Wikipedia API to identify the relevant sites given a search query, Google Firebase to store that data, Flask to host the backend, and Javascript to create the frontend web application.
",,,,"Rough Draft Ventures: Most Entrepreneurial Hack, Best Education Hack, Google: Best Google Cloud Platform Hack","flask, python, javascript",GlennRen,"",0
Hank: Your health insurance advisor,http://yhack2017.devpost.com/submissions/84165-hank-your-health-insurance-advisor,"Inspiration

We were inspired to build Hank after reading the sponsor contests and seeing that Vitech was running what we thought was a super challenging problem. We built Hank as a proof-of-concept to show that much of the advice sought from insurance professionals can be accurately generated by a finely tuned model. Considering our interest in machine learning and data visualization, the project seemed like the perfect fit. In the case of Hank, we aimed to generate plan suggestions and prices for a user through a simple survey. We believe a page like this could live on an insurance company's website and provide users with accurate quotes based off a machine learning model the company is able to tweak in real time. 

What it does

Hank provides a broad set of functionality that helps save time and money for both the clients and the life insurance providers.

For clients looking to purchase health insurance, Hank provides an easy introduction to the process with a simple and friendly application that guides the client through a series of questions to gather information such as age, family status, and personal health. With this information, Hank provides an accurate quote for each of the four insurance plans, as well as making a recommendation for which plan is likely the best for them.

Hank also provides an insurance provider facing visualization that allows for the life insurance provider to tweak Hank's suggestions based on business metrics such as life time value (LTV), customer satisfaction, and customer retention, all without re-training the two machine learning models that Hank uses to provide suggestions.

How we built it

Hank's suggestion system is composed of three modules that work in series to provide the most accurate and useful data to the user.

The first module, the premium estimator, uses the gathered user demographic data to determine what the premiums for each of the four plans (bronze, silver, gold, platinum) would be. This is done with a neural network trained using tensor flow on the insurance data set provided by Vitech for this competition. Using a neural network for a mixture of continuous and discrete data allows Hank to make complex associations between user features and make accurate premium predictions.

The second module is the suggestion module. The suggestion module uses the premium pricing predicted by the premium estimator module as well as the user's demographic data to suggest which of the four plans would be the most suited to them. Because of many-dimensional nature of the data set as well as the fact that there were so many data points to use, a kth-nearest neighbor training model was applied using scipy.

The third module, the business module, is an exciting module that provides value to the life insurance provider by giving fine control over the suggestions that Hank makes to customers using simple metrics. The business module works by combining information from the first and second modules, as well as data from the World Population API to provide a data set that can be modified using simple scaling factors. Using the data-visualization front-end of this module allows the life insurance provider to tweak Hank's suggestions to better align with business goals. This would normally be a very time consuming process as the machine learning that Hank uses to make decisions would have to be re-trained and re-validated, but with the business module, the key components are pre-abstracted away from the machine learning implementation.

Challenges we ran into

Our first hurdle for Hank was downloading the dataset provided by Vitech. At 1.4m records, it was a difficult task to retrieve and store, especially on a limited connection. 

Once our data was successfully scraped, our next challenge was deciding on an appropriate model to use for the machine learning aspect of the project. Many options were tried and discarded, namely Bayseian classification, support vector machines, and random forest classification. By continuously training and testing different models, we ultimately decided on two - a nearest neighbour simulation and a neural network.

Accomplishments that we're proud of

We're happy to say that we managed to deliver on what we thought would be our two biggest challenges - a pleasing and responsive UI and a meaningful data visualization. 

We're especially proud of the business logic control panel which is used to modify and visualize the different goals a company wishes to optimize for. 

What we learned

This project was a chance for us to learn about machine learning as well as test our ability to put ourselves in the shoes of both our client as a software developer and the users of the application, to provide special features to both. The time constraints provided by the hackathon also taught us to manage our time and communicate well - as a team of two people tackling such an ambitious project, constant communication was a must.

What's next for Hank: Your health insurance advisor

The next step for Hank is to train it against a larger, more diverse dataset and further optimize our models. Once we've trained our model against another set, we'll also be able to add additional steps to the survey, giving us more information to query with. The ultimate goal for Hank would be to host it live on an insurance company's site and see it used by real people and trained with real data.
",,,https://s3.amazonaws.com/challengepost/zip_files/production/28247/zip_files/Hank-submission.zip,"Best Finance Hack, Vitech: Life Insurance Quoting Challenge","tensor-flow, scipy, react, python, d3.js",savas,"",1,joe_crozier
The Root,http://yhack2017.devpost.com/submissions/84166-the-root,"Inspiration

Scrolling through a Facebook feed, you find countless articles written by big-name papers and third party sources that feed readers fake or biased news. The goal of this project was to counteract that by getting rid of the big names all together. The Root is a platform where users can get real-time news articles from local news sources only. If something happens in a region, readers can stay informed by reading the papers of that region; no third party commentary, no big-name news. And all while giving struggling local newspapers a larger platform.

What it does

The Root is an interactive map with markers for various cities across America. When you click on a city's marker, you get access to that city's local news feed. You can read about how New Yorkers feel about their President's latest announcement and then hop over to the other side of the country to read the perspective of an Arizonian. 

How we built it

We used Flask as our main webapp framework and coded in python. To generate the images of the maps, pointers, and popups, we used an API called Mapbox, and we used JavaScript, HTML, and CSS for that. Our JavaScript file places all of the pointers on certain regions and retrieves information from news rss feeds to display and update local news. We used an rss widget creator to generate the popups. Our CSS file adds some of the display features, and our HTML file links the JavaScript file to our main python file.

Challenges we ran into

We didn't have much experience before coming to this hackathon so every step was a challenge for us. The biggest challenge was probably starting our project and trying to head in the right direction--we had plenty of ideas in mind, but didn't know how we could implement any of it. We knew enough to know what we were looking for, but not enough to actually implement it. Talking to other hackers and mentors, researching, and testing out all of our possible solutions was time consuming but rewarding.

Accomplishments that we're proud of

As we previously mentioned, none of us had been to hackathon or built a website/app before, so everything we learned this weekend was completely new to us. We are most proud of how much we were able to learn in a short amount of time and being able to collaborate on a project that resulted in something real and useful.

What we learned

In terms of technical skills, we learned a lot. None of us came in with knowledge of html, css, or javascript, but we managed to use all three, we learned how to use an api, we learned how to create a web application, and we learned how to put all those pieces together (which is really daunting if you've never done it before!). However, our most valuable lesson wasn't at all a technical skill -- it was the realization that we were able to learn a lot in a short period of time. It's easy to think that you're not qualified for this field, especially given the qualifications of those around you, but we learned this weekend that we know more than we think we do, and we're capable of learning on the job. 

What's next for The Root

Because of the nature of the hackathon, we didn't get to make the program as dynamic as we had hoped. As of right now, there are only feeds for a few cities on the east coast and one on the west, but we'd like to expand this so that local news from across the country is presented on the platform, and hopefully we can do this globally with the help of a few translation API's we found. Ideally, we want to be able to filter the news sources so that we get only the most important headlines. We'd also like to add a Trending Now feature that would allow you to see the new articles that are gaining traction in the news currently. We hope this feature could provide more direction to users. We'd like to make some modifications to improve user experience, and all in all we'd like this to be a resource that can be attached to a Facebook page so that people can get access to accurate news sources. 
",,http://the-root.000webhostapp.com/?dir=././,,Poynter Fellowship: Best Hack to Counter Fake News,"javascript, html, css, mapbox, google-news, rss, flask",joybestourous,Brown University,3,angel_cheung,lucy_wolff,milla_shin
RGB Memory game,http://yhack2017.devpost.com/submissions/84167-rgb-memory-game,"Inspiration

Make me better at web dev

What it does

Detects wrong/right answers

How we built it

HTML/CSS/JS/Boostrap

Challenges we ran into

Accomplishments that we're proud of

What we learned

What's next for RGB Memory game
",,,https://s3.amazonaws.com/challengepost/zip_files/production/28243/zip_files/yhack.zip,"","",MoizQ,McMaster University,2,Imax,rafwerfalli
Converge,http://yhack2017.devpost.com/submissions/84168-converge,"Inspiration

Converge was initially designed to improve the social and work productivity of people who often find themselves involved in group activities, particularly like college students.

What it does

Given the address of every person in a group and a type of meeting location, Converge will find a meeting spot that minimizes the total distance that each group member has to travel to meet up with their group, and it finds venues local to that particular spot that would suit the group. If a group of college students living wanted to study, they might put in a few dorm building names and choose the library category to find the most convenient library to meet at. Converge also links directly to uber to allow a member to order in a ride to the location.

How I built it

Web application tools, including Python/Flask, JavaScript, HTML, and CSS, as well as the Google Maps API and JQuery.

Challenges I ran into

Properly setting up the Maps API

Accomplishments that I'm proud of

Having a product that works almost exactly as we initially envisioned it to. 

What I learned

How to build practical web applications using Flask.

What's next for Converge

Mobile app, improved UI.
",,https://github.com/KevinTXY/Converge,,"Google: Best Google Cloud Platform Hack, Intuit: College Student Prosperity Case","html, javascript, python, css",KevinTXY,Purdue University,0
MuseBot,http://yhack2017.devpost.com/submissions/84169-musebot,"Inspiration

came after several hours of not really knowing what to do at our first hackathon.

Challenges we ran into

We had hoped to implement ELIZA or a simple ELIZA clone, but we couldn't figure out how to use the Discord API to hold a conversation with a bot.

Accomplishments that we're proud of

Making something (semi)functional!
",,https://github.com/ar-nomad/MuseBot,,"","java, discord4j, sdcf4j, discord, datamuse-api",aidanrussell,SUNY Stony Brook,2,atharvakadam,tanyasengupta
Search a word in webpage,http://yhack2017.devpost.com/submissions/84170-search-a-word-in-webpage,"Inspiration

As a beginner in computer science, I wanted to learn about working with text files as well as doing something with websites. 

What it does

It has not been 100% completed but it is supposed to tell the user if a word is in a webpage. 

How I built it

Challenges I ran into

The whole language was tough for me. Also I had to learn to use an IDE which was hard at first. 

Accomplishments that I'm proud of

Even though my program does not work, I survived my first hackathon! 

What I learned

I learned about the different syntax regarding Python which I was unfamiliar with. 

What's next

I hope to make bigger projects as I take computer science courses next year and learn about the things I can do with it. 
",,,https://s3.amazonaws.com/challengepost/zip_files/production/28244/zip_files/test.zip,"","",SamW18,Harvard University,0
AR Navigator,http://yhack2017.devpost.com/submissions/84171-ar-navigator,"Inspiration

Walking directions have generally forced people to have their heads down on their phones, stressed over finding directions, and unable to enjoy the present. When you're traveling, this can be especially frustrating when you're in a new city with a whole different system trying to walk from point A to point B. 

What it does

AR Navigator displays turn-by-turn navigational instructions through the use of AR. Your phone acts as a camera portal to the world, and augmented reality directions are displayed as you walk.

How we built it

We used Swift and Apple's ARKit to create an iOS app!

Challenges we ran into

Lots of poor documentation, especially on ARKit since it's such a new technology. Swift also had some spicy errors that made us sad for more than a few hours.

Accomplishments that we're proud of

We're super happy about how much we learned about Swift, iOS, and AR through this process! Literally, neither of us have had any experience with any of these technologies, and we wanted to have an excuse to explore them.

What's next for AR Navigator

This is a proof of concept on the possibilities of future AR. We can imagine extending this app to display attractions, restaurants, and reviews of these places as you're walking by. We also think incorporating camera picture taking functionality in the app would help people multitask finding directions and sightseeing!
",https://vimeo.com/245594270,,,"Best Civic Hack, Stanley Black & Decker: Storage Solutions Augmented Reality, Rough Draft Ventures: Most Entrepreneurial Hack, Google: Best Google Cloud Platform Hack","ios, arkit, swift, google-maps",superangea,"",0
Chatitude,http://yhack2017.devpost.com/submissions/84172-chatitude,"Inspiration

We are very interested in the idea of making computer understand human’s feeling from Mirum challenge. We apply this idea on calling center where customer support can’t see customers’ faces via phone calls or messages. Enabling the analysis of the emotional tone of consumers can help customer support understand their need and solve problems more efficient. Business can immediately see the detailed emotional state of the customers from voice or text messages. 

What it does

The text from customers are colored based on their tone. Red stands for anger, white stands for joy.

How I built it

We utilize the iOS chat application from the Watson Developer Cloud Swift SDK to build this chat bot, and IBM Watson tone analyzer to examine the emotional tones, language tones, and social tones. 

Challenges I ran into

At the beginning, we had trouble running the app on iPhone. We spent a lot of time on debugging and testing. We also spent a lot of time on designing the graph of the analysis results.

Accomplishments that I'm proud of

We are proud to show that our chat bot supports tone analysis and basic chatting.

What I learned

We have learned and explored a few IBM Watson APIs. We also learned a lot while trouble shooting and fixing bugs. 

What's next for  Chattitude

Our future plan for Chattitude is to color the text by sentence and make the interface more engaging. For the tone analysis result, we want to improve by presenting the real time animated analysis result as histogram. 
",https://youtu.be/4pGUyzMsbHY,https://github.com/trpham/Chattitude,,"Mirum and JWT: Can a Computer Hear How You Feel? Seeing the emotion in IM and voice, Best Civic Hack, JPMorgan Chase: Finance of the Future, Rough Draft Ventures: Most Entrepreneurial Hack, Best Education Hack","ibm-watson, bluemix, xcode, swift, text-to-speech, speech-to-text, tone-analyzer, adobe-illustrator",ChristineGuominZheng,University of California - Berkeley,3,nikyarora,trpham,mengkeding
Layterms,http://yhack2017.devpost.com/submissions/84174-layterms,"Inspiration

Privacy policies are supposed to enforce transparency so that users know how much of their data is being collected and how it will be used. But despite their public disclosure, most people don't read through ten-page-long legal documents and are consequently underinformed about what's happening to their data. With this chrome extension, we hope to enable users to see at a glance how their personal information is being used by a website or company.

What it does

True to its name, Layterms translates privacy policies into an accessible format so you can see at a glance what data the service collects. It cuts to the chase by presenting the results in a simple table format so you don't have to wade through dense paragraphs to find key information. Pages can be instantly condensed into a summary and compared against the privacy policies of popular websites to see how their data collection lines up with the norm.

How we built it

JavaScript, Python, Matlab, Google Cloud

Challenges we ran into

Machine learning was an important aspect of this project, and Google Cloud's Natural Language API was a difficult one to implement.

Accomplishments that we're proud of

Giving dozens of corporate privacy policies more pageviews than they ever dreamed possible.

What we learned

What's next for Layterms
",,,,"Informa: Best Hot Technology Predictor, Best Civic Hack, Rough Draft Ventures: Most Entrepreneurial Hack, Poynter Fellowship: Best Hack to Counter Fake News, Best Education Hack, Google: Best Google Cloud Platform Hack","google-cloud, natural-language-processing, flask, python, javascript, chrome",jxnding,"Rutgers, The State University of New Jersey, University of Rochester",3,mdni007,lajordan,swishx
Minecraft - POC,http://yhack2017.devpost.com/submissions/84175-minecraft-poc,"Inspiration

After playing Minecraft until 5am for the first time the weekend prior to YHack, I thought about building the basic features of Minecraft would be fun and challenging.

What it does

This is a single player game where the camera is controlled by WASD keys for planar movements and cursor for rotation.  When looking at a clickable object, the camera rotation is prevented (different from the actual game).  To ""mine"" the blocks, players must click on the block object multiple times until its ""health"" goes down (differs from actual game).  Particle Systems (mini blocks that fly out) are then launched out of the block for interaction feedback.  Once a block is ""mined,"" a compact version drops, floats, and rotates above the ground.

How I built it

Using material assets from Unity's Tanks! tutorial and the cube self-rotation concept from Roll-A-Ball tutorial, I was able to create animations with simple assets.

Challenges I ran into

This was my first time learning and using Particle Systems and customizing the produced particles.  Another challenge was the camera rotation using the cursor's position.  The most difficult challenge (that I could not solve) was making the Particle System output the same material as the cube it is attached to.  The goal was to be able to scale up the cubes with different materials without creating a separate particle system for each block type the map maker creates.  Further investigation is needed here.

Accomplishments that I'm proud of

Having the Particle System in the game really saved time and unnecessary loading of new objects.  It make made it look more like Minecraft which was a huge plus.  I am really proud of finally knowing how to move the camera based off of arrow key inputs.  Even though it the planar movement may be considered trivial, it was definitely a milestone in my books after many different Unity projects.

What I learned

I learned what is a Particle System and how to move/rotate the camera with arrow key inputs and cursor.

What's next for Minecraft - POC

Listing from highest priority to least:


Make cubes scalable
Add a weapon to simulate attacking
Collecting cubes and having a storage
Having a map maker (Bonus: environmental effects)
Crafting
Enemies

",,https://github.com/Ursula1207/YHack2017-Minecraft,https://s3.amazonaws.com/challengepost/zip_files/production/28245/zip_files/YHack2017-Minecraft-master.zip,"","unity, c#",Ursula1207,University of Waterloo,0
YInsurance™,http://yhack2017.devpost.com/submissions/84176-yinsurance,"Inspiration

Vitech's Life Insurance challenge appealed to our group's interest in learning about data mining and machine learning.

What it does

A user inputs information such as their age, gender, height, weight and medical conditions into the web form, which will return a recommended plan for the consumer. We also created a document that has graphs and statistics that are useful for the life insurance company to understand their customers' purchasing habits. 

How we built it

Using a Node.js application, we scraped Vitech's API to get data, which was parsed and stored in a CSV. This CSV was then imported into RStudio, where we used Generalized Boosted Regression (GBM) model to predict the insurance plan mostly likely to be purchased by a particular customer. The web form was built using Shiny, a web framework for R projects. 

Challenges we ran into


Getting the data from the API was a struggle due to the slow Internet speeds
Figuring out how to use RStudio and Shiny


Accomplishments that we're proud of


Learning how to do basic data mining and classification with RStudio
Brainstorming how to parse complex data for information that produced useful models


What we learned


Data mining and machine learning is hard
Need to think deeply about data and continuously iterate on new information to draw out insights

",,https://github.com/williamliu52/insurance-hack,https://s3.amazonaws.com/challengepost/zip_files/production/28291/zip_files/Submission2.zip,"Best Finance Hack, Vitech: Life Insurance Quoting Challenge","r, csv, javascript, node.js, shiny, excel, rstudio",williamliu52,"University of Waterloo, University of Southern California",2,johnwbkwon,kimyou1994
AppleTrak,http://yhack2017.devpost.com/submissions/84177-appletrak,"Inspiration

How often do you think about food? Think about the environmental impact of that food which we eat every day. Even a small impact multiplied over the course of many days becomes significant. We can purchase local produce to reduce the energy costs of transporting our food, but when local crops are out of season it becomes more difficult to tell which of the options at the grocery store has reached us with the least environmental impact. Produce is also often stored for extended durations to be made available when it is out of season. This storage leads to increased environmental costs due to energy being spent on temperature control and anti-ripening chemicals. Consumers should be aware of the implications of how far food travels and the processes used to keep it appetizing. 

What it does

Our plan is to create an accountable tracking system for food transport by having micro-controllers accompany shipments. The distance and time that it takes for food to travel from ""farm to fork"" will be stored in a publicly available blockchain. A consumer user interface will allow our program to interact and display a map of the various depots and distribution centers along the journey to the grocery store. 

How we built it

AppleTrack has three distinct components: the tracking hardware, the blockchain backend, and the consumer app frontend. The hardware used for tracking shipments are Particle Photon microcontrollers and DragonBoard embedded system. The small Photon runs on batteries as it travels alongside the food shipments as produce tags. The DragonBoards are static at shipment depots and send information about shipments to the blockchain database. After the depot systems search for available wifi devices, the MAC addresses found are compared to known MAC addresses for tag photons. Once the DragonBoard recognizes a tag photon on wifi, the shipment will be at the depot, so the DragonBoard will then upload this information to the blockchain. The backend was built in JavaScript and utilizes the BigchainDB framework, which is based on MongoDB. Bigchain is decentralized, and is more secure when nodes are operated by a diverse array of companies across a broad geographic and international area. These features make it an industry wide adoption of the blockchain for tracking shipments feasible. The database holds time, and location data about the shipments. The frontend was written in JavaScript making use of the React library. The positions of these checkpoints along the produce's journey is then displayed using the Google Maps API. The user will select which produce to search for and their location will be automatically used to query the database.

Challenges we ran into

One major challenge that we faced was implementing communication between the produce shipment tags and the depot controllers with the limited hardware that we had access to. Our team was more familiar with the raspberry pi than the DragonBoard, however we found ourselves without a functional OS for the pi, and the internet access situation precluded a fresh download of Raspbian. We were also challenged by the limitation of the Particle Photons to only communicate via wifi protocols.

Accomplishments that we're proud of

By the end of the hackathon the team was happy to produce a solution that enabled hardware to track shipments, and store that data to a blockchain database, which could then be referenced through the frontend user interface. The team was able to overcome obstacles faced in terms of things such as the poor state of wifi at the competition. We are also proud to have successfully used hardware that we were initially unsure of in addition to finding a solution to the challenge of communicating between our hardware devices using only wifi protocols.

What we learned

We learned a lot about implementing blockchain. We practiced getting the interactions between the front and backends of our JavaScript programs. We expanded our knowledge of bash. We learned to combine the various strengths and weaknesses of different team members to work efficiently.

What's next for AppleTrak

Connection between the shipment tags and depot controllers would likely be more efficient with bluetooth than wifi. If different hardware were to become available, communication about and between the produce tag and the depot controllers could be done directly, rather than requiring a MAC address lookup. Additionally there is plenty of room for improvement in the frontend. The query function is very limited and will only return one result.
",,,,"Best IoT Device Using a Qualcomm Device, MLH Best Domain Name registered with Domain.com, Best Healthcare Hack, Best Finance Hack, Rough Draft Ventures: Most Entrepreneurial Hack, Best Education Hack, Google: Best Google Cloud Platform Hack","react, redux, python, bash, dragonboard, express.js, node.js, particle-photon, bigchaindb",vhenri,queens university,2,timsun1,johnpolak
GrouPlane,http://yhack2017.devpost.com/submissions/84178-grouplane,"Inspiration

We were inspired by JetBlue's challenge to utilize their data in a new way and we realized that, while there are plenty of websites and phone applications that allow you to find the best flight deal, there is none that provide a way to easily plan the trip and items you will need with your friends and family.

What it does

GrouPlane allows users to create ""Rooms"" tied to their user account with each room representing an unique event, such as a flight from Toronto to Boston for a week. Within the room, users can select flight times, see the best flight deal, and plan out what they'll need to bring with them. Users can also share the room's unique ID with their friends who can then utilize this ID to join the created room, being able to see the flight plan and modify the needed items.

How we built it

GrouPlane was built utilizing Android Studio with Firebase, the Google Cloud Platform Authentication API, and JetBlue flight information. Within Android Studio, Java code and XML was utilized.

Challenges we ran into

The challenges we ran into was learning how to use Android Studio/GCP/Firebase, and having to overcome the slow Internet speed present at the event. In terms of Android Studio/GCP/Firebase, we were all either entirely new or very new to the environment and so had to learn how to access and utilize all the features available. The slow Internet speed was a challenge due to not only making it difficult to learn for the former tools, but, due to the online nature of the database, having long periods of time where we could not test our code due to having no way to connect to the database.

Accomplishments that we're proud of

We are proud of being able to finish the application despite the challenges. Not only were we able to overcome these challenges but we were able to build an application there functions to the full extent we intended while having an easy to use interface.

What we learned

We learned a lot about how to program Android applications and how to utilize the Google Cloud Platform, specifically Firebase and Google Authentication.

What's next for GrouPlane

GrouPlane has many possible avenues for expansion, in particular we would like to integrate GrouPlane with Airbnb, Hotel chains, and Amazon Alexa. In terms of Airbnb and hotel chains, we would utilize their APIs in order to pull information about hotel deals for the flight locations picked for users can plan out their entire trip within GrouPlane. With this integration, we would also expand GrouPlane to be able to inform everyone within the ""event room"" about how much the event will cost each person. We would also integrate Amazon Alexa with GrouPlane in order to provide users the ability to plane out their vacation entirely through the speech interface provided by Alexa rather than having to type on their phone.
",,,https://s3.amazonaws.com/challengepost/zip_files/production/28246/zip_files/YHacks_2017_Submit.zip,"JetBlue: Best Use of JetBlue Low Fares and Deals Data, Google: Best Google Cloud Platform Hack","android-studio, java, xml, firebase, google-client-authentication",Apomah,McMaster University,3,AndrewDeschenes,MattPo,aidanuchimaru
AirShare,http://yhack2017.devpost.com/submissions/84179-airshare,"Inspiration

The inspiration came about a year ago when I had to do some brainstorming for a senior project. Because of some legal technicalities, my professor recommended I did not work on this project. However, for a while this project has been in my mind. 

What it does

AirShare connects you to flyers anywhere in the world making sending and recieving packages faster than ever. 

How we built it

We split into two groups, primarily because it made it easier for us to work in small subset groups. Miguel and I worked together and Wendy and Josh worked together. We did not have previous knowledge of html so we used an online template to put together the general outline of the website. 

Challenges we ran into

All of us have only taken introductory courses to computer science so our previous knowledge was very limited. Unfortunately most of our time was spent learning different basic concepts.

Accomplishments that we're proud of

We are very proud of how much we learned! 

What we learned

We learned how to use GitHub, CSS, JavaScript and Bootstrap. 

What's next for AirShare

As we delve deeper into the CS field we hope that we can make a more technical version of the AirShare Webb App.
",,,,JetBlue: Best Use of JetBlue Low Fares and Deals Data,"html, javascript, css, bootstrap, github, html5",idc2117,"Columbia University in the City of New York, Massachusetts Institute of Technology",3,wenddyywang,Stroto,mvega0992
Truthify This,http://yhack2017.devpost.com/submissions/84182-truthify-this,"Inspiration

Social media in the modern day defines our relationships, what we do, and what we learn. With the ever-growing spread of fake news throughout social media, people are in danger of being manipulated at the whims of others without being aware of the fact. As a group of college freshman, we have all grown up in a social media-oriented world in which fake news has become the new norm. We decided to develop Truthify This in order to help people become more knowledgeable about what is fake news so that they can identify whether what they're reading is real or fake.  

What it does

Truthify This is a Python-based web app that takes an article link, Facebook image, or YouTube video and determines whether the link contains fake news.

How we built it

For articles, we extract the article from the page using the Goose API. For Facebook images, we retrieve the page's HTML and then parse the image link from it. With the image, we apply optical character recognition via the Tesserocr API to extract the image text. Lastly, for YouTube videos, we extract the audio from the video and then transcribe it to WAV using the PyDub API. Then, we use IBM Watson to transcribe the audio file into text.

Following these steps for articles, Facebook photos, and YouTube videos, we use the text file we have and apply natural language understanding via IBM Watson in order to determine the relevance, emotion, and sentiment of the key components of the text. Then, we go through the entirety of the results of the natural language understanding step to determine which key components of the text contain words that indicate that a claim is being made. If the claim contains a strong emotional bias (anger, joy, sadness, fear, or disgust) and is relevant to the overall text, then we check whether it's fake news.

To check if a claim is fake news, we send a query to IBM Watson Discovery News that determines the average sentimentality of the claim throughout the top 100 most relevant results of its 17+ million document dataset. We compare this against the sentiment of the claim in the context of the original text to determine the absolute sentiment differential, which if greater than a certain threshold indicates that the claim is likely fake news.

Challenges we ran into

We ran into trouble with front-end web development as our team had little exposure to modern design principles. However, we were able to get past this by developing a clear plan as to how we would improve our web development skills in a short time-period. The biggest benefit came from spending time learning Bootstrap as we were able to boot straight into developing a much stronger UI than we were initially capable of. Some of the members of our team have experience with front-end development and others have experience with back-end development, however, no one has full-stack experience. Thus, we had to spend a significant amount of time learning how to connect our back-end to our front-end. After looking through various possible solutions, we decided to spend time learning jQuery AJAX with our Python Flask web application in order to connect the two and resolve our issue.

On a different note, we also ran into trouble ensuring that our fact-checking was as unbiased as possible. We wanted to avoid using a similar solution to current fact-checking websites (such as http://www.fakenewsai.com/) that base their models off of the reputation of the website as a whole as we found that many websites, even commonly trusted websites, had fake news in some of their articles. We spent a significant amount of time developing a plan as to how we would base our fact-checking on general opinion rather than reputation. After exploring several APIs, we found the IBM Watson Discovery News API that allowed us to search through their database of articles. We decided to take the average semantic score of the top one-hundred articles for each relevant claim from an inputted link as we thought this would be the best way to get a sample of the general opinion surrounding that claim while keeping run-time manageable.

Accomplishments that we're proud of

We're proud of developing our programming, problem-solving, and team-work skills together. This is our first time working together and although we all had different levels of experience, we were all able to contribute meaningfully to the project and learn from the others on our team. This was three of our members first of many hackathons and we're all proud of what we've made working together and we'll hopefully all continue to improve in the future as we move on from our freshman year and learn more and more throughout our education together at Columbia.

What we learned

The most significant new experience was combining the front-end and back-end components of our product. Prior to this hackathon, none of us had the experience of full-stack development with each of us only having experience in either front-end or back-end, however, we had to come together and build off of each other's strengths in order to figure out how to combine the two.

What's next for Truthify This

In the future, we want to include the ability to upload links to a larger amount of social media networks as currently, we support text articles, Facebook posts, and YouTube videos. Also, we want to make a Chrome plug-in of Truthify This that will allow you to determine whether what you're reading, watching, or looking at contains fake news. We also want to add a page to our website that keeps track dynamically of the level of fake news that a news website publishes in order to keep a leaderboard of the most trustworthy news sources so that anyone who visits our site can find out what are the most trustworthy sources at that moment in time. With our fake news detection being based on the content of the website rather than its reputation, we hope that we can reduce the level of bias as much as possible. Furthermore, we believe that we can further reduce the bias by increasing the amount articles that we use to determine the semantic score of a claim as this will decrease potential bias among the top 100 articles that we currently use.
",,https://www.github.com/msigalov/yhack_run,,"Poynter Fellowship: Best Hack to Counter Fake News, Best Education Hack","python, flask, javascript, jquery, html5, css3, bluemix, ibm-watson, pafy, pydub, ffmpeg, goose, jinja, pil, tesserocr, bootstrap, ajax",awt2124,Columbia University in the City of New York,1,msigalov
Insight,http://yhack2017.devpost.com/submissions/84184-insight,"Inspiration

Insight - a custom business intelligence tool that discovers new and existing technologies as they progress through the market. Insight serves as an end-to-end solution for market discovery, quantitative analysis, predictive modeling, and expansion tracking.

What it does

Technology evolves rapidly. While many are struggling to keep up, others are looking for high yield investments in a fast-paced and dynamic market. We built Insight to not only identify promising new technologies, but also to filter and classify those that show the highest likelihood of being commercially successful in the future.

The platform consists of a data ingestion engine, an analytics and prediction layer, and a data visualization layer. For the ingestion engine , we dynamically retrieved data from sites such as The New York Times, The Guardian, Google News, NASDAQ, Crunchbase, CBInsights, and Twitter for news, finance, social media data to ensure a holistic model. We passed the information through different machine learning and mathematical models to grab sentiment for text articles and other pattern recognition analysis from the data we retrieved. We then computed a singular “commercial relevancy score” along with time-series tracking of our factors and displayed it on our dashboard.

Our goal with Insight was to generate actionable insights at all stages of the technology pipeline, from idea conception to long term maturity. This allows us to create a watchlist for infant technologies that show potential in the future and then track that through the early investment stages.

How we built it

In order to keep track of new and existing technologies, the first step was to gather data from various sources surrounding these technologies. These include news, social media, and information about startups and large companies using the technology. We gathered data around a few specific areas involving artificial intelligence in order to create a model to track their growth.

We used data around news and social media to see how much these topics were being talked about as well as the general sentiment of the public in order to get an idea of the demand of the market for certain technologies. Keeping this in mind, we additionally looked at startups using these technologies to ensure that the technology was not based solely around hype, and actually is emerging to be commercially successful.

We trained our model using the data we gathered to assign weights to the features of our model. Our model assigns a commercial relevancy score based on the various features (gathered from sources we listed above), so after training our model, we can validate against a new technology and get its commercial relevancy score.

To ensure that our model is correct, we decided to test it against a few technologies that are hot right now and are attracting a lot of investment. The two we choose were cryptocurrencies and blockchain. Our system returned a relevancy score of 40.13 for blockchain and 14.0 for cryptocurrencies. Although both had many articles written about them we believe the score discrepancy was due to the perceived positive benefits that the blockchain could bring to companies -- and the investments from large companies like GS and GOOGL into blockchain technology.

Challenges we ran into

Because the problem was very open ended, we took a while to hone a direction and prioritize our development efforts for this hackathon. In the end, we decided to reduce our search scope to widely available news sources 

Accomplishments that we're proud of

The time constraints severely limited the reach we originally wanted to have for the project but in the end, we were still able to link together quite a few data sources to generate a fairly robust model.

What we learned

What's next for Insight

More API Integrations
Dynamic Weight Effectiveness Tuning
Realtime Updating
arXiv as Source (we already have the data)
",,http://www.insightthefuture.com/,,"Informa: Best Hot Technology Predictor, Google: Best Google Cloud Platform Hack","google-cloud, tensor-flow, google-cloud-language, python, javascript, jquery, html/css",ThomasMChen,"Purdue University, University of Illinois at Urbana-Champaign",3,0x60,15tungalbert,brandon_chen
"Bring Your Own, PotLuck ",http://yhack2017.devpost.com/submissions/84186-bring-your-own-potluck,"Inspiration

College students host events all the time. Most are last minute because we're just here to have to good time as soon as we can, so we can get back to work. College students don't have the privilege of just funding an event alone. So we find friends to contribute and BRING THEIR OWN... cutlery, drinks, games, food and MANY MORE. But when people contribute different things that cost different values, how can they quickly figure out how to settle the money so they can maximise their time going wild and then going back to work.. 

What it does

Our app takes just a few clicks to settle all the transactions between the contributors electronically. All anyone has to do is input the Name and Amount paid for each contributor, and the app takes care of the rest.

How I built it

Java and Javafx. Using eclipse software for text-editing purposes. This java app is a draft and will be translated to Swift and XCode after the hackathon (To become iPhone and Andriod Apps).

Challenges I ran into

Bugs, many bugs, so many bugs

Accomplishments that I'm proud of

SURVIVING OUR FIRST HACKATHON

What I learned

What's next for Bring Your Own, PotLuck (See image gallery)

-iPhone App Platform
-Android App Platform


Automatic Transfers and Transactions through Venmo, PayPal and Bank Accounts
-GeoLocation for the location of the party 

",,https://github.com/snigsinha124/BYOP,https://s3.amazonaws.com/challengepost/zip_files/production/28250/zip_files/BYOP_presentation.pptx,"Best Finance Hack, Rough Draft Ventures: Most Entrepreneurial Hack, Intuit: College Student Prosperity Case",java,snigsinha,Brown University,2,rsrivas2,aristidesnicolas
TechCast,http://yhack2017.devpost.com/submissions/84188-techcast,"Inspiration

What it does

How we built it

Challenges we ran into

Accomplishments that we're proud of

What we learned

What's next for TechCast

here
",,,,"Informa: Best Hot Technology Predictor, Facebook: Best use of a Facebook API or SDK","",ProjectAlmanac,"University of Maryland - College Park, Pennsylvania State University",3,henryyc,rgangu,kzhou
RewardEd,http://yhack2017.devpost.com/submissions/84190-rewarded,"RewardEd

At some point in their life, everyone has felt discouraged from attending classes, especially those 8 am lectures. Though it feels great in the moment, skipping class has so many negative effects on college students, including decreased productivity and prosperity as a whole. 

RewardEd is a system that works to improve college engagement and motivate people to become better students. A user is able to input their schedule with the following information for each class: 


Class name
Day(s) of the week
Time the class is held
Location of the class 


Using GPS and Google Maps, the user is able to check into the class and our system will verify their location with their schedule. The student is able to earn points in the form of number of hours of classes attended. There will be a variety of rewards available for students, such as free food, a free month of Spotify premium, and other exclusive offers.  

We hope that multiple small rewards will encourage college students to be excited to attend classes!
",,,https://s3.amazonaws.com/challengepost/zip_files/production/28263/zip_files/RewardEd.pptx,"Best Education Hack, Intuit: College Student Prosperity Case",android-studio,anniemwu,"University of Western Ontario, University of Maryland - Baltimore County, Stanford University",2,agathaturya,thomashsieh64
WordToFont,http://yhack2017.devpost.com/submissions/84191-wordtofont,"Inspiration

The right font is hard to find, especially when you know little about typefaces and fonts.

What it does

This website crowd-sources adjectives and words to be associated with fonts.  In turn, users can search abstract words, moods, thoughts, or adjectives to find the right font.

How I built it

I used ruby-on-rails to maintain the backend and handled the front-end and UI with Javascript.

Challenges I ran into

Prior to this, I had hardly ever programmed in Javascript and I had never set up a rails server with API's.  So, the hardest part was just figuring out how to connect all the parts.

Accomplishments that I'm proud of

It works.  I just can't believe it works.

What I learned

I learned a much deeper understanding of how to develop ruby-on-rails applications and I got great experience in programming user experiences in html, css, and javascript.

What's next for WordToFont

I hope to significantly expand the database with many more word-font associations and many more fonts.  Then I hope to add some more complex algorithms to proactively label fonts.
",,https://github.com/NickAnthony/wordtofont,,"Google: Best Google Cloud Platform Hack, Intuit: College Student Prosperity Case","google-fonts, ruby-on-rails, javascript, css, html5, love",NickAnthony,Brown University,0
Intellisurance,http://yhack2017.devpost.com/submissions/84193-intellisurance,"Inspiration

This project was built to compete for the Vitech Insurance quoting challenge at YHack 2017. 

What it does

This program predicts and recommends the appropriate life insurance plan according to the person's profile and needs. While recommending the plan, the program also predicts the premium for each insurance category according to their risk factors and preconditions.

How I built it

The app is built for the Android platform and makes use of Google Maps API for users to look and visualize the general plan demographic which helps the end user in selecting the right plan. 
The user can make make their personal profile and is registered on the app using firebase authentication service.
To recommend the right plan we trained a random forest classifier and four random forest regressors to accurately predict the right plan class appropriate for them, and at the same time also assess the monthly premium.

Challenges I ran into

Training the model in a scalable manner. Handling 1.4 million rows from 3 tables is not an easy task.
Creating map visualizations for nearby areas in the region.
Handling Python 2 to 3 migrations and deprecated libraries.
Designing a smooth UI and UX.

Accomplishments that I'm proud of

Successfully importing all the data from the API and training 5 models on it.
Create a full user journey from authentication to plan recommendations within 36 hours.
Predicting the correct plan with 86% accuracy.

What I learned

Sleep is a myth.
Data overlays on map are not straightforward.
Predicting continuous data is not as straight forward as categorical data.
",,https://github.com/Leniox/ViteckChallenge,,"Best Finance Hack, Vitech: Life Insurance Quoting Challenge, Rough Draft Ventures: Most Entrepreneurial Hack, Google: Best Google Cloud Platform Hack","android-studio, python, machine-learning, firebase, google-maps, scikit-learn, particle",glath,"University of Waterloo, George Mason University",3,AkshatShukla,eshoulde,GregoryAronson
TrendE,http://yhack2017.devpost.com/submissions/84194-trende,"Inspiration

Our inspiration was our passion for the business side of technology; where will future technology bring us? How can we look at previous trends to predict future ones? The TrendE team knows the importance of good technology, which we start now.

What it does

The algorithm takes any input (technology, tech business trend, product, etc.) and suggests 5 of the statistically most accurate relative trends to the input, accompanied by the percentage of which they are the hottest trend in the market.

How we built it

We began developing the core algorithm by stripping useful keywords from the target's Wikipedia page. These keywords were then searched again on Wikipedia, where their forecast information was acquired and ranked based on its community-wide relevancy and frequency of edits. 

Challenges we ran into

A major challenge was understanding the HTML breakdown of Wikipedia and acquiring exactly the most relevant keywords to the target, hereby stripping the junk. Another challenge was determining a scoring system for each trend and comparing them.

Accomplishments that we're proud of

Getting used to APIs (unfortunately we were API n00bs coming into YHack!), as well as getting the front-end progress bar (this was actually tricky).

What we learned

Pinging the internet for data can be a hassle, especially with 1000+ people using the same connection!

What's next for TrendE

The implementation of social media data to strengthen the algorithm's confidence in its top 5 relevant results
",,,https://s3.amazonaws.com/challengepost/zip_files/production/28251/zip_files/TrendE.zip,Informa: Best Hot Technology Predictor,"python, tkinter, wikipedia, beautiful-soup, urllib, threading",chrisgoel,Queen's,0
Word Counselor,http://yhack2017.devpost.com/submissions/84195-word-counselor,"Inspiration

We wanted to make a project that used a library for analyzing emotions because we thought that it would be an interesting thing to dabble with. We believe that the existence of a service that provides linguistic assistance to non-native speakers may be useful.

What it does

Word Counselor assists with determining the emotional impact of words or phrases in a body of text to show the user possible subjective connotation of his or her writing.

How I built it

We used Indico's API by passing in string values and getting back JSON packets, which we managed with Ajax requests in our Javascript backend code of the website. In addition to traditional Javascript, we also made use of JQuery calls in our code.

Challenges I ran into

We had some troubles with the design and implementation of the UI as well as the parsing and returning of data from the API that we used. 

Accomplishments that I'm proud of

We made a website that does something yay nice wow.

What I learned

Our team primarily learned a lot about web development and Javascript programming, as well as JQuery and Ajax.

What's next for Word Counselor

Add a feature that scans the entire body of words, highlighting potential negatory and giving recommendations for each highlighted word.
",,https://shuyangw.github.io/Word-Counselor/,https://s3.amazonaws.com/challengepost/zip_files/production/28252/zip_files/yhack.rar,"Mirum and JWT: Can a Computer Hear How You Feel? Seeing the emotion in IM and voice, Best Education Hack","javascript, jquery, html, css, ajax, json, indico, wordsapi",ShwangCat,University of Massachusetts Amherst,3,justlee97,Opang,qtran09
FakeNewsDetector,http://yhack2017.devpost.com/submissions/84196-fakenewsdetector,"What it does

This google chrome extension checks if an online article has traces that might indicate it is a fake news.

How we built it

We coded the majority of our logic in python, using a large dataset and cosine similarity to find intersections among different articles. We then coded the extension using javascript that connects the article to the python code that runs locally. The little notification window was written in Java. 

Challenges we ran into

The first challenge was finding the right calculation method to use. We decided to use cosine similarity, thanks to Hyunjoon's great idea, and adapted it to fit our purpose.

Another difficulty of coding this was using a language that we have never used before: Javascript. Xinyue and Bu Geun did this part: using Javascript to make an extension. 

Accomplishments that we're proud of

We ran different test cases, using actual articles that we have found on various websites, such as New York Times, National Geographic, Fox News, and Politico. Although our test script achieved only 60% accuracy, we were able to distinguish most of the fake news when field testing with the extension.

What we learned

We learned how to make a Chrome extension. We learned that combining different programming languages is difficult, but possible and sometimes necessary. We've also learned the limits of computers in the fields of text analysis. Lastly, we learned the amazing things we can do by combining software engineering with data science. 

What's next for FakeNewsDetector

We have a few bugs to fix. We also have to increase the accuracy of our detector. We can also improve GUI.
",https://youtu.be/z7VvtMvK2wc,,https://s3.amazonaws.com/challengepost/zip_files/production/28261/zip_files/fakeNewsChromeFinal.zip,"Best Civic Hack, Poynter Fellowship: Best Hack to Counter Fake News","python, java, javascript, api, data-science",bu_geun_cho,Brown University,2,hyun_joon_lee,xinyue_qian
Vitech Insurance Data Processing and Analysis,http://yhack2017.devpost.com/submissions/84197-vitech-insurance-data-processing-and-analysis,"Inspiration

When we first read Vitech's challenge for processing and visualizing their data, we were collectively inspired to explore a paradigm of programming that very few of us had any experience with, machine learning. With that in mind, the sentiment of the challenge themed around health care established relevant and impactful implications for the outcome of our project. We believe that using machine learning and data science to improve the customer experience of people in the market for insurance plans, would not only result in a more profitable model for insurance companies but improve the lives of the countless people who struggle to choose the best insurance plans for themselves at the right costs.

What it does

Our scripts are built to parse, process, and format the data provided by Vitech's live V3 API database. The data is initially filtered using Solr queries and then formatted into a more adaptable comma-separated variable (CSV) file. This data is then processed by a different script through several machine learning algorithms in order to extract meaningful data about the relationship between an individual's personal details and the plan that they are most likely to choose. Additionally, we have provided visualizations created in R that helped us interpret the many data points more effectively.

How we built it

We initially explored all of the ideas that we had regarding how exactly we planned to process the data and proceeded to pick Python as a suitable language and interface in which we believed that we could accomplish all of our goals. The first step was parsing and formatting data after which we began observing it through the visualization tools provided by R. Once we had a rough idea about how our data is distributed, we continued by making models using the h2o Python library in order to model our data.

Challenges we ran into

Since none of us had much experience with machine learning prior to this project, we dived into many software tools we had never even seen before. Furthermore, the data provided by Vitech had many variables to track, so our deficiency in understanding of the insurance market truly slowed down our progress in making better models for our data.

Accomplishments that we're proud of

We are very proud that we got as far as we did even though out product is not finalized. Going into this initially, we did not know how much we could learn and accomplish and yet we managed to implement fairly complex tools for analyzing and processing data. We have learned greatly from the entire experience as a team and are now inspired to continue exploring data science and the power of data science tools.

What we learned

We have learned a lot about the nuances of processing and working with big data and about what software tools are available to us for future use.

What's next for Vitech Insurance Data Processing and Analysis

We hope to further improve our modeling to get more meaningful and applicable results. The next barrier to overcome is definitely related to our lack of field expertise in the realm of the insurance market which would further allow us to make more accurate and representative models of the data.
",,,https://s3.amazonaws.com/challengepost/zip_files/production/28254/zip_files/Vitech_Insurance.zip,"Best Healthcare Hack, Vitech: Life Insurance Quoting Challenge","python, r",petar_peshev,"",0
sentiMeant,http://yhack2017.devpost.com/submissions/84198-sentimeant,"What sentiMeant Does

Think of sentiMeant as your emotional spellchecker.  We take your text and processit on our AWS server using IBM's emotional analysis API, and let you know how you're coming across.  Processing a conversation, we color-code the text of each statement based on its strongest emotion.  Want to see the progression of emotion throughout the conversation?  Click our popup window after your chat finishes processing on our server for more details.

Uses

Messaging someone in another country?  Trying to avoid sounding passive-aggressive before you click send on that email?  Want to know what undertones a person has underlying their text?  All completely possible right now with our fully-functioning web app.
For children with Aspergers who have difficulty reading and perceiving emotions and social cues, sentiMeant is a way of helping them learn unwritten rules is by giving them a bit of a nudge in knowing what emotion a sentence or person is trying to convey.

Our Facebook Messenger Add-on

Know how a message sounds before you send it, by using our chatbot to get an emoji describing your message.  The emojis have been coded for various combinations of emotions.
",,https://github.com/jragu/sentiMeant,,"Mirum and JWT: Can a Computer Hear How You Feel? Seeing the emotion in IM and voice, Best Healthcare Hack, Rough Draft Ventures: Most Entrepreneurial Hack, Facebook: Best use of a Facebook API or SDK, Best Education Hack, Intuit: College Student Prosperity Case, Best Use of Amazon Web Services","python, html, css",kristenarms,"Northern Illinois University, University of California - Los Angeles",2,jragu,xingxu21
Best Local Flight Deals,http://yhack2017.devpost.com/submissions/84200-best-local-flight-deals,"Inspiration

Help people quickly find the cheapest flight out of town for on anyday

What it does

Shows pictures of things people have posted from the airport area and displays the price of the ticket on that day that is the cheapest, users can click get pictures again for the next cheapest tickets

How we built it

instagram api + jetblue data set

Challenges we ran into

instagram api doesnt always find any or many pictures for some reason

Accomplishments that we're proud of

getting the next lowest flight ticket data to easily be shown

What we learned

swift programming and working with large data sets

What's next for Best Local Flight Deals

less lag and a smoother experience 
",,https://github.com/Ahstromed/Swift,https://s3.amazonaws.com/challengepost/zip_files/production/28256/zip_files/YHacks.zip,"Facebook: Best use of a Facebook API or SDK, JetBlue: Best Use of JetBlue Low Fares and Deals Data, Intuit: College Student Prosperity Case","instagram-api, jetblue-dataset, swift",ahmedqureshi,"University of California - Los Angeles, University of Southern California",0
Unit-Conversion,http://yhack2017.devpost.com/submissions/84201-unit-conversion,"Unit-Conversion

Converts temperatures and distances, gui with four textfields to input and output, clear function. Robust against invalid inputs.
",,https://github.com/brian-hane/Unit-Conversion,https://s3.amazonaws.com/challengepost/zip_files/production/28257/zip_files/convertUnits.java,Best Civic Hack,java,brian-hane,"",0
How to LifeInsurance: FinancialLiteracy for Millenials,http://yhack2017.devpost.com/submissions/84203-how-to-lifeinsurance-financialliteracy-for-millenials,"Inspiration

I'm almost an adult! I still have a poor grasp about financial literacy, despite knowing so much about tons of other spaces. I don't know how to do my taxes, I don't know about health insurance, and I definitely don't know about life insurance. Learn to Health Insurance is an app designed for millenials to guide them through the basics of life insurance, so they aren't lost when they finally need it.

What it does

It brings responsive design and intuitive gesture controls, all that we're used to from other apps, to life insurance. Moreover, it provides context aware help, a one-click help button to call your mom / dad (because, really, we still rely on them!), and real data-backed machine learning to guide your decisions.

How I built it

I took a lot of what I knew before (React Native, even PHP) and blended it with new ideas (several new React components, Google Prediction, TensorFlow). I diagrammed everything out but also remained agile.

Challenges I ran into

I thought I could tackle TensorFlow this weekend. After spending a few hours trying to grasp the basics, I settled on using off-the-shelf Google Prediction.

Additionally, the front end took more time than I anticipated. This was also largely due to the spotty wifi, which made it impossible to develop consistently.

Accomplishments that I'm proud of

Figuring out Google Prediction! The only node client available for it was out of date, so I had to edit the source code to make it run on the latest API version. Also, there is a good amount of polish on the front end. I started off as a backend coder but have been realizing lately the importance of user experience.

What I learned

I'm still capable of stepping up to the line.

What's next for How to LifeInsurance: FinancialLiteracy for Millenials

Better training models!
",,https://gitlab.com/jon.chin/yhack-2017,,"Best Finance Hack, Vitech: Life Insurance Quoting Challenge, Facebook: Best use of a Facebook API or SDK, Google: Best Google Cloud Platform Hack","expo.io, react-native, python, firebase, gcp, php, google-prediction, google-cloud, ubuntu, node.js",jonchin152,New York University,0
Da News,http://yhack2017.devpost.com/submissions/84204-da-news,"Inspiration

challenge

What it does

summarizes news, determines whether it is fake, and presents it as a gif

How we built it

python

Challenges we ran into

integrating all the parts

Accomplishments that we're proud of

idk, friendship?

What we learned

python, team-building, friendship, good times

What's next for Da News

nothing
",,,,"",python,jmact17,"Rutgers, The State University of New Jersey",1,Antlowhur
Faustin,http://yhack2017.devpost.com/submissions/84205-faustin,"Inspiration

The Future of Computer Science Computer Science, Software Engineering and Information Systems are international qualifications, enabling people to work globally, and in a very broad variety of roles. Through this hackathon, we wanted to bridge the gap between men and machine in a creative way, so we decided to create a project that can make computers understand not only the literal meanings of our language but also the hidden emotions underneath them.

What it does

Our project takes in an recording and detects the emotion of the speaker. This is done by analysis of audio and analysis of the language used. Thus, our app can detect the language tone and emotional tone. Furthermore, a text input can also be analyzed for language tone.

How we built it

We utilized Bootstrap to create the website and Google Charts to represent data. For the backend, we used IBM Watson for language tone analysis and speech to text and Vokaturi to analyze emotional tone. The Node.js server built on the express framework is used to call the IBM Watson APIs and a Python script is used to interface with Vokaturi. 

Challenges we ran into

We had to learn CSS and Javascript to overcome some technical difficulties when working on the front end, we also ran into problems deploying our Node.js server on the backend. Time constraints limited the amount and type of graphs we could show, otherwise, we would of wanted more informative charts to represent our output.

Accomplishments that we're proud of

Exploring Vokaturi and IBM Watson was very rewarding as we got to implement the basic features of both while also getting a glimpse of their full potential.
Although using Bootstrap and Javascript were frustrating, we are proud of how much we learned and the final product we were able to create using them.

What we learned

We learned how to use Vokaturi, IBM Watson and Bootstrap. Beyond these, we have also learned to embrace our challenges with passion, stamina, and willingness to learn and improve ourselves. 

What's next?

We envision expanding our app to respond to real world applications. To do this, we need improve use of analysis apis. IBM Watson's speech to text can differentiate between different speakers, and Vokaturi can be used to analyze smaller portions of the entire audio file. Inclusion of these features would allow us to detect the emotion for each speaker at a specific time. To represent these improvements, we will also need to make our data visualization more robust by using more informative graphs.
",,https://github.com/tangsaidi/YHack,,"Mirum and JWT: Can a Computer Hear How You Feel? Seeing the emotion in IM and voice, Best Civic Hack, JPMorgan Chase: Finance of the Future, Rough Draft Ventures: Most Entrepreneurial Hack, Google: Best Google Cloud Platform Hack","c, objective-c, python, html, c++, javascript, shell",tonytu16,"University of California - Berkeley, University of Waterloo",3,saidi_t,jono1202,felix990302
DataSense,http://yhack2017.devpost.com/submissions/84206-datasense,"DataSense

A platform which enables crowd-sourced annotations for data sets of any size to be used for machine learning.

Mission Statement

Accelerate the spread of machine learning to small- to mid-size companies

Purpose

One of the largest barriers to companies trying to integrate machine learning into their business is access to a gold standard set of annotated data. We at DataSense want to help businesses overcome that hurdle and thrive with data analytics.

Design Goals

Fair Compensation

Your time is valuable — we vow to always pay our users fairly

Data Integrity

Low-quality annotations hurts both sides

Expansibility

A wealth of annotation types will attract the best clients

Ease of Use

Simple interfaces accelerate the rate of annotation

Setup

REST API Server

Found in src/ExpressREST, you will need node and npm installed and an instance of mongo running.
npm install
node index.js

Java Server

Found in src/DataSenseReact, you will need an up to date version of Java RT installed.
./gradlew build # to build 
./gradlew bootRun # to run

Static File server

All static files can be found in src/frontEnd, where you can use any HTTP server you like. We suggest python! :)
cd ../../frontEnd
python -m SimpleHTTPServer 8000

To Contribute

Make a PR, we would love to include your additions!
",,https://github.com/ChristopherMcDonald/DataSense,https://s3.amazonaws.com/challengepost/zip_files/production/28262/zip_files/datasense.pdf,Rough Draft Ventures: Most Entrepreneurial Hack,"html, javascript, java, css, node.js, mongodb, love",ChrissMaacc,McMaster University,2,canadianengineer,platkis
Stanley Black and Decker: IoT Streaming and Analytics,http://yhack2017.devpost.com/submissions/84207-stanley-black-and-decker-iot-streaming-and-analytics,"Inspiration

A majority of critical data is streaming data. One such example is the performance of factory machines over time. We wanted to devise a method in order to analyze these machines for potential performance errors and to visualize their performance over time. This would tremendously help cut business costs, as specialized technicians would be able to prevent these performance errors before they occur, in order to save the company resources.

What it does

Our app is a platform for predictive analysis on real-time machine performance data from Black & Decker. Hence, its primary purpose is to anticipate whether a machine would fail based on the given data. A secondary objective was to build an IoT dashboard to visualize results of exploratory data analysis (e.g. summary statistics). 

How we built it

In order to perform predictive analysis, we implemented an anomaly detection algorithm that takes the temporal nature of the data into consideration. We implemented the system on top of the Flask framework, with a React front-end. In addition, we used Firebase as a central data repository and hosted the app on Google's App Engine. We also used the Twilio API in order to implement text-message alerts.

Challenges we ran into

The dataset we were given to work with was very small and not representative of the entire problem domain. Hence, we had to design a custom algorithm in order to generate sufficient data. Also, none of us had experience working with time series models or anomaly detection, so we had to learn a lot along the way.

Accomplishments that we're proud of

We're most proud of the fact that we were able to collaborate independently on different features of the system (e.g. algorithms, back-end, front-end) and still managed to fuse everything together into the final product. Also, we're proud that we were able to tackle such a challenging problem without any obvious solutions within such a short timespan.

What we learned

We learned a lot about the IoT framework and predictive analysis on streaming data (e.g. online learning, time series, etc.). In addition, we learned about the importance of clean data for both visualization and predictive analysis. Last but not least, we learned that teamwork and collaboration are major keys to tackling challenging and unfamiliar problems.

What's next for IoT Streaming and Analytics Dashboard

To infinity and beyond!
",,https://github.com/aarshpatel/yhack_2017,,"Stanley Black & Decker: IoT streaming & analytics dashboard, Google: Best Google Cloud Platform Hack","python, flask, react, firebase, google-app-engine, machine-learning, chart.js, javascript, twilio",varunsharmadps,University of Massachusetts Amherst,2,lasamson,aarshpatel
GrubSub,http://yhack2017.devpost.com/submissions/84208-grubsub,"Inspiration

While munching down on 3 Snickers bars, 10 packs of Welch's Fruit Snacks, a few Red Bulls, and an apple, we were trying to think of a hack idea. It then hit us that we were eating so unhealthy!  We realized that as college students, we are often less aware of our eating habits since we are more focused on other priorities. Then came GrubSub, a way for college students to easily discover new foods for their eating habits. 

What it does

Imagine that you have recently been tracking your nutrient intake, but have run into the problem of eating the same foods over and over again. GrubSub allows a user to discover different foods that fulfill their nutritional requirements, substitute missing ingredients in recipes, or simply explore a wider range of eating options.

search for a food item and find others that are similar in nutritional value, but providA user who wants to substitute a food that they 

How I built it

GrubSub utilizes a large data set of foods with information about their nutritional content such as proteins, carbohydrates, fats, vitamins, and minerals. GrubSub takes in a user-inputted query and finds the best matching entry in the data set. It searches through the list for the entry with the highest number of common words and the shortest length. It then compares this entry with the rest of the data set and outputs a list of foods that are the most similar in nutritional content. Specifically, we rank their similarities by calculating the sum of squared differences of each nutrient variable for each food and our query.

Challenges I ran into

We used the Django framework to build our web application with the majority of our team not having prior knowledge with the technology. We spent a lot of time figuring out basic functionalities such as sending/receiving information between the front and back ends. We also spent a good amount of time finding a good data set to work with, and preprocessing the data set so that it would be easier to work with and understand.

Accomplishments that I'm proud of

Finding, preprocessing, and reading in the data set into the Django framework was one of our first big accomplishments since it was the backbone of our project.

What I learned

We became more familiar with the Django framework and python libraries for data processing.

What's next for GrubSub

A better underlying data set will naturally make the app better, as there would be more selections and more information with which to make comparisons. We would also want to allow the user to select exactly which nutrients they want to find close substitutes for. We implemented this both in the front and back ends, but were unable to send the correct signals to finish this particular function. We would also like to incorporate recipes and ingredient swapping more explicitly into our app, perhaps by taking a food item and an ingredient, and being able to suggest an appropriate alternative.
",,https://github.com/danielleung27/yhacks2017/,https://s3.amazonaws.com/challengepost/zip_files/production/28282/zip_files/GrubSub.zip,"Best Healthcare Hack, Intuit: College Student Prosperity Case","python, django, html5, css3, data",danielleung,Princeton University,2,chienmian,azou1103
Y.Cabinet,http://yhack2017.devpost.com/submissions/84209-y-cabinet,"Inspiration

We get the inspiration from the idea provided by Stanley Black&Decker, which is to show users how would the product like in real place and in real size using AR technic. We choose to solve this problem because we also encounter same problem in our daily life. When we are browsing website for buying furnitures or other space-taking product, the first wonders that we come up with is always these two: How much room would it take and would it suit the overall arrangement.

What it does

It provides customer with 3D models of products which they might be interested in and enable the customers to place, arrange (move and rotate) and interact with these models in their exact size in reality space to help they make decision on whether to buy it or not.

How we built it

We use iOS AR kit.

Challenges we ran into

Plane detection; How to open and close the drawer; how to build 3D model by ourselves from nothing

Accomplishments that we're proud of

We are able to open and close drawer 

What we learned

How to make AR animation

What's next for Y.Cabinet

We want to enable the change of size and color of a series/set of products directly in AR view, without the need to go back to choose. We also want to make the products look more realistic by finding a way to add light and shadow to it.
",https://www.youtube.com/watch?v=1KYavesJp1g&feature=youtu.be,,,"Stanley Black & Decker: Storage Solutions Augmented Reality, Rough Draft Ventures: Most Entrepreneurial Hack","swift, ios-ar-kit",KylinKang,University of California - San Diego,3,Mossaka,kent0318,DYBCyrus
Trendline,http://yhack2017.devpost.com/submissions/84210-trendline,"

Figuring out what's going to be big in the future is hard. 

Trendline is a tool that tries to predict future success of current tech by relying on the powers of machine learning and induction.

The code:

At the heart of it, Trendline uses:

1) The Python Reddit API Wrapper (PRAW) to query for submissions that relate to a topic

2) Pytrends API to gauge how interest in a topic is developing over time via Google Trends.

3) WikiBot to traverse Wikipedia pages. 

4) US Patent Office data and Beautiful Soup to parse patent records.

5) TextBlob to perform sentiment analysis on selected text.

6) TensorFlow for the actual functional approximation.



Performance:

We ran a dense three layer neural net on a training set of 15 samples. (Yes, we're aware this is pitifully small.)
On our test set of 11 samples, we reached an accuracy of ~81.8%. 

Applications:

This is all heavily speculative, but the early results for Trendline look (perhaps) promising. Being able to leverage existing public datasets (Wikipedia, etc.) to create predictions is always exciting, especially considering our early success and the potential .

Future Tasks:

1) Acquire waaaay more data. (Additional features, more things for our model to consider, etc.)

2) Run more training iterations and update our model.

3) Test our model to see if generalization outside of the technology sector occurs.
",,https://github.com/ZeframLou/YHack2017-Submission,https://s3.amazonaws.com/challengepost/zip_files/production/28264/zip_files/Trendline-YHacks.zip,"Informa: Best Hot Technology Predictor, Best Finance Hack","python, tensorflow, praw",owenshen24,University of California - San Diego,1,ZeframLou
JetSetGo,http://yhack2017.devpost.com/submissions/84211-jetsetgo,"Inspiration

Sometimes, you've just got to go. But it's hard to do that if you need to spend hours deciding where, then searching through flights. We've built a tool that simplifies the process of choosing and searching into one simple platform.

What it does

We provide a simple, easy-to-use interface where all you need to do is enter your starting airport and how much money you'd like to spend on a ticket. The site then searches through JetBlue's database of lowest fares to compile an interactive map of all the places you can go. All that's left to do is choose one!

How we built it

We started by making a local server with node.js from which to run the site––on the server, we create and store our data tables with mySQL. The front-end and user interaction use a combination of html, CSS, and JavaScript along with the Google Maps API.

Challenges we ran into

Both of us are relatively new to web development, so setting up the server in instrumenting the UI was challenging but fun!

Accomplishments that we're proud of

We're proud of interfacing between front-end and back-end, as well as the ability to display flight data in an interesting way.

What's next for JetSetGo

The sky's the limit!
",https://youtu.be/tEvnHFnhF-g,https://github.com/peterhuson/jetsetgo,,JetBlue: Best Use of JetBlue Low Fares and Deals Data,"google-maps, javascript, css, html, mysql, node.js, jquery",dschurman,Brown University,1,peterhuson
TrueBlue Adventures,http://yhack2017.devpost.com/submissions/84212-trueblue-adventures,"Inspiration

The social media newsfeed, known for viewing the flawless lives of our peers, has no shortage of gorgeous vacation and travel photos. We want to travel to these exotic places and explore the world. We want to visit the museums of Paris, the mountains of Nepal, and experience the stunning seafood of Japan. Masses of young adults share this sentiment, but travelling is often expensive and out of reach. However, many of these experiences can be replicated closer to home and for a lot less with JetBlue’s low fares. You might not have the $15,000 needed to climb Mount Kilimanjaro this year, but you can climb a 20,000’ volcano in Ecuador for under $2,000 during spring break. Let’s make it happen!

What we does

Our IOS app begins with the user providing a photo of a place that they would like to visit on a specific date, it can be a faraway place in the South Pacific or just a friend’s vacation photo on Instagram. We extract key characteristics of the destination using Google’s Vision API. Then, the characteristics are used to match the user with a destination that closely resembles the one shown in the original photo. This is done by comparing keywords with a dataset we created by using JetBlue’s destinations list, a common set of tourism characteristics, and synonyms that we found the API to use. Finally, using JetBlue’s low fares, the user is given a result of the 4 cheapest, and most suitable destinations on their chosen date. They also get a couple of points of interest for each destination as a bonus. Affordable vacation planning made easy!

How we built it

We began by looking for an API that would help us with image processing – this resulted in choosing Google Vision to generate key words for any given destination. Then, we compiled a large dataset of destination information to compliment the JetBlue low fares spreadsheet. Afterwards, we set up a local server with the flask Python library and an easy to use, clean, IOS app for a user-friendly experience. 

Challenges we ran into

Creating a dataset large enough to handle accurate destination suggestions.
Optimizing performance in a sub-optimal internet connectivity environment. 

Accomplishments that we're proud of

Significant usage of the JetBlue low fares dataset 
Building a functional IOS app with a high degree of practicality, and user friendliness
Accurate and interesting destination results
Low fares!

What we learned

Flask, Ngrok, Google Vision API, JSON

What's next for TrueBlue Adventures

We hope to expand TrueBlue Adventures to cover JetBlue's entire network. Fully functioning date picker and airport selection would come with a future booking system. 
",https://www.youtube.com/watch?v=dYlhOZbXr3w,https://github.com/TobyXia/ExploreWithJetBlue,https://s3.amazonaws.com/challengepost/zip_files/production/28265/zip_files/YHack_TrueBlue_Adventures_All_Files_Submission.zip,"JetBlue: Best Use of JetBlue Low Fares and Deals Data, Google: Best Google Cloud Platform Hack","objective-c, google-cloud, google-vision, flask, python",tobyxia,"University of Toronto, University of Waterloo",2,HarPar,torrychen3
X-Tech,http://yhack2017.devpost.com/submissions/84213-x-tech,"Inspiration

oh my god I need to sleep just let me submit this

What it does

Prioritizes requisitions in an emergency x-ray department, as large hospitals are moving away from paper and it is now more difficult to do it manually.  

How we built it

Using a 4 loop to queue the protocols, by urgency, protocol and potentially time stamp.

Challenges we ran into

We decided to use flask for the first time this hackathon and there were some problems with integration that were difficult.  

Accomplishments that we're proud of

3/4 of this team are completely new to coding, so everything.

What we learned

The new people learnt the basics of html and python, and our experienced member learnt how to use flask. 

What's next for X-Tech

There are a lot more details that can be incorporated into this web app, some being time stamps (to increase efficiency), patient mobility (so the program can factor in the extra time to do the procedure), radiographer technologist input (so that changes to the queue can be made manually when circumstances change), and lastly it becoming a concurrent system so it can be realistically applied in an emergency room, with additional nurse, doctor and departmental input into the program. 
",,https://github.com/falafels/X-Tech,,Best Healthcare Hack,"python, flask, html5, sublime-text, github",bubblesandhappiness,"",0
ViHack,http://yhack2017.devpost.com/submissions/84214-vihack,"Inspiration

We are inspired by how Machine Learning can streamline a lot of our lives and minimize possible errors which occurs. In the healthcare and financial field, one of the issues which happens the most in the Insurance field is how to best evaluate a quote for the consumer. Therefore, upon seeing the challenge online during the team-formation period, we decided to work on it and devise an algorithm and data model for each consumers, along with a simple app for consumers to use on the front end.

What it does

Upon starting the app, the user can check to see different plans offered by the company. It is listed in a ScrollView Table and customers can hence have a simple idea of what kind of deals/packages there are. Then, the user can proceed to the ""Information"" page, and fill out their personal information to request a quotation from the system, where the user data is transmitted to our server and the predictions are being made there. Then, the app is returned with a suitable plan for the user, along with other data graphs to illustrate the general demographics of the participants of the program.

How we built it

The app is built using React-Native, which is cross-platform compatible for iOS, Android and WebDev. While for the model, we used r and python to train it. We also used Kibana to perform data visualization and elasticsearch as the server.

Challenges we ran into

It is hard to come up with more filters in further perfecting our model with the sample data set from observing the patterns within the data set. 

Accomplishments that we're proud of

Improving the accuracy of the model by two times the original that we started off with by applying different filters and devising different algorithms.

What we learned

We are now more proficient in terms of training models, developing React Native applications, and using Machine Learning in solving daily life problems by spotting out data patterns and utilizing them to come up with algorithms for the data set.

What's next for ViHack

Further fine-tuning of the recognition model to improve upon the percentage of correct predictions of our currently-trained model .
",,https://github.com/Edwin-Chan/YHacks17,,"Best Healthcare Hack, Best Finance Hack, Vitech: Life Insurance Quoting Challenge, Google: Best Google Cloud Platform Hack, Best Use of Amazon Web Services","r, react-native, machine-learning, kibana, javascript, elasticsearch, google-cloud, google-drive, amazon-web-services, python, brew, yarn, npm, pip, aws-lambda, json, csv, expo.io",Dev_Kryptonite,University of Southern California,0
Procrastinator Calculator,http://yhack2017.devpost.com/submissions/84216-procrastinator-calculator,"Inspiration - Keep your friends close, keep your enemies (procrastination) closer :0

What it does - Makes procrastinating a bit more productive?

How we built it - Failed with our original idea :( so had to do whip up something really fast?

Challenges we ran into - SLOW WI-FI severely impacted our productivity

Accomplishments that we're proud of - Quick thinking? Creating something okayish in a short time?

What we learned - Have your own hotspot? Agree on ideas wayyy before?

What's next for Procrastinator Calculator - Procastinating Essay Writing? and an entire collection of productive/non-productive tools?
",,http://www.tahasalman.com/calc/calc.html,https://s3.amazonaws.com/challengepost/zip_files/production/28271/zip_files/calc.zip,"Rough Draft Ventures: Most Entrepreneurial Hack, Best Education Hack","javascript, jquery, html, css",tahas147,McGill University,3,Byusa,ethanschellenberg,haoyuzhang
crypto canary,http://yhack2017.devpost.com/submissions/84217-crypto-canary,"Cryptocurrencies continue to grow in popularity, and have proved themselves to be lucrative investments. However, like stocks, it can be difficult for an inexperienced trader to know when to buy and sell crypto. Cryptocanary is a tool that helps solve this problem, using the power of Twitter. 

Twitter is a extremely popular social network - with 330 million active users in the third quarter of 2017, and 500 million tweets sent daily, it reflects the current events and trends of the world through its data. 

Analyzing Twitter posts in realtime, Cryptocanary takes all tweets relevant to certain cryptocurrencies, and runs them through Google's natural language processing API to identify a sentiment value. Putting together the data from a large volume of tweets as they roll in, an estimate of the net sentiment towards these cryptocurrencies is found. Canary runs a crypto trading strategy using these trends in hopes of making a profit.

Currently, Bitcoin and Etherium are supported.
",,https://github.com/ali-ni/cryptocanary,,"Best Finance Hack, Google: Best Google Cloud Platform Hack","python, google-natural-language-api, twitter",shunr,University of Waterloo,1,Ali-Ni
NewsTruth,http://yhack2017.devpost.com/submissions/84218-newstruth,"Inspiration

Prevent fake news

What it does

Prevents fake news 

How we built it

Ethereum backend works with Javascript 

Used a lot of fake ether coins 

Challenges we ran into

Getting the Ethereum backend to work with Javascript 

Accomplishments that we're proud of

Getting the Ethereum backend to work with Javascript 

What we learned

How Ethereum works with Javascript 

What's next for NewsTruth

Integrate Ethereum with Javascript 
",,https://github.com/kartikay18/newstruth,,"Best Civic Hack, Rough Draft Ventures: Most Entrepreneurial Hack, Facebook: Best use of a Facebook API or SDK, Poynter Fellowship: Best Hack to Counter Fake News","ethereum, javascript, solidity, blockchain, ether",kartikay,"University of Toronto, SUNY Stony Brook",3,kabirsakhrani,tpodder,andr1908m
MakeBot,http://yhack2017.devpost.com/submissions/84219-makebot,"To test: click the invite link to our tester workspace in the 'try it out' block. Once you're in the workspace, notice that in the #general channel, we've pinned our readme file, our link to our code, and the link needed to authorize the bot. Follow the instructions on the readme to test the MakeBot.   

Inspiration

A desire to create tech solutions for companies who aim to improve the world, either at the local, regional, or global level. We also enjoy using slack for school clubs and were piqued by the slack api. 

What it does

We've created a slackbot that can be integrated into the existing workspace of MakeHaven, a local New Haven non-profit. This slackbot will orient new members and provide them with supporting resources.

How we built it

We used glitch.com and studio.botkit.ai to code the commands and operations of our slackbot called MakeBot. 
Glitch.com provided us with an express.js webserver. We then configured our app with the existing slack api management tools. 

Challenges we ran into

We learned a new API and were frustrated by a permissions bug affecting the usability of our slackbot. Ultimately we were able to resolve the issue by researching together and asking mentors for a point in the right direction. BotKit started to give us issues and we decided to transfer entirely into Glitch/Slack API. This meant we had to re-code a large portion of the bot.

Accomplishments that we're proud of

Coming together as a team to learn, hack, and have fun, even though we didn't know each other before Friday. Building a slackbot able to complete all the tasks expected by MakeHaven!  

What we learned

Slack API, some javascript, Glitch interface

What's next for MakeBot

Hopefully it gets used by MakeHaven's slack workspace! MakeBot functionality is flexible and can be expanded beyond orientation-specific use to assist all MakeHaven members.
",,https://join.slack.com/t/yhacktester/shared_invite/enQtMjgwODU3NDE5MTM5LTc4NWY1ZTdjOWU2NDgyODg4YmQ0YTFmMjk4MTRlMDgwOTBlMjdkMjEzYjJmNTIyMjUxZTQ1MjUxMmI3YTAzNmE,https://s3.amazonaws.com/challengepost/zip_files/production/28266/zip_files/README.txt,Best Civic Hack,"slack, javascript, express.js",MauricioFrancoRivera,Columbia University in the City of New York,0
bairon,http://yhack2017.devpost.com/submissions/84220-bairon,"Inspiration

Deep neural networks have enabled machines to be creative by generating images, music, poetry and films; however, most of these results are parlor tricks and do not approach the level of artistry that human experts exhibit. We want to create an AI that can collaborate with humans to create art that neither could on their own.

What it does

bairon is a human-ai collaborative poetry editing environment. As you write poetry, bairon assists with your creativity via a number of modules. If you select a word you have written, bairon will suggest synonyms and rhymes for that word. 

The pies de resistance is bairon's poetry generation module. We created a deep neural network that generates novel poetry by training it on 3,000 poems (over 2.5M words) from legendary writers. As you create, bairon writes its own poem based on what you have written so far. This provides real-time inspiration and feedback during the writing process. We hope this will boost creativity and combat writer's block.

How we built it

Our frontend is built using React.js and our backend is a Python Flask server. We interface with the dictionary.com and datamuse APIs for thesaurus and rhyme suggestions, respectively. 

Our poetry generation module is built on a GRU recurrent neural network, which we constructed and trained from scratch using TensorFlow and data from PoetryDB.org.

Challenges we ran into

Most of our challenges revolved around creating a beautiful and intuitive UI for collaborative editing and debugging our neural network. Recurrent neural networks are theoretically complex, and TensorFlow's documentation for them is lacking.

Accomplishments that we're proud of

We are proud of building a tool that is both technically cool and practically useful. I plan on using bairon for my own writing in the future.

What we learned


Learned to construct GRU language models with TensorFlow's RNN API.
Learned how to deploy deep learning models with TensorFlow Serving.


What's next for bairon

We would like to deploy our web app and deep learning model so that other people can work with bairon. We'd also like to experiment with new model architectures to make poetry generation even better. One idea we have is to train a phoneme generation model so that bairon can learn concepts like rhyme and consonance.
",,,,"","tensorflow, python, flask, react, javascript, html, css",matthew_cooper,Brown University,1,MarthaEdwards
Memento,http://yhack2017.devpost.com/submissions/84221-memento,"Memento was inspired by a roommate of ours who regularly needs to take pills, and sometimes forgets to take them.

Memento is a simple app where a user can add the pills that they take regularly, and can be reminded that they need to take them. This happens in two ways, the first is that the user will receive an alarm reminding them to take their pill. The second is by adding close friends and loved ones to the app, this way if a user misses their alarm, their friends will get notifications reminding them to take their medications.

We built it using Android, a node.js backend, and firebase for auth and data hosting.

What's next for Memento: We intend to continue developing memento into a full application that may be released in the play store once fully polished.
",,https://github.com/bickybilly/memento,,Intuit: College Student Prosperity Case,"android, firebase, node.js, express.js",JKJones,McMaster University,1,vickybilbily
Peace of Mind,http://yhack2017.devpost.com/submissions/84222-peace-of-mind,"Inspiration

Studies approximate that 1 in 5 American adults suffer from a mental illness each year. In addition, nearly half of those who do suffer from mental illnesses don't seek treatment or help. As university students, friends, and family members, we've seen how mental health has the ability to impact social, academic and work lives. Therefore, we wanted to create a tool that leverages existing mental health survey data in order to promote awareness of mental health issues and encourage companies and organizations to invest in the mental well being of their employees. 

What it does

Our application is intended for employers and organizations to see how aware their policies and culture is of mental illnesses within the workplace. User would need to fill out a short survey on some characteristics of their company or organization such as the number of employees, location, mental health programs, health benefits and ease to get help. Peace of Mind uses this data and compares it historical mental health survey data in order to assign the user's organization a mental health awareness score. This score would be accompanies with research backed suggestions on what they could implement within the organization to raise the score or what they should continue to pursue in order to make sure that the workplace is a healthy environment for their employees. We wanted to show that companies have a lot to gain, economically and ethically, by having healthy, happy, and productive employees in their offices. Therefore, today employees should be able to count on their employers' support as they face mental health illnesses.

How we built it

We got our data from a public mental health survey that 2014 and 2016. We then cleaned and prepared this data in Microsoft Excel. Then we used Microsoft Azure Machine Learning Studio in order to construct our model to predict how likely a company may be contributing to the mental health illnesses of their employees. Tuning our model involved considerations of which column of data would be important to this final prediction. For example, companies and organizations with mental health benefits and a wellness program that educated employees about mental health services would be more likely to have their employees seek help and recover quicker. We then built a web application using html/css/javascript that acted as an interface to inform visiting users about mental health statistics, calculate a mental health awareness score based on a short survey, and give a little background on the research that supports the score. The application was deployed using Microsoft Azure.

Challenges we ran into

We ran into challenges with integrating our web service model with our web application through http requests. This was due to Microsoft Azure Machine Learning Studio needing a workaround to send http requests by using a python script or wrapping in another API. Therefore, we did not have enough time to create a full flow on the application and work on the interface for the survey entry and about portions of the web page.

Accomplishments that we're proud of

We are proud of getting a useful model built to predict whether an employee would go seek help for a mental illness using pretty sparse mental health survey data. Our model achieved a 0.76 F1 score given less than 2000 data points with a few columns after cleaning. Given that this survey is currently being performed again in 2017, there will be even more data available in the near future to train and improve our model with.

What we learned

This was the first machine learning project that we as individuals and as a team tackled so it was interesting to learn about the work and methods needed to clean and prepare data sets to become usable. We also learning about different machine learning algorithms and how tuning their parameters makes better models to predict our data.

What's next for Peace of Mind

Since we have a few separate parts of our project done, the next step is to integrate all of them into a single user experience that someone would be able to use. We will also be excited to see when the mental health survey data for 2017 comes out so that there is more data to train our model. Overall, we hope that our project achieves its goal of promoting awareness for mental health and hopefully can inspire the investment in programs that can help prevent and treat mental illnesses. 
",,http://mindapp.azurewebsites.net/,https://s3.amazonaws.com/challengepost/zip_files/production/28267/zip_files/peaceofmind.zip,Best Healthcare Hack,"html, css, javascript, azure, machine-learning, data",BinhLe,Massachusetts Institute of Technology,1,JennyXue
Cram,http://yhack2017.devpost.com/submissions/84223-cram,"Inspiration

We read online that quizzes help people retain the information they learn, and we figured if we could make it fun then more people would want to study. Oftentimes it's difficult to get study groups together, but everyone is constantly on their phones so a quick mobile quiz wouldn't be hard to do.

What it does

Cram is a live social quiz app for students to study for courses with their classmates.

How we built it

We created an iOS app in Swift and built the backend in Python. 

Challenges we ran into

It's very difficult to generate questions and answers from a given piece of text, so that part of the app is still something we hope to improve on.

What's next for Cram

Next, we plan on improving our automatic question generation algorithm to incorporate machine learning to check for question quality.
",,,,"Rough Draft Ventures: Most Entrepreneurial Hack, Facebook: Best use of a Facebook API or SDK, Best Education Hack, Google: Best Google Cloud Platform Hack, Intuit: College Student Prosperity Case","swift, python",y4smeen,Hunter College of the City University of New York,3,serenadipity,briandesouza,PabloGarces
InsurED with Doge Senpai,http://yhack2017.devpost.com/submissions/84224-insured-with-doge-senpai,"Inspiration

Doge Senpai is bae

What it does

Doge Senpai will help you pick your insurance premium

How we built it

Challenges we ran into

Accomplishments that we're proud of

What we learned

What's next for InsurED with Doge Senpai
",,https://doge-senpai.herokuapp.com/,,"Best Civic Hack, Best Healthcare Hack, Vitech: Life Insurance Quoting Challenge, Best Education Hack","python, tensorflow, keras, sklearn, d3.js, flask",exsmiley,Columbia University in the City of New York,1,tqp2001
Salience,http://yhack2017.devpost.com/submissions/84225-salience,"Inspiration

The web is full of data/information, but it is hard to find the relevant information useful for our interest. What if we could not only narrow it down to relevant data, but also gain personalized set of information?

What it does

Our app scrapes the articles, patents, social media posts on the web and identify relevant keywords from them. Our app predicts what technologies will become commercial relevant in the near future.

How we built it

We preprocess the collected data from the web using the Datapoint utility provided by Viacom. We thought it is challenging to use the Datapoint, so we used the GraphQL's syntax to utilize the Datapoint. Then, the google cloud platform's Natural Language API uses machine learning process to identify key terms that we are interested in, and it also tells us the salience of the word. We used these keywords with high salience as search term to perform deep, recursive search for expanding our search range and orienting the search towards a direction. We used predictive model to determine which technology would be more commercial relevant than the others.

Challenges we ran into

We had to come up with a novel algorithm to evaluate the tailored data we prepared to tell the user unique and meaningful information about the technologies future.

Accomplishments that we're proud of

We deal with large quantity of data using datapoint utility and manage to use recursive queries to expand the range of search. We implemented datapoint utility using the GraphQL's syntax.

What we learned

We learned how to work as a team moving towards to a goal quickly. 

What's next for Salience

We are going to promote the data integrity of the web to easily identify meaningful information. We wish to promote diverse, healthy expressions of people. 
",,,https://s3.amazonaws.com/challengepost/zip_files/production/28268/zip_files/yhacks2017-react-native-master.zip,"Viacom: Best Use of the Viacom DataPoint Javascript Utility , Informa: Best Hot Technology Predictor, Best Finance Hack, Facebook: Best use of a Facebook API or SDK, Google: Best Google Cloud Platform Hack","datapoint, graphql, react-native, node.js, javascript, viacom, facebook, informa, google-cloud",kukionfr,Johns Hopkins University,3,ggoma,davidnagli,RiraChoi
Y-Emote,http://yhack2017.devpost.com/submissions/84226-y-emote,"Inspiration

Wanted to challenge ourselves to think critically about the written content we consume on a daily basis on the internet. 

What it does

Our app allows the user to upload a fragment of text and it will output the primary emotion of the text.

How I built it

We utilized IBM's Watson API, specifically the tone-analyzer. We then completed the web app using Node.js and other frameworks. 

Challenges I ran into

We initially wanted to make this an android application, however we were ultimately unable to do this. 

Accomplishments that I'm proud of

We're proud that we were able to learn the basics of one of IBM's APIs, as these may allow us to continue with our other projects in creative ways. 

What I learned

I learned how to use the node.js framework for JavaScript.

What's next for YEmote

Hopefully, we can also integrate the translation of audio files into a specific sentiment, including the primary emotion of the selection. We also hope to distinguish between different voices. Finally, we wish to put the application on a public or transition it into an android project. 
",,,https://s3.amazonaws.com/challengepost/zip_files/production/28269/zip_files/ToneRecognition.zip,Mirum and JWT: Can a Computer Hear How You Feel? Seeing the emotion in IM and voice,"javascript, node.js, html",danieljab7,McMaster University,0
Debataly,http://yhack2017.devpost.com/submissions/84227-debataly,"Inspiration

The goal of this project is to allow users to express themselves, to defend their point of views and to see new ones. Debatably can be seen as an environment to encourage discussion on topics that matter to the world, or as a simple source of entertainment.

What it does

A user goes on the application and picks a topic (e.g. Cats vs Dogs) and chooses their stance in it. The user proceeds to wait for an opposing view to join the debate through matchmaking. When a match is found, the two matched users enter a chatroom where they can start debating through text. The chatrooms contain certain rules such as time limit, filtering words (user choice), no spam, etc. Other users can spectate on-going chatrooms and closed chatrooms to vote on a winner.

How we built it

Powered by coffee.

What we learned

Android Studio, Google Firebase
",,,,"","firebase, android-studio",woozzie,Concordia,1,kwreen
Lumos,http://yhack2017.devpost.com/submissions/84228-lumos,"Inspiration

The catalyst for Lumos stemmed from the lack of adequate responses coming in following the most recent floods & hurricanes this year. The public outcry for innovation within the disaster relief realm was met at the intersection of mitigation and telecommunication efforts. We provide swift, deploy-able emergency preparation kits with luminescent and NS-2/BTS technology components at its core. Since Lumos' inception, we never try to reinvent the wheel but are aiming to fully understand how our technology can affect our communities on a local, state and federal level. 

What it does

Lumos kits notify first respondent dispatchers using two modes of predictive modeling techniques. 

How we built it

LED lights were interwoven into the DNA of our protype to allow consumers to accurately display there current status in crisis. When the device is deployed we have three different indicators for determining a both consumer's sense of urgency and first respondents level of priority. 

-LED lights that flash green indicate that one is safe. You are in the best possible scenario in terms of what damage could have taken place. 
LED lights that flash yellow indicate that one is in moderate/ok condition. You may not feel safe in your current situation during the disaster and may need medical attention. 
LED lights that flash red indicate that one is is critical or life/death situation. You are in desperate need of help in whatever capacity that may be. 

Beyond the LED component, once location has declared a state of emergency the (NS-2/ BTS) simulator reflects the idea of the mobile hotspot connectivity technology allowing each individual deployed device to feed off of the same broadband satellite network. This create at stronger signal to reach the likes of FEMA, American Red Cross,  & Military alike.

Challenges we ran into

Initially we struggled to figure out what trajectory our project was heading towards.  Building a hardware component would require specific materials that we did not have readily available to us. On the contrary, the software component or website splash page would not be enough to explain the functionality of the Lumos device. 

Accomplishments that we're proud of

Finding free batteries!
John Khan, IBM fellow suggested that Lumos could potentially develop a corporate relationship with Weather.com
We were also able to secure market validation from home owners in Orlando and Houston Texas who see an immediate use for a device such as Lumos. 

What we learned

Natural disasters come in all shapes and sizes and Lumos has to have adaptive materials for such relief efforts. From volcanic eruptions, tornadoes, hurricanes, wild fires, earthquakes, blizzards, tsunami's sandstorms and even monsoons. Each Lumos device will be put to the test and be capable of tolerating the elements.

We also realized that our user narrative extends far beyond just homeowners. Our clients may include first respondents, families,  and corporate partnerships as well. We can get the cost of the Lumos device and materials down to about 10-12 USD per device. 

What's next for Lumos

We are aiming to add an Android or iOS app component to our project to emphasize more use for the Lumos Device. We want to keep it in sight and in your head that it should not be an afterthought that is forgotten about over time. We'd like to increase our community engagement creating a high level of trust. 
",,,https://s3.amazonaws.com/challengepost/zip_files/production/28270/zip_files/YHack_2017_Lumos_Presentation.pptx,Best Healthcare Hack,hardware,dkang,"Stevens Institute of Technology, Harvard University, Baruch College of the City University of New York",2,watsonb1229,ArpitDua
OperatAR,http://yhack2017.devpost.com/submissions/84229-operatar,"Inspiration

We wanted to add AR objects onto clothing, as well as create something medical-related.

What it does

It helps users learn how to perform surgery on a pretend patient and how to give directions in an operation room.

How we built it

Unity, Vuforia, Android Studio

Challenges we ran into

The AR camera wouldn't turn on sometimes.

Accomplishments that we're proud of

Create an AR app with Google Speech API

What's next for OperatAR

Add animated objects in the program so that it looks like the user is looking at a live patient
",,https://github.com/scarletknight11/OperatAR,,"Stanley Black & Decker: Storage Solutions Augmented Reality, Best Healthcare Hack, Rough Draft Ventures: Most Entrepreneurial Hack, Best Education Hack, Google: Best Google Cloud Platform Hack","unity, vuforia, android-studio, java, c#, google, augmented-reality, ar",scarletknight11,"Mercer County Community College, Rutgers, The State University of New Jersey",1,blisswho
SQL-SmashData,http://yhack2017.devpost.com/submissions/84230-sql-smashdata,"SQL-SmashData

An implementation of basic and good uses of SQL(MS) for YHack 2017

I started learning SQL at YHack 2017 to learn more about query languages. Here, I 
created a Database used from SmashBoard's https://smashboards.com/rankings/melee/league,
along with some insight I knew about the players themselves. I applied my newfound
knowledge of SQL with data I was interested in myself.
",,https://github.com/czebos/SQL-SmashData,https://s3.amazonaws.com/challengepost/zip_files/production/28272/zip_files/SQL_Data_Creation.txt,"",sql,czebos,Brown University,0
HealthMe,http://yhack2017.devpost.com/submissions/84231-healthme,"Inspiration

With fairly little experience in the Data Science/Machine learning space, I wanted to dive right in and tackle one of the data science problems that was presented at the hackathon. 

What it does

It uses multiple linear regression to predict insurance quotes for each of the four insurance types that the insurance company, Intellisurance, would give to a person given data on the person such as income, preexisting conditions, Tobacco usage, marital status, etc. It then uses those predicted quotes to suggest to the user which plan they should get. 

How I built it

Python for data science backend. HTML, CSS, and JS for frontend. 

Challenges I ran into

I don't machine learning to begin with and apparently combining multiple categorical and continuous data for your features for a machine learning model does not lend itself to being easy.

What's next for HealthMe

Better algorithm and more graphs. 
",,,,"Best Healthcare Hack, Vitech: Life Insurance Quoting Challenge","javascript, html, css, chart.js, python, machine-learning",timotius,"",0
Rolling Ball Game,http://yhack2017.devpost.com/submissions/84232-rolling-ball-game,"Inspiration

Unity game to learn more about game objects, components, prefabs, physics and scripting.

How I built it

Unity and C#

Accomplishments that I'm proud of

Fully functional game!
",,https://github.com/lucylow/Roll_a_ball_unity_game,,"","unity, c#",lucylow,"",0
Vitech Intellisurance ,http://yhack2017.devpost.com/submissions/84233-vitech-intellisurance,"Inspiration

please write something help me mom 

What it does

How we built it

Challenges we ran into

Accomplishments that we're proud of

What we learned

What's next for Vitech Intellisurance
",,https://github.com/emily-hunt/vitech-data-visualization,https://s3.amazonaws.com/challengepost/zip_files/production/28273/zip_files/vitech_data_visualization.zip,Vitech: Life Insurance Quoting Challenge,"d3.js, adobe-xd",a38le,University of Waterloo,1,EmilyHunt
Rate My Life,http://yhack2017.devpost.com/submissions/84234-rate-my-life,"Inspiration

Since there is so much data different companies, what if we made a game to earn some kind of score of what you do in your daily life. 

What it does

You enter in an experiences you had, it looks through the web and gives that experience a score. after all experiences are in, it will give a score based on your submissions

How we built it

We used xCode and swift and a few data sets, we created a parsing and rating algorithm that comes together in a IOS application

Challenges we ran into


There is no good parsing tool that we could find to go through the datasets
Issues arrived with xCode and new update with IOS
Learning/re-learining Swift and IOS development 
## Accomplishments that we're proud of
Creating a working Proof of Concept
Parsing through the datasets
## What we learned
Reading from files is very different in Swift 
## What's next for Rate My Life
A better ui
Using more datasets and API's like Facebooks and Googles data
Create spam/proof protections of some sort
Constantly adjusting the numbers to make it ""Balanced""
Bring integration with social network to compete with other people 

",,https://github.com/floatingkernal/Yhacks,https://s3.amazonaws.com/challengepost/zip_files/production/28274/zip_files/Rate_My_Life.zip,"Best Healthcare Hack, JetBlue: Best Use of JetBlue Low Fares and Deals Data","ios, xcode, parse",floatingkernal,"McGill University, University of Rochester",3,tahirinadia230,Papazova,SawyerKlebs
ViSurance,http://yhack2017.devpost.com/submissions/84235-visurance,"Inspiration

Adding value to a customer's life by helping them lead better lives.

What it does

Interactive chatbot that uses predictive algorithms to predict insurance premium costs based on details given by a customer. It also assists in helping keep costs down by assisting a user with helping them get started with living a better life by suggesting health tips (video/articles from the web). Additionally promotes brand loyalty.

Also, an accompanying data visualization platform to help understand trends and figures.

How I built it

Using keen dashboard, charts.js along with tensorflow on AWS. Also, messenger bot runs on AWS. Uses basic nlp to keep track of what's happening. 

Challenges I ran into

BadBot ChatBot.

Accomplishments that I'm proud of

Chatbot is fun. Integrations with web hooks are fun too.

What I learned

How to build a chatbot. How to have a consumer centric vision to add additional value to the customer.
",,,,"Best Civic Hack, Vitech: Life Insurance Quoting Challenge, Facebook: Best use of a Facebook API or SDK","charts.js, d3.js, keen, messenger, amazon-web-services",kpti,Harvard University,0
TL;DR,http://yhack2017.devpost.com/submissions/84236-tl-dr,"Inspiration

How many times have you went on a website, looked at the length of the content and decided that it was not worth your time to read the entire page? The inspiration for my project comes from this exact problem. Imagine how much easier it would be if website owners could automatically generate a summary of their webpage for their users to consume.

What it does

Allows the website owner to easily generate a summary of their webpage and place it anywhere on there webpage.

How I built it

I used CloudFlare so that it would be available to the many website owners very easily as an app. I used javascript to fetch the summary from a 3rd party API and to update the html of the page.

Challenges I ran into

It was hard trying to find a summarizer that was suitable for my needs. Many of them only accept URLs as input and many are just not good enough. Once I found one that was suitable, I also had difficulty incorporating it within my app.

I had also never done anything with html or css before so it was hard trying to create the view that the user would see.

Accomplishments that I'm proud of

It works, looks nice, and is easy to use

What I learned

How to make a CloudFlare app, html, css

What's next for TL;DR

Add more options for the app (maybe show relevant tweets?) and possibly create a chrome web extension that does that same thing.
",,,,"Cloudflare: Put Cloudflare in front of your hackathon project, make a Cloudflare App","cloudflare, javascript, html, css",AkramaMirza,University of Waterloo,0
NewsBlind,http://yhack2017.devpost.com/submissions/84237-newsblind,"NewsBlind

Summary

Machine-learning powered fake news detector with a user-oriented web interface that includes both a concrete judgment on the article, detailed and rigorous summary, and a crowdsourced poll for users to vote on whether or not they agree on the application's judgment.

Our Hack

We created a multi-layered algorithm which uses machine learning, sentiment analysis, and other facets of natural language processing to holistically evaluate news articles for bias and falsehoods. We created a weighted percentage based on the results of:


Judgement of the intentions the text based on the results of a natural language processing-powered linear support vector machine (a machine learning algorithm) trained on thousands of real and fake articles acquired via a web crawler
Response of polarity and subjectivity-based sentiment analysis of the article headline and text
Judgement of a naive Bayesian classifier (a machine learning algorithm) regarding the extent to which the headline aims to sway the reader
Grammar analysis of article text
Cross-Referencing an established database of questionable, problematic, and trustworthy top-level domains and secondary domains.


Then, we created an interface using web technologies such as Flask, Ajax, and HTML/CSS/Javascript to create an in-browser experience which, in response to a user's input, runs the algorithm and returns a detailed summary of the article's performance in terms of the metrics. In addition to this more detailed information, we also provide a comprehensive percentage and progress bar to provide a more direct summary. Furthermore, we have also included a poll for users to comment on whether or not they agree with the machine's judgment: doing so allows for more open communication and democracy, as we do not intend on censoring any information. Instead, our goal is to increase the extent to which citizens understand the sources and elements (and any related biases or falsehoods) associated with consuming media.

In the future, we would love host this project on the internet completely such that users can access it online directly. From there, we could explore options such as browser and social media extensions. It would also be an exciting data science project to incorporate the crowdsourced poll results in the algorithm results.

About Us

We are NewsBlind, a team of engineers from Olin College of Engineering. Our product is a web app that takes URLs inputted by the user and determines whether the article in question contains false, biased, and/or questionable information. 

Our interconnectedness on the web and the lightning speed at which data is shared creates an environment that makes it very easy for falsehoods and misinformation to spread. Easy access to accurate information on the internet is crucial to the continued success of advancing technology and the success of the human race as a whole. While it is of the utmost importance to minimize the pertinence of fake news, we firmly believe that outright censorship of information is wrong. Our product is aimed at informing viewers about the accuracy of the media they consume, but ultimately leaves the decision up to them whether they wish to view and/or share the article or not.

How to Install

All of the dependencies for this application exist in the requirements.txt file in this particular directory. To install them, you'll first need python 2.7. Then, if you don't have pip, install pip:
sudo apt-get install python-pip

Then, you can install the requirements with
pip install -r requirements.txt

How to Run

To run this program, clone this repository. To interface with the application, you will need to start the Flask server and open up the HTML pages in your favorite 
Then, navigate to the top directory and run
cd layers
python detect_prod.py

Then, open up the index.html page located in the /web directory. You can do this from the graphic file structure user interface, or you can use terminal. From terminal, navigate again to the top of the project and run
cd web
[browser] index.html

From there, the application should work like a usual web page. 
",,https://github.com/anushadatar/goons_getem_gotem_good,https://s3.amazonaws.com/challengepost/zip_files/production/28275/zip_files/goons_getem_gotem_good-master_%281%29.zip,"Best Civic Hack, Poynter Fellowship: Best Hack to Counter Fake News","html, python, javascript, css, scikit-learn, ajax, europeana",anushadatar,Franklin W. Olin College of Engineering,1,jzerez
How Am I Feeling?,http://yhack2017.devpost.com/submissions/84238-how-am-i-feeling,"https://github.com/GreyAlien502/how_am_i_feeling

Inspiration

What it does

Browser extension that analyzes sentiment via Google Cloud NLP API and visualizes recent sentiment recordings.

How we built it

Python web service to access Google Cloud API. 
JavaScript for browser extension. 

Challenges we ran into

Setting up the Google Cloud NLP API.

Communicating between the background and popup browser extension scripts.

Lack of wifi.

Accomplishments that we're proud of

What we learned

What's next for How Am I Feeling?
",,,,Google: Best Google Cloud Platform Hack,"javascript, google-cloud-natural-language-api, python",ewilliams96,SUNY Stony Brook,0
AR Space Invaders,http://yhack2017.devpost.com/submissions/84239-ar-space-invaders,"Inspiration

TODO more here

What it does

How I built it

Challenges I ran into

Accomplishments that I'm proud of

What I learned

What's next for AR Space Invaders
",https://youtu.be/fjnFMnbOYV0,https://github.com/michael-gillett/ar-spaceinvaders,,"","react-native, arkit",michael-gillett,"",0
ChildSafe,http://yhack2017.devpost.com/submissions/84240-childsafe,"Inspiration

Children as young as 7 are getting their own smartphones and bringing their phones along with them wherever they go, to school, home, or a friend’s house. We wanted to utilize the background location-tracking abilities of smartphones to allow busy families to stay connected and safe.

What it does

ChildSafe is a mobile application that informs parents on whether their children are exposed to danger. After logging in with Facebook, children and parents will have their respective user flow to sign up and match with each other. After confirming their identity, ChildSafe would let parents mark safe areas for their children. If their children are outside of these safe zones, then we send notifications to the parent, so that the parent is aware of these changes in the child’s location. With the high number of abductions going on in recent years, we hope this product will improve safety and reduce kidnapping rates among teenagers and younger children. With ChildSafe, parents can rest assured that their children are protected even when they are alone. 

How we built it

The app is built with Swift on Xcode. We integrated Facebook login, Google Firebase, and Apple Map API. We prototyped our mockups on Sketch, tinkered with React-Native and node.js, and rapidly build a mobile app with Swift. To provide the most helpful information, we accurately stored the data in real time database, tracked the children, and pushed out notifications when any danger is identified.

Challenges we ran into

We originally built the app with react native but ended up with a lot of outdated and buggy API documentations. After spending a day and a half debugging, we eventually pivoted the iOS app to Swift on Saturday evening. While we have planned the tech stack and design, we didn’t expect to run into such difficulties. Fortunately, Swift, Firebase, and Map APIs worked out smoothly. 

Given that we had to pivot so late into the hackathon, we wanted to go with a simple design that consisted of only the key features of what we imagined our product would end up doing. Simple designs also reduce the cognitive overhead on our users and increase the rate of successful onboarding among our potential users. 
Aesthetically, simple screens of green hues made up the overall design of the app. Green, the color of life, is perfect for ChildSafe as young life is what we hope to protect with this product and our logo, showcasing a mother embracing his little child, reflects that as well.

Accomplishments that we're proud of

We are proud of implementing the Facebook login configuration, Map API and geo filtering, and sending notifications to update the children’s status. In addition to building the technical stack, we are proud of utilizing technology to create social good (also, pull together a working app in the last batch of Yhack). 

What we learned

In the process of building this application, we learned how to integrate Facebook, Google, and Apple APIs. First off, we learned to create a minimum viable product and relentlessly iterate on it. From specing out the prototypes to building out the iOS, we have enabled searching, filtering, and notifying with interactive design. Furthermore, we learned from experienced mentors to build with Swift, Objective-C, React native when we get stuck. From ideation to fruition, we learned to design a meaningful product that provides an essential information to all human beings.  

What's next for ChildSafe


Develop a reply from the children’s side to alerts, so that we can decrease false alarm. 
Suggest a list of places the family generally frequent when adding the geo filters. 
Integrate the app with close friends and family who are designated as “safe people” and show the child’s company to give the parents an additional sense of security when they are not with the child. 

",https://www.youtube.com/watch?v=OXxhTLH54JY&feature=youtu.be,https://github.com/Ripnrip/ChildSafe,,"Facebook: Best use of a Facebook API or SDK, Google: Best Google Cloud Platform Hack","swift, ios, react-native, firebase, facebook-login-api, apple-push-notifications, apple-map, sketch",charlenewang,Brown University,3,theklam,maleryy,albert_dong
AdvertisAR,http://yhack2017.devpost.com/submissions/84241-advertisar,"Inspiration

It came from an idea, the fidget spinners.

What it does

A fun way to advertise your company or a logo.

How we built it

We used augmented reality to turn regular logos into some wow factor and fun.

Challenges we ran into

Learning how to use AR properly,
WIFI
A lot of little bugs 

Accomplishments that we're proud of

We're proud of having made something with Augmented Reality, as small scale as it was. It was lots of fun to learn how to use Unity with Augmented Reality.

What we learned

We learned how to use vuforia which is a AR api for android which allows us to find features in pictures and use them for AR. We learned how to use Unity in a more deepenly fashion. 

What's next for AdvertisAR

We want to make AdvertisAr able to catch anything to make into AR.
",,,,Best Finance Hack,"unity, c#, vuforia, paint3d",Keverdose,"Concordia University, Montreal, Concordia University",2,kemoua,jaimeandreshernandez
SharkFin,http://yhack2017.devpost.com/submissions/84242-sharkfin,"Inspiration

What it does

Sharkfin helps people analyze and improve their personal spending habits.

How we built it

Challenges we ran into

Accomplishments that we're proud of

What we learned

What's next for SharkFin
",,https://github.com/sardinachanx/yhack2017,,"Viacom: Best Use of the Viacom DataPoint Javascript Utility , JPMorgan Chase: Finance of the Future, Best Finance Hack, Intuit: College Student Prosperity Case","viacom-datapoint-api, node.js, javascript, express.js",Rjected,"University of Massachusetts Amherst, Massachusetts Institute of Technology",2,sharon-lin,sardinachanx
Envision,http://yhack2017.devpost.com/submissions/84243-envision,"Inspiration

We noticed there was more data on the internet now than there has ever been before. Thus we decided to make use of the information to build an algorithm by analyzing hundreds of companies and its statistics to build a predictive model. 

What it does

Envision uses mathematical algorithms and the power of artificial intelligence to predict the level of success through regression analysis. It uses dozens of pieces of data from VC backers to natural language processed news articles from a wide range of sources to predict commercial success. 

Challenges we ran into

The main challenge we ran into was with accessing data sources. The code involving that was very tricky and we got confused a lot. We often had to switch gears and try different ways to get past an issue. Also, we initially planned on making the application a chrome extension but sadly, there were many small intricacies that we couldn’t solve, neither could the mentors :( . 

Accomplishments that we're proud of

We are proud that our application was able to accurately predict the growth of a company by extracting public data from variety of sources. We were able to manually input data of the early stages of today's big tech companies such as Snapchat, and accurately predict that there will be massive growth in relation to other startups in the sector.

What we learned

We learned a lot about advanced javascript and a bit of data science.

What's next for Envision

We noticed that this application is extremely useful for both investors and businesses who are looking to find a quick, easy way to identify promising technologies by analyzing startups in that realm. We look make it more accurate and advanced, with a more powerful model.

Rough Draft Ventures Business Plan
",,https://github.com/mehulajith/yhack2017,,"Informa: Best Hot Technology Predictor, Best Finance Hack, Rough Draft Ventures: Most Entrepreneurial Hack","web-dev, javascript, ai",mehulajith,WS,1,muramsudheer
Sendiment,http://yhack2017.devpost.com/submissions/84244-sendiment,"Website

www.nupek.com/sendiment

Inspiration

Miruim and JWT challenge inspired us to create a messenger application that is able to gauge emotion in efforts of creating a clear, stress free conversation between two individuals. 

What it does

We created a social media platform that goes beyond any social media platform available. Not only can you send text messages to your friends, but also have your emotions conveyed clearly. The app uses tone and sentiment analysis on messages to help you determine the emotion of the user. We hope the emotion analysis will help reduce miscommunication between people.

How I built it

We built a social media application on the foundations of Google Firebase. This allows us to create a real-time database, and securely handle login authentication. Then, we implemented a speech-to-text feature that allows the user to speak and record text messages, which are then sent to the receiving user. We used the IBM Watson Tone Analyzer to analyze audio and text files to accurately calculate emotion to convey to the user. 

Challenges I ran into

Setting up the API
It may sound easy but implementing an API in android studio is a huge challenge in itself. 

Figuring out what to do with the API
Brainstorming an idea was one of the biggest challenge. Making something that fits the challenge at the same time is useful to the users and have some potential in the future.   

Accomplishments that I'm proud of

Creating a successful social media platform that analyzes emotion making communicating easier. 

What I learned


Firebase 
Watson API
-More Experience with Android Studio
Implementing Voice to Text on Android Studio


What's next for Sendiment

Larger Network. Better Design. 
",,http://www.nupek.com/sendiment,,"Mirum and JWT: Can a Computer Hear How You Feel? Seeing the emotion in IM and voice, Rough Draft Ventures: Most Entrepreneurial Hack, Google: Best Google Cloud Platform Hack","firebase, ibm-watson, java, android-studio, github, google-web-speech-api",nsadeeshkuma,University of Massachusetts Amherst,2,sarim987,SiddharthaSrivastava
Facebook Journey,http://yhack2017.devpost.com/submissions/84245-facebook-journey,"Inspiration

Do you ever take the effort to plan time to spend with your friends, only to reach disagreement after disagreement that ends in a stagnant halt of indecision? Facebook Journey is a new, fun way to plan adventures, bringing the world closer to you and you closer to the world.

What is Facebook Journey?

Think of Facebook Journey like a simple turn-based game; every player gets one turn, and at each turn, one player contributes to the journey. Once you and your friends create a Journey, each player will pick a location on the map and easily choose restaurants, nightlife, sightseeing, and other activities that reside around your marker. Once an activity is selected, The next player chooses his/her activity and location, and a path is drawn between your markers. As the game progresses, the activities that you and your friends picked forms a path to explore. Once all the turns are over, you and your friends can see a summary of your planned Journey.

Facebook Journey is much more than a simple event planning application, as it has its own social platforms where you can see you and your friend's recent trips and favorite activities.  Our goal is to ease and encourage people to build and maintain community with both their friends and the world. Facebook Journey opens the world up to its users and opens its users to new worlds. With each new location comes a new path, a new adventure, a new Journey.

Further Details:

Facebook Journey was developed using Facebook’s own React-Native mobile platform and Google’s Firebase data storage. The Facebook Journey application takes advantage of many different features of the Facebook Graph API, including Authentication, Places Search, and Friends.  Future work for this application includes integration with Facebook Messenger and using previous Facebook Journey data to provide suggestions for future trips.

Challenges we ran into

We ran into balancing design and development
Facebook’s API is not super friendly with HTTP requests, and prefers you to use the Graph API. We had a lot of difficulty setting this up even with the help of the engineers.

Accomplishments that we're proud of

Our app is multi-platform (iOS and Android)
We built some reusable components
We design an app with beautiful  UI
Our app works!
No merge conflicts

What we learned

React Native
Small firebase limits
Advanced CSS
Layers of design and their limitations for a MVP.
Flattening tree structures on firebase
Using google polyline to draw paths
Bootstrap 4 Beta
Facebook open source library

What's next for Facebook Journey

Messaging integration
Using data to predict/suggest trips
Google Sign-in
Uber, Taxi, & Lyft transportation suggestions
Integration with FaceBook!
",,,,"MLH Best Domain Name registered with Domain.com, Facebook: Best use of a Facebook API or SDK, Google: Best Google Cloud Platform Hack","html5, css3, javascript, firebase, react, facebook-graph, google-maps, api, react-native",zeusofcs,"Ohio University, St. Johns University, New York University",3,byliuyang11,JeaneC,chrlee
Magic Client Manager,http://yhack2017.devpost.com/submissions/84246-magic-client-manager,"MAGIC CLIENT MANAGER

User-friendly web app uses data analytics and machine learning to dig up demographics and predict insurance premiums



Inspiration

While our interest originally stemmed from the desire to pick up basic machine learning and data analysis techniques, we loved the interdisciplinary aspect of the ViTech insurance hack, which emphasized both creating a user interface and analyzing the data itself and presenting it successfully on the UI.

It really challenged us to work with linking our application to backend since the challenge was so reliant on dynamically provided data. 

The web app is simple and user-friendly because we want to help you! Whether ""you"" are a company executive or a prospective client, we want you to clearly understand and visualize data. Our application is minimalistic and has massive potential for growth.

What It Does

Magic Client Manager is an online tool designed with the user experience in mind. We took the dataset provided by Vitech and analyzed it using various techniques, including but not limited to regressions and dimensionality reduction.

Clients can filter through and find users in the database by name, address, city, state, and/or several other fields who meet those parameters.
We created a multi-linear model in R which we implemented in Angular as an interactive Insurance Premium Predictor.
 We have also integrated beautiful visualizations of data analytics to paint a comprehensive big picture overview of 1.4 million data points.

How We Built It

The user interface was constructed using Angular4 with Firebase acting as our backend. We used R to create the predictive models used in our UI to estimate premium rates. Python and Matlab were used to analyze the Vitech dataset and libraries were imported into Python in order to create the visualizations. 

Challenges


This was one of our first times successfully connecting Angular4 to Firebase.
Dealing with outdated versions of Angular and the various modules I worked with since the community is so dynamic.
Acquiring the data from SOLR was really difficult. The wifi was really slow and it took several minutes to load 10 rows into the Jupyter notebook.
Under unfortunate circumstances, one of our teammates arrived 12 hours late.
The majority of us had practically no experience with data analysis and machine learning. It was hard though we learned a lot!
Everyone was proficient in a different programming language, so we have an odd selection of programs and trying to sync up was a little difficult.


Accomplishments We're Proud Of


Learning Angular4 and Firebase!
We learned a lot and we had relatively accurate predictions regarding the data we were able to query from SOLR.
Our app works pretty well!
Tapped into multiple fields (interdisciplinary!)


What We Learned


Brushing up on Angular4 and dealing with dependencies errors between Angular4, Materials2, and Firebase 5.0 proved to be a fairly difficult challenge.
Working with big data was especially difficult, especially because the wifi was slow during peak times of the Hackathon, making data updating almost impossible.
How to use SOLR, Firebase, and interesting and useful Python libraries
A variety of machine learning techniques; there are so many and all of them have different pros and cons.
Cleaning up and working with massive data
For two of us, it was our second hackathon - so we're finally learning how to submit a hack, which we accidentally failed to submit the first time haha
For a majority of us, it was our first time working with someone we had never met before.


What's Next


Integrate more advanced machine learning and prediction models. 
Feeding in more data into Firebase. 
Smooth out any corner cases that we might've missed

",,,https://s3.amazonaws.com/challengepost/zip_files/production/28283/zip_files/copy.zip,"Vitech: Life Insurance Quoting Challenge, Rough Draft Ventures: Most Entrepreneurial Hack, Google: Best Google Cloud Platform Hack","angular4, html, css, python, r, matlab, firebase",RandomExpress,University of California - San Diego,2,ljenn,VivianVesga
Jade,http://yhack2017.devpost.com/submissions/84247-jade,"Inspiration

As students, we find that we spend money in several areas, from burgers to bus tickets. Recently, each of us realized that we had spent a lot of money over our break. We also noticed that each of us spent on a variety of items. So we started thinking of ways we could save more and spend less. That's how we came up with Jade.

What it does

Jade is a money tracker tailored towards college students. The website compares your spending to other students, and it makes you aware of the amount of money you spend monthly on different categories of commodities. Furthermore, it motivates you to spend less by creating a competitive spirit.

How we built it

We created a web app by integrating html, css, java and PHP. The back-end was created using java and linked to the website using PHP. The java code stores and analyses all data and the website portrays it in an interactive environment.

Challenges we ran into

Creating a full stack website was a challenge as none of us had prior experience in PHP or web development. In Java we found using streams complex as we had to read and write data simultaneously from different sources. 

Accomplishments that we're proud of

As none of us had experience in full stack web development. We are proud that we were able to learn and apply the required knowledge.

What we learned

We learned how to setup a server using Google Cloud Platform, how to create websites, and how to link front end to back end.

What's next for Jade

Jade may be more successful with a companion app that makes saving money more competitive and motivates students to save more through social competition. An automated data entry process would make using Jade much simpler and faster.
",,,https://s3.amazonaws.com/challengepost/zip_files/production/28279/zip_files/YHack_%283%29.zip,"MLH Best Domain Name registered with Domain.com, Cloudflare: Put Cloudflare in front of your hackathon project, make a Cloudflare App, Best Finance Hack, Best Education Hack, Google: Best Google Cloud Platform Hack, Intuit: College Student Prosperity Case","java, html, css, php",goyalkunal92,University of Massachusetts Amherst,2,larora,sspathak
Dank Meme Fetcher,http://yhack2017.devpost.com/submissions/84248-dank-meme-fetcher,"I like dank memes. If you like dank memes, cool. Try my web app out, you can see some great dank memes pop up. I'm planning on adding some NSFW and trigger warning filters in the future. I learned that anything is possible with memes and stuff. The power of no-sleep and memes can surprisingly get you somewhere down the road.
",,,,"","css, html, jquery, javascript",michaelchang64,Yale University,0
Rural Net,http://yhack2017.devpost.com/submissions/84249-rural-net,"Rural Network

Created by The Conjurers

Rural Network is a shopping app that utilizes the power of machine learning to streamline the 
shopping experience for consumers, while reducing costs for businesses.

First of all, imagine if you are running low on a daily necessity, you can simply snap a picture
of the product that you need and order delivery from the store or add it to your shopping list.
Also, this app reduces the need for consumers to stand in line to checkout and makes payment more convenient.
Furthermore, this app makes self-checkout more affordable for small businesses as eliminates the need for self-checkout machines and the extra space for putting them in stores. 

We trained our convolutional network to recognize various grocery items. 
",,https://github.com/AndreyBorisKhesin/Conjurers,,"Best Finance Hack, Rough Draft Ventures: Most Entrepreneurial Hack","objective-c, java, c++, javascript, c#, typescript, jupyter-notebook, html, python, qml, css, c",AndreyBorisKhesin,University of Toronto,2,wintermelons,christinekc
JetBlue Vacation Destination Deal Finder,http://yhack2017.devpost.com/submissions/84250-jetblue-vacation-destination-deal-finder,"JetBlue Lowest Fares and Deals

Machine learning predictor around lowest fares using JetBlue deals data.

Description: Given an origin, departure date, and return date, predicts the flight locations with the best JetBlue deals (i.e. lowest fare outliers on that route) using pre-trained Tensorflow models based on past JetBlue deals. Web application made using Flask.

Instructions:


Clone repository.
Navigate to repository in terminal.
Run 'python main.py'.
Go to localhost:5000. Fill out the form for origin, departure date, and return date.
Find your best deals!!! Go to the JetBlue website to see price. According to Zhengdong's calculations, program will return a cheap flight 87.18% of the time.


Made by Zhengdong Wang and Stanley Yu at YHack 2017!
",,https://github.com/stanley98yu/yhack17ssp-jetblueml,,JetBlue: Best Use of JetBlue Low Fares and Deals Data,"python, html, flask, tensorflow, machine-learning",stanley98yu,"Columbia University in the City of New York, Yale University",1,fred451
MemeGen,http://yhack2017.devpost.com/submissions/84251-memegen,"Have you ever wanted to generate a meme, but didn't know what meme format to use? Have you wanted to be an edgelord but didn't have the appropriate edge level? Using MemeGen can make these tasks easier. The concept is quite simple: give the AI some text, and generated will be a dankerino meme.  

We've trained neural nets on the most popular memes on the internet, trying to discern what kind of text best goes with each meme. The output of that product is MemeGen which allows you to leverage this collective meme knowledge to make better memes for yourself.
",,https://github.com/vontell/LieGAN,,"","keras, python, opencv",cooperpellaton,"Georgia Institute of Technology - Main Campus, Massachusetts Institute of Technology",1,vontell
Student Prosperity,http://yhack2017.devpost.com/submissions/84252-student-prosperity,"Inspiration

Students often find trouble balancing the four aspects of student life (grades, nutrition, sleep and extra-curriculars)

What it does

Originally, the student would record his sleep schedule, his grades and the food he eats and time spent on extra-curriculars. Then it would suggest to the student how to maximize his grades all the while staying happy and healthy. The concept was to have daily, weekly and monthly reviews. However, the actual program only presents a blank main menu upon opening. Every button opens a new window.

How I built it

Using the library graphics.py, I managed to create a GUI

Challenges I ran into

Finding a while loop that would permit the user to click on a button were they to click on a blank spot the first time.

Accomplishments that I'm proud of

I have created a GUI for the first time. With working buttons.

What I learned

I have learned about creating GUIs, how to determine if a button has been clicked on and how to creatively format strings in order to extract data.

What's next for Student Prosperity

I hope that it may one day be an android app where the data capable of being collected automatically or by smart watch is collected.
",,https://github.com/isombeg/YHack2017,,Intuit: College Student Prosperity Case,"python, graphics.py",Guy-JacquesIsombe,McMaster University,0
NewsCheck,http://yhack2017.devpost.com/submissions/84253-newscheck,"Inspiration

2017 is the year of fake news. Although fake news is not a new phenomenon, extremely biased and false information has found a safe haven to grow and thrive in this age of interconnected, web-based global community. Anyone with a laptop can now create false content and anyone with a smartphone can now share it. Recent developments in politics have brought fake news into the limelight. Some politicians are deliberately blurring the line between real news and fake news by denouncing real news as fake and sharing fake news as real.

The problem is, fake news doesn’t always come in the form of full-fledged conspiracy websites like InfoWars or Occupy Democrats. It disguises itself and creeps into our search results and news feeds with seemingly real names like “Boston Tribune” and “World True News.” Fake news occupies the special niche of allowing people to read the stories they wish they could read. The incognito fake news and its special niche in human emotion often make it more shared and clicked on than real news. For example, the fake “Boston Tribune” is more popular than the rea Yahoo News.

Humans are emotional beings and thus, we often have trouble deciphering fake news especially when we agree with the story. Hence, we need a way to independently determine the veracity of fake news.

What it does

NewsCheck is a web extension that analyzes, in real-time, any links to news articles present on a user’s webpage. For example, such links include those returned by Google search results, or social media links shared by others. NewsCheck’s algorithm analyzes the articles of these links based on their domain, title, and content, and if any them are deemed to be likely biased or fake, they are flagged out to the user. This flag is a color-coded message based on statistical confidence intervals, displayed beside these link in question to alert the user of the possibility of fake news. For instance, a message could read Warning: Textual Analysis Suggests Likely Bias/Rumors.

NewsCheck thereby allows users to be more discerning towards articles that are likely to be fake news, by priming them with the possibility of it being fake news even before they start reading it (if they then choose to do so). This minimizes the risk of a fake news article being able to play to the users’ emotions to convince them of its truth, as compared to a situation whereby users read the article without any conscious awareness that it could be fake news.

How we built it

NewsCheck was developed upon an existing open-source project, B.S. Detector. B.S. Detector is a currently available browser extension that searches all links on a given webpage for references to unreliable sources, where “unreliable” is determined by checking against a manually pre-compiled list of domains that are deemed to be unreliable or otherwise questionable.

Piggybacking off the Javascript used in B.S. Detector, we captured all links on a given webpage, and piped these links to our local Python HTTP server, where we conducted two separate strands of analysis (written in Python).

The first strand of analysis involves applying Natural Language Processing techniques to the article’s title. By converting the titles as textual strings into a Document-Term Matrix, NewsCheck projects the words onto a 30-dimensional vector space and compares an article’s vectors to that of a trained data set. This gives a likelihood that an article is fake news, based on the wording of its title (e.g. whether it contains emotionally charged words).

The second strand of analysis involves a regression analysis on various contextual parameters of the article’s contents, such as the average sentence length, the average word length, and the number of exclamation points and question marks used in the article. By comparing an articles’ parameters to a regression model trained on about 1000 each of real and fake news, this analysis gives us an independent likelihood that an article is fake news, based on the contextual parameters of its contents.

After combining the likelihoods of the article being fake news from domain analysis (from B.S. Detector), title analysis, and content analysis, we again piggyback the open-source Javascript to display color-coded messages to the user beside the links.

Challenges we ran into

The main challenge in creating NewsCheck was the difficulty in obtaining a large and clean data set to train and test our model via Natural Language Processing techniques. In particular, we were able to find a large data set of news article titles for 2015-2016 from Kaggle, but we were unable to find a similar data set for the contents of the articles.

Further, because articles from different domains were typically formatted differently and sometimes encoded differently (in HTML), it was a challenge to scrape clean data to use as our data set for regression analysis on contextual parameters of the article’s contents. Often, we had to make domain-specific tweaks to our Python code for scraping article contents, in order to obtain the cleanest data possible, which was time consuming.

Accomplishments that we’re proud of

We’re proud of the fact that we have managed to create a seamless data flow between the front-end user interface and the back-end data processing, with a turnaround time of only a few seconds. Considering that NewsCheck is doing intensive regression analysis of articles in the back-end, being able to seamlessly pipe the data between the front-end and the back-end via a Python HTTP server, such that color-coded messages can be displayed to the user in real-time, is a major accomplishment that we are proud of.

What we learned

It is somewhat surprising to us, that NewsCheck is able to perform so well in terms of identifying fake news from real news, even though it only considers the wording of its title and contextual parameters of its content. For example, for the regression analysis of the Natural Language Processing of article’s titles, our model had a training accuracy of 96.8% and a testing accuracy of 92.6%.

That is, we learnt that even though fake news is prevalent on the web in this age, it is not difficult to discern fake news from real news, as long as we keep a critical eye. The success of NewsCheck indicates that the differences between fake news and real news extends far beyond just the factual content of the article, into the writing style and linguistic parameters of the article.

What’s next for NewsCheck

First, the obvious step for an improvement for NewsCheck would be to increase the size of the data set that we are training it on, and the number of contextual parameters that we are considering, in order to derive a better regression model and get higher confidence intervals when we return the likelihood of an article being fake news to users.

However, beyond this, a more crucial and fundamental flaw of our current version of NewsCheck, is that it is still unable to check for the truth of specific facts in the article (literal fact-checking). Therefore, anyone who knows the specific back-end regression model of NewsCheck will be able to craft a well-written but fake news article that will pass the test of NewsCheck easily.

Therefore, an important next step to improve NewsCheck (but not an easy one) would be to integrate factual analysis. That is, to allow NewsCheck to extract single pieces of factual information from articles (e.g. “UK Prime Minster Theresa May is due to meet EU Commission President Jean-Claude Juncker on Monday”), then to conduct independent online searches to verify these facts, and finally to use these verifications to re-evaluate the likelihood of an article being fake news.
",,https://github.com/AzureFractal/bs-detector,https://s3.amazonaws.com/challengepost/zip_files/production/28280/zip_files/bs-detector-dev_%281%29.zip,"Best Civic Hack, Poynter Fellowship: Best Hack to Counter Fake News, Best Education Hack","javascript, python, spacy, nltk, text2vec, sckit-learn",dawnchen,"Yale University, Massachusetts Institute of Technology",3,yongpig1,davidjiang,jautung
JuxtaFeeling,http://yhack2017.devpost.com/submissions/84254-juxtafeeling,"yhack

JuxtaFeeling is a Flask web application that visualizes the varying emotions between two different people having a conversation through our interactive graphs and probability data. By using the Vokaturi, IBM Watson, and Indicoio APIs, we were able to analyze both written text and audio clips to detect the emotions of two speakers in real-time. Acceptable file formats are .txt and .wav.  

Note: To differentiate between different speakers in written form, please include two new lines between different speakers in the .txt file.  

Here is a quick rundown of JuxtaFeeling through our slideshow: https://docs.google.com/presentation/d/1O_7CY1buPsd4_-QvMMSnkMQa9cbhAgCDZ8kVNx8aKWs/edit?usp=sharing
",,https://github.com/ylkao/yhack,,Mirum and JWT: Can a Computer Hear How You Feel? Seeing the emotion in IM and voice,"html, python, css, jupyter-notebook, flask",josephngu98,University of California - Berkeley,3,chaonorman,huangalpal,ylkao
Financial Outlier Detection System (FODS),http://yhack2017.devpost.com/submissions/84255-financial-outlier-detection-system-fods,"Inspiration

The inspiration for the project was to design a model that could detect fake loan entries hidden amongst a set of real loan entries. Also, our group was eager to design a dashboard to help see these statistics - many similar services are good at identifying outliers in data but are unfriendly to the user. We wanted businesses to look at and understand fake data immediately because its important to recognize quickly.

What it does

Our project handles back-end and front-end tasks. Specifically, on the back-end, the project uses libraries like Pandas in Python to parse input data from CSV files. Then, after creating histograms and linear regression models that detect outliers on given input, the data is passed to the front-end to display the histogram and present outliers on to the user for an easy experience.

How we built it

We built this application using Python in the back-end. We utilized Pandas for efficiently storing data in DataFrames. Then, we used Numpy and Scikit-Learn for statistical analysis. On the server side, we built the website in HTML/CSS and used Flask and Django to handle events on the website and interaction with other parts of the code. This involved retrieving taking a CSV file from the user, parsing it into a String, running our back-end model, and displaying the results to the user.

Challenges we ran into

There were many front-end and back-end issues, but they ultimately helped us learn. On the front-end, the biggest problem was using Django with the browser to bring this experience to the user. Also, on the back-end, we found using Keras to be an issue during the start of the process, so we had to switch our frameworks mid-way.

Accomplishments that we're proud of

An accomplishment was being able to bring both sides of the development process together. Specifically, creating a UI with a back-end was a painful but rewarding experience. Also, implementing cool machine learning models that could actually find fake data was really exciting.

What we learned

One of our biggest lessons was to use libraries more effectively to tackle the problem at hand. We started creating a machine learning model by using Keras in Python, which turned out to be ineffective to implement what we needed. After much help from the mentors, we played with other libraries that made it easier to implement linear regression, for example.

What's next for Financial Outlier Detection System (FODS)

Eventually, we aim to use a sophisticated statistical tools to analyze the data. For example, a Random Forrest Tree could have been used to identify key characteristics of data, helping us decide our linear regression models before building them. Also, one cool idea is to search for linearly dependent columns in data. They would help find outliers and eliminate trivial or useless variables in new data quickly.
",,https://github.com/Matthew-Chiang/Hack_Yale,,"JPMorgan Chase: Finance of the Future, Best Finance Hack","python, javascript, html5, css3, django, europeana",roshan2M,University of Waterloo,1,Matthew-Chiang
SBU Course Catcher,http://yhack2017.devpost.com/submissions/84256-sbu-course-catcher,"The Issue

At SBU, classes students want to sign up for fill up quick. If this happens, students have no choice but to constantly refresh the course status page, in hopes they happen to be the first to notice an open seat and can snag it first.

The solution

Frustrated with this situation, I created a chatbot that works over Facebook Messenger and SMS to automate this process. Students message it the five digit course code of the course they want to take, and it will check the status of the class every 5 minutes. As soon as it notices a seat is open, it will message the student so they can be the first to sign up.

This will greatly reduce the amount of anxiety for students in the course registration process as they don't have to worry about missing out on a class simply because they weren't looking at the registration page at the right time.
",,https://www.messenger.com/t/2035574953390785,,"Facebook: Best use of a Facebook API or SDK, Intuit: College Student Prosperity Case","python, flask, sqlite, facebook-messenger-api, twilio",shaansheikh,"",0
Sorteria,http://yhack2017.devpost.com/submissions/84257-sorteria,"As the technology of the mobile phone industry grows the capabilities of mobile phones as medical diagnostic tools (dubbed mhealth by some professionals) and demands the attention of developers. We at Soteria noticed an area where we saw significant room for improvement in this sector. That being the fact that a very large portion of the world doesn't have access to universal healthcare, so a free and open source app to diagnose an illness and perhaps suggest prognosis' according to SCAT III international standards. 

Soteria is an app designed around the principals of diagnostics. It uses several diagnostic techniques ranging from a few simple surveys to distinguish the circumstances of your injury and how likely it is that someone could have suffered traumatic brain damage in that situation. It then moves into the main diagnostic technique; a pupil dilation test. Most traumatic brain injuries cause severe damage to the link between the brain and the eye, known as the optic nerve which inhibits normal function of the eye. This is where Soteria comes in. Soteria uses the advanced optical sensors in every phone to measure the dilation of the the eye. In a normal human eye, the pupil will shrink in response to light, while an individual having had a traumatic injury, thus damaging the optic nerve loses this ability and there is very little to no response of the pupil to light. 

Soteria was built in Android Studio utilizing the OpenCV computer vision library to complete its primary function. The app consists of several areas that can be broken down into questionnaire protocol, pupil screening and final diagnostics. 

Integration of the phone camera into the proof of concept pupil dilation program was a significant hurdle for the team. The lead designer of this integration found the connection between the two programs to be unreliable and is, as of writing this document, attempting to resolve the issues.

The Soteria team consists of 4 Engineering Physics students with a whopping combined total of 0 hours of app development experience and the fact that we were able to take a biomedical engineering problem and convert it into an app that although, does not reach the design specifications initially laid out is nothing short of miraculous. 

From the experience the Soteria team had this weekend we learned that we do not have nearly enough respect for app developers. We also learned that the Ancient Greeks had a god for safety: Soteria.

Soteria has plenty of room to grow and develop into a functionally relevant, useful application. There are several design possibilities that could, in the future, be implemented to improve Soteria's functionality and are as follows, 


Design aesthetic improvements
Integration of a live feed from the camera for a direct reading of pupil dilation
Implementation of PWM (pulse width modulation) into the flash, in conjunction with 2. to provide real time measurements 
Finish the program.... 
Implementation of further applications and surveys to help aid in the diagnosis. 
Strengthening a prognosis protocol including google maps to the nearest clinics/hospitals, EMT info-graphics for how to properly handle  patients and more importantly what NOT to do
Approval by an appropriate health agency for use as an accurate diagnostic tool


DISCLAIMER: We at Soteria are not medical professionals and by no means have the right or capability to apply a proper diagnosis. We do abide by the outlines stated in the SCAT III, but WE ARE NOT MEDICAL PROFESSIONALS. We must insist that if you suspect a traumatic brain injury to head immediately to your local hospital to seek treatment by MEDICAL PROFESSIONALS.   
",,https://github.com/connorbrooks8/yhack,,Best Healthcare Hack,"java, opencv, hough-circles, android, python, xml, android-studio, maps, mobile-java-push, python-package-index",AndreasHitzler,McMaster University,3,mhoworucha,ConnorBrooks8,gudylan
Crypto-current-cy,http://yhack2017.devpost.com/submissions/84258-crypto-current-cy,"Inspiration

Cryptocurrencies are a very recent trend and very few people envisioned Bitcoin's meteoric price increase. However, there are hundreds of other cryptocurrencies some of which have shown the explosive potential of Bitcoin. Our goal was to use machine learning to detect what's the difference between a cryptocurrency that booms or busts.

What it does

Instead of just using an algorithm that uses the price of a cryptocurrency itself to predict future price our team decided it would be very valuable to track online sentiment about cryptocurrencies. We believe this will be especially effective since cryptocurrencies's platforms are entirely online as well as chatter about buying and selling the currency. Additionally, since cryptocurrencies' prices tend to be very momentum based we believe this increases the accuracy of our prediction. Using data from Reddit and news sources about the cryptocurrency along with the price history, we predict what new, unfamiliar cryptocurrencies have the most promise.

How we built it

We scraped the entirety of Reddit for mentions of cryptocurrencies with the 200 highest market caps. We then built a classifier using a decision tree algorithm with the Google Cloud Natural Language API training with Bitcoin data. 

Challenges we ran into

We got massive amounts of data from Reddit and had to build our own server and then parse through the data (500 GB) to find posts pertaining to cryptocurrencies. Even though we built a model, we did not have the computing power to run it. Additionally, none of our team members had extensive experience with machine learning.

Accomplishments that we're proud of

We are proud of the fact that none of us knew ML, but were able to teach ourselves the basics and apply them to find a model for the data.

What's next for Crypto-current-cy

For this project, we focused on cryptocurrencies since we believed that the price would be correlated relatively strongly with online news compared to other stocks or technologies. However, moving forward we would like to take this experience and think about how to apply news and social media sentiment it to predicting success of new technologies.
",,https://github.com/tianyi5309/YHack,,"Informa: Best Hot Technology Predictor, JPMorgan Chase: Finance of the Future, Google: Best Google Cloud Platform Hack","google-cloud, python, sklearn, google-cloud-nl-api, reddit, cryptocompare-api",herwigmark,"Rice University, University of Western Ontario",3,mail182,shry4ns,yixinj
Tonality,http://yhack2017.devpost.com/submissions/84259-tonality,"Tonality

We had a lot of difficulty at first trying to use the Java implementation of Google Cloud Speech before, after spending over an hour getting help from one of the Google mentors, we found it wouldn't work, and switched to python. So, we had far less time actually working than we would have liked, so we were unable to get all the functionality we wanted.
",,https://github.com/juliamcclellan/Tonality,,"Mirum and JWT: Can a Computer Hear How You Feel? Seeing the emotion in IM and voice, Google: Best Google Cloud Platform Hack",python,juliamcclellan,Brown University,0
Spectacle,http://yhack2017.devpost.com/submissions/84260-spectacle,"Inspiration

I was inspired to create this app by my aging Chinese grandparents, who are trying to learn English by reading books. I noticed them struggle with certain words and lean in squinting to read the next paragraph. I decided that I could create a better way.

What it does

Spectacle is an upgrade for your reading glasses. Through OCR, you can take a picture (or choose from your camera roll) of any text in any language, be it book, newspaper, or otherwise, and convert it into accessible text (everything is in Verdana, the most readable screen font). In addition, through English word frequency analysis, we link definitions to the harder words in the text so you can follow along. Everything is customizable: the font size, the difficulty of the text, and even the language the text translates to. Being able to switch back to native Traditional Chinese to solidify their understanding of the text is a blessing for English language learners like my grandparents. 

With this list of features:


Translate images to any language
From any language
English word difficulty detector and easy-to-access definitions
Replace hard words with easier ones inline.
Accessibility: font and font size


Spectacle can help younger people and non-native English speakers learn English vocabulary as well as help older/near-sighted people read without straining their eyes.

How I built it

Spectacle is built on top of Expo.io, a convenient framework for coding in React-native yet supporting iOS and Android alike. I decided this would be best as a mobile app because people love to read everywhere, so Expo was definitely a good choice. I used various Google Cloud ML services, including vision and NLP, to render and process the text. Additionally, I used Google Cloud Translate to translate text into other languages. For word frequencies and definitions, I combined the Words.ai API with my own algorithm to determine which words were considered ""difficult"".

Challenges I ran into

Although I had used Expo.io a little in the past, this was my first big project with the framework, so it was challenging to go through the documentation and see what React-native features were supported and what weren't. The same can be said for the Google Cloud Platform. Before this, I had only deployed a Node.js app to the Google App Engine, so getting into it and using all these APIs was definitely tough.

Accomplishments that I'm proud of

I'm proud that I got through the challenges I listed above and made a beautiful app (along with my team of course) that I will be proud to show to my grandparents. I'm also proud that I set lofty, yet realistic goals for the app and managed to meet them. Most of the time, when my team goes to a hackathon, we end up trying to add too many features and have an unfinished product by the time it's over, so I'm very glad we didn't let it happen this time.

What I learned

I learned a lot about Google Cloud Platform, Expo.io, and React-native, as well as how to put them together in (maybe not the best) but a working way.

What's next for Spectacle

I want to add the ability to save images/text for later, so that you can essentially store some reading material for later, and pull it up whenever you want. I also want to further upgrade the hard word detection algorithm that I made.
",,https://github.com/mzha/Spectacle,,"Best Civic Hack, Best Education Hack, Google: Best Google Cloud Platform Hack","expo.io, react-native, css, html5, google-cloud-vision, google-cloud-nlp, google-cloud-translate, words.ai",mzqu98,University of California - Berkeley,2,glee-,garyliangge
yTek,http://yhack2017.devpost.com/submissions/84261-ytek,"Inspiration

We were interested in ViTech’s challenge and their API as it dealt with machine learning. It didn’t seem impossible to work with even though we aren’t highly experienced programmers, but the work required with this api was complex enough to pose a large challenge. ViTech’s API was not like any other we saw, it was more of a databank for big data. This was particularly interesting as we all wanted to make a large impact which would be possible when working around big data. 

What it does

The project was designed to be a website that a prospective insurance purchaser could use. It should have included graphs and diagrams that compared different insurance factors. It also would have included machine learning to help users predict how much their insurance quote would be based off of 1.4M people’s insurance data.
The project was designed to be a website that a prospective insurance purchaser could use. It includes graphs and diagrams that compare different insurance factors. It also includes machine learning to help users predict how much their insurance quote will be based off of 1.4M people’s insurance data.

How we built it

Python, JavaScript, and JQuery would have been used for the backend, while HTML and CSS would have been used for the front end. 

Challenges we ran into

We ran into a couple unforeseen challenges while attempting to build our project.
We quickly learned that JavaScript is very challenging. It has a lot of functionality with libraries and frameworks, and can get very confusing when attempting to implement confusing algorithms, databases, and libraries. Also, time management was a big challenge. 

Accomplishments that we're proud of

It was impressive how much we coded in such a short time span. I was very lucky to have  a talented group but they knew how to implement and teach me very well. Pranav was able to create a fantastic front-end program. Dipinjit was able to carry a large bulk of the back-end program and it was definitely difficult. Kajoban did the best with being versatile. He worked on both front and back-end programs and had only learned the languages at the same time I had learned them. Jefin was able to use logic and suggest logic for the programs and worked as an overall helping hand.

What's next for yTek

Although we weren't able to finish the project that we originally set out to complete. we do have other plans for this project. We are most likely going to shift focus from this API and try to incorporate another API in order to further expand our skills on machine learning.
",,https://github.com/HotSauceToss/YHack2017,,Vitech: Life Insurance Quoting Challenge,"html5, css3, jquery, javascript, plotly, python, numpy",panchaldpranav,"McMaster University, university",3,HotSauceToss,JefinJohn,kajoban29
Cura News Reader,http://yhack2017.devpost.com/submissions/84262-cura-news-reader,"Inspiration

While a lot of people––including tech giants Google and Facebook––have been working to combat the problem of fake news using machine learning, machine learning algorithms have never truly been able to identify fake news. So rather than use machine learning, we decided to go back to the basics: human learning.

What it does

At its heart, Cura is a news-reader app just like Apple News or Feedly. However, after reading check article users have the option to swipe right to verify an article as acurate or left to mark the article as fake. The running percentage is displayed at the top of each article and if a high enough percentage of people identify an article as fake we stop displaying the article all-together.

How we built it

We used News API to populate the story feed, Mercury Reader to help display the articles, MongoDB as our data-store, and Flask/Python to write our API. The iOS app is entirely written in native Objective-C.

What we learned

Learning how to make a functional backend with MongoDB and Flask!

What's next for Cura News Reader

The big problem would be to get people on-board with the Cura News reader to yield data. Thus, before making this production-ready we'd need to improve the overall reader experience adding categories, different sources, etc like a traditional RSS reader. Moreover, the system is currently prone to abuse which could be curbed by blocking individuals whose habits differ from the norm.
",https://youtu.be/2GrvV9ho97E,https://github.com/jasonscharff/Curator,,"Poynter Fellowship: Best Hack to Counter Fake News, Best Education Hack","swift, heroku, flask, python",BaoVan,Duke University,3,jasonscharff,danosaur98,JerryZLiu
Focus,http://yhack2017.devpost.com/submissions/84263-focus,"yhack_project

Focus uses a single keyboard and a single mouse to control multiple devices depending on the orientation of the user's facial features. Using Google's Vision API and Device Networking, Focus nails down the coordinates of specific facial characteristics such as head tilt and pan and calculates offset angles to determine which device is active.  
",,https://github.com/JayDosunmu/yhack_project,,"Rough Draft Ventures: Most Entrepreneurial Hack, Best Education Hack, Google: Best Google Cloud Platform Hack, Intuit: College Student Prosperity Case","python, html, shell, google-vision-api",praneetheddu,"Georgia State University, Georgia Institute of Technology - Main Campus",3,JayDosunmu,zmeng36,Jaredcan
Reminisce.AI,http://yhack2017.devpost.com/submissions/84264-reminisce-ai,"Inspiration

Alzheimer's patients are in dire need of a way to remember important parts of their daily life. With Reminiscence.AI, these patients can now achieve the level of memory that would make them optimally productive and satisfied with daily life.

What it does

A user will be able to pull conversations with people and pull those same conversations at a later time when needed to help them remember context in a current conversation. Essentially, their memories are stored in text format and pulled from a database when they need help remembering them.

How I built it

We used XCode to develop the iOS application and Flask to create the backend of the application, and utilized NLP inside the iOS application.

Challenges I ran into

We ran into challenges developing the Android app due to the ineffectiveness of many Android speech-to-text API's.

Accomplishments that I'm proud of

We were proud of our iOS application because it effectively leveraged NLP libraries and our Flask backend to accurately recall memories based on context

What I learned

We learned how to work with natural language processing, deploy a backend in python and Flask, and develop a front end in iOS

What's next for Reminisce.AI

In the future, we wish to integrate Reminisce.AI with social media in order to get the Alzheimer patients friends and other social media content to display profiles of their loved ones in a simple and organized manner.
",,https://github.com/jackboyce/YHackApp,,"Best Civic Hack, Best Healthcare Hack","swift, android, flask, python, natural-language-processing, sql",shardoolpathak,"",0
eyeAware,http://yhack2017.devpost.com/submissions/84265-eyeaware,"Inspiration

We have a classmate who is visually impaired. Although he is an intelligent student, he occasionally struggles to complete certain tasks (identifying objects).  We had hoped to build him a device that would enable him to be more independent.

What it does

This application allows the user to use voice commands to take pictures on their phone.  The pictures are then run through a trained neural network, which identifies what is in the picture. The output describes what was captured in the photo through speech.  It is able to identify objects, and text.

How we built it

We utilized various Google cloud APIs. We use the speech-to-text API to get the users requests, natural language processing to figure out what they’re asking and image recognition to observe the users surroundings for them. 

Challenges we ran into

1. 
One of the technical issues we ran into was trying to continuously accept the users voice commands. 

2.
We had issues integrating various APIs together on Android.

Accomplishments that we're proud of


Three of our group members had to learn Android app development over the course of 36 hours.
How to incorporate machine learning onto mobile devices.
How to send API requests with Android studio


What we learned

Over the course of 36 hours, our group became adept at Android app development.  We also learned how to utilize Google's Natural Language Processing service, as well as Vision API.  Other than that, we also learned how to work with the drivers on various smartphones.

What's next for eyeAware


Integrate other hardware so it’s less bulky. 
Improve quality of voice recognition, image recognition, language processing
Introduce more functionality such as giving the time, giving directions, etc

",,https://github.com/kumailn/yHack,,"Best Civic Hack, Best Healthcare Hack, Rough Draft Ventures: Most Entrepreneurial Hack, Best Education Hack, Google: Best Google Cloud Platform Hack","android, android-studio, samsung-gear, java, mobile",looduj,McMaster University,3,shahs1,kumailn,Gabriel-Gebril
InFurno,http://yhack2017.devpost.com/submissions/84266-infurno,"Inspiration

It's really hard to buy furniture because it is almost impossible to properly estimate the size of it in relation to other furniture in the room. Additionally, it is difficult to visualize how it will fit with the decor already in the house. 

What it does

Our solution uses augmented reality to facilitate the visualization of a piece furniture in the room you are currently living in.  

How We built it

We used react-native and Viro Media, we made a multi-platform mobile application (iOS and Android) ensuring that we reach the widest population of people that we can. 

Challenges We ran into

Augmented Reality API was complicated to work with, especially when it was a learning experience for all team members on how to use React Native and integrate with Viro Media. 

Accomplishments that We're proud of

It worked! We are extremely proud of the control the user has with the furniture -- rotating, and flipping through different styles of the same furniture. We are also proud of integrating a regular react-native app with Viro Media, successfully creating an augmented reality app with its on personal menu. 

What We learned

We learned React-Native much more in depth, and learned how to develop a product from start to finish (from idea creation to completion). 

What's next for InFurno

Greater control for the user would be ideal, so that they can put more than one furniture on the augmented reality screen at the same time, and maneuver them with the same dexterity. Additionally, we would focus more on the User Interface, to provide ease of access for the potential home users. 
",,https://github.com/navinramsaroop/ARFurniture,,"Stanley Black & Decker: Storage Solutions Augmented Reality, Facebook: Best use of a Facebook API or SDK",javascript,navinramsaroop,"Cornell University, University of California - Berkeley, New York University",3,CandaceChiang,VeenaArv,vt228
FortiFlex,http://yhack2017.devpost.com/submissions/84267-fortiflex,"Inspiration

One of our team members, Ahmed subluxated his shoulder and weakened his rotator cuff muscles severely in a basketball injury. Physiotherapy was difficult to make time for with school and there were few resources online to help. This inspired us to create a healthcare hack that targets physiotherapy and treatment for any afflicted patients.  

What it does

Our hack uses the technology of the Myo Armband to sense micro-movements in muscles and their spatial location relative to the body. The high sensitivity permits detection and distinction of any movements using the arm, hands, and fingers. A patient would take a diagnostics test using the armband and judging by their results, they would be assigned a strengthening and treatment routine specific to them. Their results would be tracked and stored in FireBase's database to see their progress.

How we built it

Hacking the Myo Armband gave us several javascript functions associated with each type of movement. This was harnessed and coded to recognize the specific exercises we would want a patient to perform and how well they performed them. We used html and css to form the front end of our web app and used Flask and FireBase to launch our site and store/retrieve data. 

Challenges we ran into

Part of using the Myo Armband came with the difficulty of retrieving signal information. This is because the Myo Armband offered a plethora of functions that provided different variable types worth of data. Eventually we decided to go with a string only output as it made the debug console a lot cleaner and easier to work with for a demo. Similarly, while creating our front end, we ran into a problem communicating the data received over time between 2 different parts of the same webpage.

Accomplishments that we're proud of

We are extremely proud of the fact that we managed to use the Myo Armband and actually receive multiple values based on our own custom actions. By the end of the hacking phase we had 4 different functions working for 4 different therapeutic treatments. Similarly, we are extremely proud of how our user interface works and our attractive yet simple home webpage.  

What we learned

We learnt how to use a motion sensing device and change the internal capabilities based on its original source code provided. Using hardware is always a long process as there is a lot of testing and troubleshooting required. This was new for us and we found it very enjoyable and enlightening. Once we managed to get our hardware to do exactly what we wanted, the feeling of success was fantastic. 

What's next for FortiFlex

We want to keep adding more types of therapeutic treatments. In addition, we feel that some simulations and video examples would make using the Myo Armband and our web interface a lot smoother and easier to use. Eventually once this application starts to help a lot the users with their treatments, a large demand for new treatments and options would be required. This means regular updates and maintenance is also needed. Hopefully, this idea will spark even more creative ideas in the future because it is really enjoyable when you can create something meaningful for society.  
",,,,Best Healthcare Hack,"javascript, html, bootstrap, firebase, myoarmband, python, flask, myoscript",guha_ganesh,University of Western Ontario,2,harshbuddy,akagzi
Mad Invest,http://yhack2017.devpost.com/submissions/84268-mad-invest,"Inspiration

Bitcoin has seen exponential growth, not just in popularity, but also, in value. Today, 1 bitcoin is valued at close to 11,000 USD. This number is constantly changing. People around the world tweet and post statuses about these constant changes, so why not take advantage of these people’s feelings, and build a model that will predict when to buy or sell a bitcoin. 

What it does

When a Facebook messenger chatbot is asked when it is best to invest in a bitcoin, the current trends are observed, and a model predicts how likely it is for the price to go up or down, and hence draws a conclusion as to when it would be a good time to invest or sell. 

How we built it

Latest tweets and posts about Bitcoin are extracted from Twitter and Reddit. This data is sent through a Deep Convolutional Neural Network that has three convolution layers and three pooling layers. The input layer to the CNN is a word embedding (in addition to the sentiment analysis performed on the data), so the input text can be better interpreted. By hour, the data is compared to the historical price of the bitcoin and a softmax classifier is used to classify as 0 (price will not increase) or 1 (price will increase). We used Google’s NLP API for the sentiment analysis, and Keras and Tensorflow for the Machine Learning part. The training of the algorithm is done on Google Cloud Platform. All of this is sent to the Facebook messenger chatbot to convey to the user. 

Challenges we ran into

We were not able to pull data from sources other than Twitter and Reddit. The machine learning module was challenging, it took a lot of time to train the model, and installing Tensorflow was a little difficult. The Facebook messenger chatbot also took a very long time to work. The weak WiFi signal slowed down our process a little bit.

Accomplishments that we're proud of

We really like our idea, and we are happy that we were able to come up with a Machine Learning model, and how the entire application came together in the end. We also liked the idea of a chatbot, to interactively tell the user when to invest. Hopefully, people will find this as useful as we think it is. 

What we learned

We learned how to use Keras and Tensorflow to develop a Machine Learning model. We were also able to play around with the Facebook messenger chatbot. It was also interesting to observe the trends in the bitcoin market over the last few years.

What's next for Mad Invest

We will definitely expand our data collection reach. We also want to improve the NLP for the chatbot. The quality of the model needs to be improved. 70% of the Bitcoin traffic is from China, so we want be able to analyze their market (using their social media) and that would be an interesting addition to our project. This would potentially improve the prediction of our model. Most of the NLP APIs are focused on English, we think it would be interesting to explore APIs that focus on other languages (say, Chinese) - so we can analyze that market better. 
",,https://www.facebook.com/Mad-Invest-2046711385561028/,,"Cloudflare: Put Cloudflare in front of your hackathon project, make a Cloudflare App, JPMorgan Chase: Finance of the Future, Best Finance Hack, Rough Draft Ventures: Most Entrepreneurial Hack, Facebook: Best use of a Facebook API or SDK, Google: Best Google Cloud Platform Hack, Intuit: College Student Prosperity Case","python, machine-learning, facebook-messenger-chatbot, twitter, reddit, tensorflow, keras, google-cloud, node.js",varshaachar,Boston University,3,kevinkbyte,zui,sarms
Vitech Insurance Quote Predictor and Plan Recommender,http://yhack2017.devpost.com/submissions/84269-vitech-insurance-quote-predictor-and-plan-recommender,"Vitech Insurance Quote Predictor and Plan Recommender: McMaster Team #1 (The Beard) Sorry for the mess, we wish we had more time to clean up!

Screenshots and some nifty images available in the ""Images"" folder

Important Notes:

WIFI is super unreliable, front end may not connect with server
Front-end may be slow as the server side code wasn't fully realized
Front-end relies on the server side to be hosted (on a users laptop)

Quoting the Price (Machine Learning):

A wide neural network was used to model the quoted price for each plan. Unfortunately there was little time/processing power to play around with the hyperparameters of the network, however for price prediction were able to achieve a low mean squared error (between 10-12 each plan) which would be an average absolute error of around $3 in the montly plan price. Four seperate regression networks were for each plan using 5500 randomly selected entries from the database of people. As there were too many ICD codes to process, we condensed the codes into their hierarchical buckets and tracked the number of ""high"", ""medium"", and ""low"" risk conditions per bucket and fed that into the network. The network parameters and hyperparameters were saved to two files per network and loaded as needed. Network could be improved with more training time and data

Code:

bronze_quote_model.py: model for the network used to quote prices for the bronze plan (Mean Square Error ~ 10)
silver_quote_model.py: model for the network used to quote prices for the silver plan (Mean Square Error ~ 11)
gold_quote_model.py: model for the network used to quote prices for the gold plan (Mean Square Error ~ 12)
plat_quote_model.py: model for the network used to quote prices for the platinum plan (Mean Square Error ~ 12)
fitData.py: used by the server to compile the saved network data and make predictions
Guessing the Purchased Plan (Machine Learning):

Guessing the plan the customer picks was one of our ambitious goals. We were able to construct a basic wide neural network for classification(no reason for width instead of depth) however there was not enough time or processing power to tune the hyperparameters. Prediction accuracy was low for the test data we used, indicating that either not enough training data was used, or that there was no relation between parameters and plan chosen Initially the quoted price plans were included in the parameters, however we found that these did not actually affect the accuracy of our network for the limited training data we had. In the end, this classification network made use of the same 5500 randomly selected entries as the regression networks.

Code:

picker_model.py: model for the network used to quote prices for the bronze plan (Accuracy ~ 35%)
fitData.py: used by the server to compile the saved network data and make predictions
Dependencies:

Main architecture: Anaconda Python 5.0.1.
simplejson for encoding and decoding JSON requests.
The default http.server Python package reponses to requests.
The server is hosted on DigitalOcean's Cloud Ubuntu servers.
neural network makes use of scipy, numpy, pandas, scikit-learn, tensorflow, and kerasss
This program makes use of the Keras package with tensorflow for the neural network.
Problems Encountered and Overcome:

Unfortunately there were many limiting factors towards training our model. The primary issue we ran into was the lack of internet connectivity which restricted our ability to work on this problem, given the big data nature of the problem. Our initial intention was to host all the parameters we needed in a Google Cloud bucket and make use of the Google Cloud Platform's machine learning to make use of the platforms power and robustness.

Future Work and Improvements:

Most statistical analysis should be performed to analyze the networks and the correlations amongst variables.
Given additional time, we would like to tune the neural network parameters/hyperparameters as well as explore different classifiers/clustering algorithms to find more emergent features.
",,"https://github.com/CSchank/YHack2017,https://github.com/sophiatao/yhack2017",,"Best Finance Hack, Vitech: Life Insurance Quoting Challenge, Rough Draft Ventures: Most Entrepreneurial Hack","numpy, javascript, scikit-learn, scipy, keras, tensorflow, pandas, html5, css3, jquery, http.server",sophiatao,McMaster University,0
Wubba Lubba Dubz,http://yhack2017.devpost.com/submissions/84270-wubba-lubba-dubz,"Inspiration

-Inspired by baracksdubs and many ""Trump Sings"" channels on YouTube, each of which invests a lot of time into manually tracking down words.
-Fully automating the process allows us to mass-produce humorous content and ""fake news"", bringing awareness to the ease with which modern technology allows for the production and perpetuation of generated content.
-Soon-to-emerge technologies like Adobe VOCO are poised to allow people to edit audio and human speech as seamlessly as we are currently able to edit still images.
-The inspirational lectures of Professor David J. Malan.

What it does

We train each available ""voice"" by inputting a series of YouTube URL's to main.py.
download.py downloads and converts these videos to .wav files for use in speech.py, which uses Google's Cloud Speech API to create a dictionary of mappings between words and video time-stamps.
application.py implements user interaction: given a voice/text input via Facebook, we use these mappings to concatenate the video clips corresponding to each word.

How we built it

First we decided on Python due to its huge speech recognition community. This also allowed us to utilize a collaborative online workspace through Cloud9 which helped facilitate concurrent collaboration.

We used google's speech api because we saw that it was very popular and supported time stamps for individual words. Also, they had very elegant json output, which was a definite bonus.

Next, we figured out how to use the packages pytube and ffmpy to grab video streams from youtube and convert them, with speed and without loss of quality, to the needed .wav and .mp4 formats.

At the same time, one of our team members learned how to use python packages to concatenate and split .mp4 videos, and built functions with which we were able to manipulate small video files with
high precision.

Following some initial successes with google speech api and mp4 manipulation, we began exploring the facebook graph api. There quite a bit of struggle here with permissions issues because many of the functions
we were trying to call were limited by permissions, and those permissions had to be granted by facebook people after review. However, we did eventually get facebook to integrate with our program.

The final step we took was to few remaining unconnected pieces of the project together and troubleshoot any issues that came up.

During the process, we were also investigating a few moonshot-type upgrades. These included ideas like the use of a sound spectrogram to find individual phonemes of words, so we could finely tune individual words, or generate
new words that were never previously said by the person.

Challenges we ran into

A big challenge we ran into was that the Google Speech API was not extremely accurate when identifying single words. We tried various things like different file/compression types, boosting sound (normalizing/processing waveform),
improving sound quality (bitrate, sampling frequency).

Another big challenge we ran into was that when we tried splicing the small (under 1 or 2 second) video files together, we realized they lost their video component, due to issues
with key frames, negative timestamps, and video interpolation. Apparently, in order to save space, videos store key frames and interpolate between the key frames to generate the frames
in between. This is good enough to fool the human eye, but it required that we do a lot of extra work to get the correct output.

A third big challenge we ran into was that when we communicated with the facebook api through our flask website, facebook would resend our flask page post requests before we were completed
with processing the information from the previous post request. To solve this issue, we grabbed the post request information and opened new threads in python to process them in parallel.

A fourth big challenge we ran into was that wifi was so slow that it would take around 1 minute to upload a 1 minute video to Google's cloud for speech processing. Thus, in order to analyze
large videos (1+ hours) we developed a way to use multiple threads to split the video into smaller segments without destroying words and upload those segments in parallel.

Accomplishments that we're proud of

We have a scalable, modular structure which makes future expansion easy. This allows us to easily switch APIs for each function.

What we learned

[Web Services APIs]


Speech to Text Conversion:
--Google Cloud API
--CMU Sphynx (Experimental Offline Speech-To-Text Processing with the English Lanugage Model)
Facebook API Integration:
--Accepting input from user via automated messenger bot development
--Posting to Facebook Page


[Web Services Deployment]


Flask and Python Interfacing


[Python]


Multi-file Python package integration
Team-based Development


[Video and Audio Conversion]
--FFMPEG Video: Efficient Splicing, Keyframes, Codecs, Transcoding
--FFMPEG Audio: Sampling Frequency, Sound Normalization

[Misc]
--Automating the Production of quality memes
--Teamwork and Coding while sleep-deprived

What's next for Wubba Lubba Dubz

We'd like to incorporate a GUI with a slider, to more accurately adjust start/end times for each word.
Right now, we can only identify words which have been spoken exactly as entered. With Nikhil's background in linguistics, we will split an unknown word into its phonetic components.
Ideally, we will build a neural net which allows use to choose the best sound file for each word (in context).
",https://www.youtube.com/watch?v=giskukg7-VA,https://github.com/phanaj/WubbaLubbaDubz,,"Facebook: Best use of a Facebook API or SDK, Poynter Fellowship: Best Hack to Counter Fake News, Google: Best Google Cloud Platform Hack","python, google-cloud, google-web-speech-api, natural-language-processing, facebook",phanaj,Harvard University,2,raymond_wang,huangm560
Trader,http://yhack2017.devpost.com/submissions/84271-trader,"Inspiration

We wanted originally to build a Facebook chatbot that traded stocks - however, we found that trading cryptocurrencies would be much cooler.

What it does

The chatbot, using natural language processing, has a series of commands that it recognizes. Each of these commands, when recognized, trigger an event, and each event can be carried out (""buy 2 bitcoin"", ""how much does litecoin cost?"", ""what's in my ethereum wallet"", etc.)

How I built it

Using the LUIS (Language Understanding Intelligent Service) AI provided by Microsoft, when an intent is recognized, a method is called from the Coinbase API which returns whatever data or carries out whichever action is requested.

Challenges I ran into

We wanted group trading to be possible, and as such tried implementing commands for setting up, joining, and transferring funds to, a multisignature wallet. While we were able to generate seed keys, we were not able to carry out these methods due to flaws in the API we had found.

Accomplishments that I'm proud of

We were able to ship a tight, well-running, capable chat bot that serves as a very good cryptocurrency trading assistant, having run through our code with a fine tooth comb to make it as clean as possible with our immensely well-trained NLP engine.

What I learned

What's next for Trader
",,https://www.messenger.com/t/150686318894663,,"","node.js, microsoft-azure-bot-service, coinbase, multisignature-wallets",alimohamad,"",0
Learning Pockets,http://yhack2017.devpost.com/submissions/84272-learning-pockets,"Inspiration

Why doesn't Duolingo work? The answer is that after a few weeks, everyone kind of just stops going to Duolingo and forgets about it. So we thought, what if we bring the learning software to you and incorporate it into your natural browsing habits? What if - whenever you want to go on Youtube or Reddit or Pinterest to waste time, you are encouraged to take 60 seconds to learn instead? From here, Learning Pockets began.

What it does

Learning Pockets is a chrome extension that takes in a list of your time-wasting websites and encourages you to complete short language lessons before visiting these sites. With most language learning platforms, the user needs to recognize that they have free time and make the decision to direct it towards learning a new language. With Learning Pockets, the language comes to the user when they have free time. 

How we built it

We have a chrome extension which stalls blacklisted websites and serves Learning Pockets code along with the blacklisted website. Our graphics were generated with AI (adobe illustrator), and our backend is written in Python.

What's next for Learning Pockets

Right now, we have French lessons set up, but we would like to extend it to other languages and other subjects. We would like to have our platform learn when the user gets disinterested and adjust the frequency and time of the lessons to keep users engaged at their personal comfort level. 
",,,,Best Education Hack,"python, javascript, chrome",bweissmann,"Brown University, Yale University",2,jtstogel,andreadeoli
Jet Blue Sky Miles Rewards Program,http://yhack2017.devpost.com/submissions/84273-jet-blue-sky-miles-rewards-program,"Inspiration

Jet Blue , with it's tremendous connectivity of 101 destinations already offers the industry serious competition. What could be the next thing a person flying somewhere would judge airlines after the price ? How much rewards does he get ? Since one of our members is an international student and he has to travel around 7,000 miles one way to go back home, having a rewards program which could offer benefits for being loyal to a particular airline. 

What it does

Given the price of a flight, Our program informs the user of the potential Reward points that could be earned.

How we built it

We used the data sets given to find a correlation between points and dollars for both earning and redemption and made a basic model of how the current rewards program works and then moved on to make a better one using the knowledge we have of traveling through different airlines. 

Challenges we ran into

We didn't know how to parse .csv files in Java, So we converted every field into an individual txt file and then used those fields in one of the files of our program to find the correlation between points and dollars. 
Points given in the data set was dependent on a lot of factors other than just the price of the flight since the miles on each route are different and thus points vary accordingly. We didn't have much information on these to make a better model of the program.  

Accomplishments that we're proud of

We are most proud to be here as we are freshman in college and this hackathon was our first. It was a great experience to be able to code something in such a short time span, and we are most proud that we received the opportunity to participate in such an event.

What we learned

We learned that hackathons are hard work and often projects you initialize strive to do, change and that is okay. We learned to go with the flow in terms of ideas and keep at the project until we get the results we want. 

What's next for Jet Blue Sky Miles Rewards Program
",,https://github.com/gandhi-21/YHACKS17,https://s3.amazonaws.com/challengepost/zip_files/production/28284/zip_files/YHack.zip,JetBlue: Best Use of JetBlue Low Fares and Deals Data,"java, txt, csv",gandhi-21,SUNY Stony Brook,1,sejalmehra
Quiz It!,http://yhack2017.devpost.com/submissions/84274-quiz-it,"Inspiration

Many online learning platforms have quizzes integrated into them. However, these quizzes are made manually by the instructor or organization. Furthermore, it a common study method employed by students is to create quizzes/flashcards for themselves to help when studying. This lead our team to wonder if there was a way to create these quizzes automatically, taking the time and effort away from making these quizzes and towards other activities such as more studying. Therein came the idea for Quiz It! After all, it is said one learns best by doing. 

What it does

Our project lets users upload a photo of their notes to our server. From there, the note's contents are parsed and relevant questions are made with appropriate answers. These question sets are then uploaded to Quizlet as study sets for the student to study whenever they wish. In addition, we developed an Amazon Alexa skill to interactively quiz the user based on any of the study sets stored under their Quizlet account.

How we built it

There were three major parts to this project: Amazon Alexa, question creation, and Quizlet integration.

Programming Alexa involved JavaScript and Voice Recognition.

Creating questions involved taking the picture provided by the student and analyzing it for text using Google's vision API. The extracted text was then put through Stanford's natural language processing API to identify word types and parts of speech so that proper questions could be created. 

Quizlet integration involved using the platform's API to get the study set data for Alexa, and uploading the questions and answers produced to create new study sets under the user's account. 

Challenges we ran into

In order for Alexa to be robust, it must be provided with many good examples of possible answer to train its neural networks. Developing the back end of our web app was also a challenge as our team did not have extensive experience in that area. As well, developing a good algorithm for creating proper questions took some time. 

Accomplishments that I'm proud of

After much trial-and-error, we are able to have the Alexa interact naturally with the user, and successfully go through the Quizlet study sets. We also encountered some trouble in developing the back end of our web app, as the team did not have extensive experience in this area. However, we were able to persevere can develop a functioning backend. 

What we learned

Programming a voice assistant, natural language processing, and backend development.

What's next for Quiz It!

In the future, the project could expand to a mobile app and could reference many more external sources to develop questions with improved sophistication. 
",,https://github.com/kevin-f-liu/YHack2017,,"Best Education Hack, Google: Best Google Cloud Platform Hack, Intuit: College Student Prosperity Case, Best Use of Amazon Web Services","javascript, python, quizlet, google-app-engine, flask, html, css, alexa, google-cloud",janakanchandru,University of Waterloo,0
Vitech Data Analysis,http://yhack2017.devpost.com/submissions/84275-vitech-data-analysis,"Inspiration

We were inspired by the sheer amount of data and what mysterious we could find.

What it does

Our project involves a summary of different features we considered during data analysis. These involve interesting discussions of very unusual and unexpected trends in the Life Insurance Quoting data. We used the remaining features that do affect the premiums as features to train our machine learning model. The idea is to be able to predict quotes or choices of profiles.

How we built it

We analyzed using python's pandas library, R, and a couple JS visualization modules. The machine learning uses Tensorflow.

Challenges we ran into

We were unable to get the full data from the source due to unstable and slow internet until Saturday night. 

Accomplishments that we're proud of

We were nonetheless able to inspect the data thoroughly, produce interesting data visualization and findings that lead to open-ended discussions. We also have a great UI that can be useful to customers shopping for a life insurance.

What we learned

We learned a lot about analyzing data using Pandas, Flask, and also Tensorflow.

What's next for Vitech Data Analysis

The data given is very strange. It would be interesting to look into how those data were acquired, dig into the reasons certain unexpected phenomenon were happening, and so forth. From that, perhaps a better quote-producing formula/model can be produced that takes into consideration a greater number of more relevant factors.
",,https://github.com/Youdongz/vitech,https://s3.amazonaws.com/challengepost/zip_files/production/28285/zip_files/vitech_webapp.zip,"Vitech: Life Insurance Quoting Challenge, Best Healthcare Hack","python, flask, r",youdongzhang,Uc berkeley,2,AndreaJackson,jingyi_liu_hi
JetBlue Airline Consultant,http://yhack2017.devpost.com/submissions/84276-jetblue-airline-consultant,"JetBlue Airfare Consultant

Project for the 2017 Yale Hackathon (YHack)

This program seeks to solve the problem that customers almost always face when attempting to book a flight: What is the best choice for me and for what I need? Flight prices and times can vary largely, and sometimes the need for a connecting flight can cause deciding on what flight(s) to take much more difficult, making it very easy to pay more than necessary for a flight.

The aim of this project is to provide an application interface through which a user may enter details for a flight that they may be interested in, which can then with Python and the Flask API be cross-referenced against the data that was provided to us to then finally show the user, in another HTML page, a formatted display of information such as cheap flights and get-away flights, average prices on flights, and any other statistic that can be projected with the data, to then ideally provide the user with more than enough easy to understand information to help them make a choice. 

We chose these statistics because we felt that some of the most important factors in booking a flight, both for the consumer and the airline, are factors such as price, travel distance, whether or not the flight is domestic, and how a possible gain of or expenditure of  Fare Points may affect consumers' willingness to book certain flights. These factors are pivotal to the airline industry and are therefore invaluable factors to monitor.

This project is powered primarily by Bootstrap and Flask. Using these APIs, we have created an interface for the user to input information and also provided a connection between this hosted interface with our Python program(s), which then parse(s) two provided JetBlue .csv files containing thousands of lines that store data about flights, their destinations and sources, times, prices, and so on. These programs then in turn take this stored data and use several functions to retrieve interesting and useful information/patterns from within that data that can then be presented.  Upon expansion, this app could hopefully predict trends in flight patterns and purchases, and long term business trends for JetBlue.
",,https://github.com/andrewaikens87/YHack-project,,JetBlue: Best Use of JetBlue Low Fares and Deals Data,"javascript, html, python, css, bootstrap, flask, api",mruskamp,Rensselaer Polytechnic Institute,3,andrewaikens87,AtticusLin,EricPianin
Suspicious Factors,http://yhack2017.devpost.com/submissions/84277-suspicious-factors,"Inspiration

The cool dudes at Finra dressed up as superheroes. Thinking about how to design and manage such large sets of data was also something the team wanted to do. 

What it does

Determining who's potentially part of the financial ""bad guys"" using a given dataset. 

How we built it

Parsed a large amount of data with Python, storing it into a MongoDB database. This data was also parsed in Python.

Challenges we ran into

The Wi-Fi was spotty so it was difficult to properly set up our environment. Additionally, since the dataset was so large it took a substantial amount of time to process, which made testing somewhat difficult. Finally, trying to decide what data was relevant to our model was not very easy. 

Accomplishments that we're proud of

We're proud that we got to learn about parsing and dealing with large datasets and building an efficient graph using Python.

What we learned

Lots of Python, and that we can drink a lot of RedBull.

What's next for Suspicious Factors
",,https://github.com/amawai/yhacks2017,,FINRA: Be a Hero - Use Data Analytics to Catch Financial Bad Guys!,"python, flask, mongodb",amawai,McGill University,2,fredriclam,kevintran2
Money Moves,http://yhack2017.devpost.com/submissions/84278-money-moves,"Inspiration

We were interested in machine learning and data analytics and decided to pursue a real-world application that could prove to have practical use for society. Many themes of this project were inspired by hip-hop artist Cardi B.

What it does

Money Moves analyzes data about financial advisors and their attributes and uses machine's deep learning unsupervised algorithms to predict if certain financial advisors will most likely be beneficial or detrimental to an investor's financial standing.

How we built it

We partially created a custom deep-learning library where we built a Self Organizing Map. The Self Organizing Map is a neural network that takes data and creates a layer of abstraction; essentially reducing the dimensionality of the data. To make this happened we had to parse several datasets. We used beautiful soup library, pandas and numpy to parse the data needed. Once it was parsed, we were able to pre-process the data, to feed it to our neural network (Self Organizing Map). After we were able to successfully analyze the data with the deep learning algorithm, we uploaded the neural network and dataset to our Google server where we are hosting a Django website. The website will show investors the best possible advisor within their region.

Challenges we ran into

Due to the nature of this project, we struggled with moving large amounts of data through the internet, cloud computing, and designing a website to display analyzed data because of the difficult with WiFi connectivity that many hackers faced at this competition. We mostly overcame this through working late nights and lots of frustration.
We also struggled to find an optimal data structure for storing both raw and output data. We ended up using .csv files organized in a logical manner so that data is easier accessible through a simple parser.

Accomplishments that we're proud of

Successfully parse the dataset needed to do preprocessing and analysis with deeplearing.

Being able to analyze our data with the Self Organizing Map neural network. 

Side Note: Our team member Mikhail Sorokin placed 3rd in the Yhack Rap Battle

What we learned

We learnt how to implement a Self Organizing Map, build a good file system and code base with Django. This led us to learn about Google's cloud service where we host our Django based website. In order to be able to analyze the data, we had to parse several files and format the data that we had to send through the network.

What's next for Money Moves

We are looking to expand our Self Organizing Map to accept data from other financial dataset, other than stock advisors; this way we are able to have different models that will work together. One way we were thinking is to have unsupervised and supervised deep-learning systems where, we have the unsupervised find the patterns that would be challenging to find; and the supervised algorithm will direct the algorithm to a certain goal that could help investors choose the best decision possible for their financial options.
",,,,"MLH Best Domain Name registered with Domain.com, Cloudflare: Put Cloudflare in front of your hackathon project, make a Cloudflare App, FINRA: Be a Hero - Use Data Analytics to Catch Financial Bad Guys!, Best Finance Hack, Google: Best Google Cloud Platform Hack","python, machine-learning, google-cloud, ubuntu, django, html5, css3, apache, self-organizing-map, neural-network",gdascoli,"University of Maryland - University College, University of Maryland - College Park",3,Micool,muyiwao221,b5er
FlyLow,http://yhack2017.devpost.com/submissions/84279-flylow,"Inspiration

I love to travel. I also live up to the college stereotype of being dead broke all the time. So I've been stuck in a bit of a rut, trying to reconcile my love for travel and the fact that it's just so difficult for me to know when I should travel since I can't always be checking ticket prices. That's why FlyLow was developed, so people could reasonably estimate what airfare deals they might see in the future.

What it does

It's really rather simple. Using the data provided by JetBlue, a simple low-cost airfare prediction model was built. Users enter their origin and end destinations, the dates they want to travel, and FlyLow will provide graphs where the user can see the range of airfare deals they might expect in the future.

How I built it

Using R and RShiny

Challenges I ran into

There was an attempt to build a more sophisticated prediction model, but due to library constraints and keeping in mind the time limit of the event, it was decided that this should be foregone. The dataset provided by JetBlue also had some inherent limitations (only provided airfare deals for 4 months), which hindered in the development of the aforementioned model.

Accomplishments that I'm proud of

The model actually works! It's very simplistic, and could definitely use a ton of improvement, but it does what I set out to do.

What I learned

I learned a lot more about R and RShiny than I did previously! It was quite the ride.
",,https://github.com/montefer/FlyLow,https://s3.amazonaws.com/challengepost/zip_files/production/28287/zip_files/FlyLow.zip,JetBlue: Best Use of JetBlue Low Fares and Deals Data,r,FernandoPMontes,Columbia University in the City of New York,0
YHack2017,http://yhack2017.devpost.com/submissions/84280-yhack2017,"Inspiration

We wanted to learn about machine learning

What it does

How I built it

Challenges I ran into

Accomplishments that I'm proud of

What I learned

What's next for YHack2017
",,https://github.com/Li-Eric/YHack2017,,Stanley Black & Decker: Secure Android App Enabling Cloud Analysis of IoT Data,"python, c++, c, java, fortran, css, javascript, shell, tensorflow",tash-had,"",0
Louis,http://yhack2017.devpost.com/submissions/84281-louis,"Inspiration

A member of our core team is very close with his cousin who is severely disabled. Thus, we approached YHack with a social conscious Hack that would assist those who don't have the same opportunities to attend Hackathons as we do. Although our peers who are visually impaired use current methods and technology including echolocation, seeing-eye dogs, and a white cane for assistance, existing aides fall short from the potential presented by today's technology. We decided to design and construct a revolutionary product that allows those who are blind to have a greater sense of their surroundings rather than what lies five feet ahead.
Looking to our community, we reached out and spoke with a prominent economics professor from Brown University, professor Roberto Serrano. He explained that, ""The cane isn't perfect. For example, if an obstacle is not on the floor, but is up above, you are likely to bump into it. I would think that some electronic device that alerts me to its presence would help.""
Thus, Louis was born, a proprietary, mobile braille reader that not only alerts but also locates and describes one's surroundings from a small, integrated camera.

What it does

Louis uses a raspberry-pi camera to take images that are then uploaded and processed by the Microsoft Azure (vision) API, Google Cloud (vision) API, and Facebook Graph API to provide short-text summaries of the image. This text is converted to a Braille matrix which is transformed into a series of stepper motor signals. Using two stepper motors, we translate the image into a series of Braille characters that can be read simply by the sliding of a finger.

How we built it

The hardware was designed using SolidWorks run on Microsoft Remote Desktop. Over a series of 36 hours we ventured to Maker Spaces to prototype our designs before returning to Yale to integrate them and refine our design.

Challenges we ran into

In order to make an economically feasible system rather than creating actuators for every braille button, we devised a system using a series of eight dot-combinations that could comply with an unlimited amount of brail characters. We designed our own braille discs that are turned into a recognizable Braille pattern. We ran into a huge roadblock of how to turn one Braille piece at a time while keeping the rest constant. We overcame this obstacle and devised and designed a unique, three-part inner turning mechanism that allowed us to translate the whole platform horizontally and rotate a single piece at a time.
At first, we attempted to transform a visual input to an audio headset or speaker, but we realized we were making a product rather than something that actually makes a difference in people's lives. When someone loses one of their senses, the others become incredibly more precise. Many people in the world who are visually impaired count on the sounds we hear everyday to guide them; therefore, it's imperative that we looked towards touch: a sense that is used far less for reference and long-range navigation.

What we learned

In 36 hours we were able to program and generate a platform that takes the images we see and others cannot and converts it into a physical language on a 3D printed, and completely self-designed system.
In addition, we explored the numerous applications of Microsoft Azure and the bourgeoning field of image processing.

What's next for Louis

We are going to Kinect!
Unfortunately, we were unable to gain access to a Microsoft Kinect; nevertheless, we look forward to returning to Brown University with Louis and integrating the features of Kinect to a Braille output. We hope to grant our peers and colleagues with visual impairment unparalleled access to their surroundings using touch and the physical language of braille.
",,,https://s3.amazonaws.com/challengepost/zip_files/production/28288/zip_files/Files.7z,"","raspberry-pi, python, lego, 3dprinting",JulianVallyeason,Brown University,2,davidluca123,jack_roswell
DreamCatcher,http://yhack2017.devpost.com/submissions/84282-dreamcatcher,"DreamCatcher - YHack 2017

DreamCatcher is an image recognition program that uses machine learning to determine whether students are sleeping.
",,https://github.com/stevenw47/YHack-2017,https://s3.amazonaws.com/challengepost/zip_files/production/28289/zip_files/DreamCatcherBot.zip,"Google: Best Google Cloud Platform Hack, Best Education Hack, Intuit: College Student Prosperity Case","javascript, html, css",stevenwong1000777,"University of Waterloo, Brown University",2,KevinXiang,lazypanda10117
yPay,http://yhack2017.devpost.com/submissions/84283-ypay,"Inspiration

No micro-loans to incoming students having no credit history in any country.

What it does

Predicts credibality score and enables social lending

How we built it

Gather data from SMS,Emails, Social Media.

Challenges we ran into

Machine Learning Algorithm to use to classify data.

Accomplishments that we're proud of

Able to build the app end to end.

What we learned

New tech, API, how to design an end to end idea in less time.

What's next for yPay

Can change micro loan/ social lending market.
",,,https://s3.amazonaws.com/challengepost/zip_files/production/28290/zip_files/YHacks_2017.zip,"JPMorgan Chase: Finance of the Future, Best Finance Hack, Rough Draft Ventures: Most Entrepreneurial Hack, Google: Best Google Cloud Platform Hack, Intuit: College Student Prosperity Case","python, r, mean, mongodb, php",sarghode,SUNY Stony Brook,1,jaylohokare
Lecc,http://yhack2017.devpost.com/submissions/84284-lecc,"Inspiration

We wanted to give professors ""live"" updates on their lecturing skills so that we could learn better and they could improve their lecturing skills. This way, students (such as college students) can prosper from attending better lectures.

What it does


Allows instructors to add classes to the system and share it with students
Students sign up for class to give feedback using a class code
Instructors can view daily, weekly, and monthly data for feedback for different dates


How we built it


Python + Flask
SQLite
HTML/Bootstrap


Challenges we ran into


We wanted to put chart representations of the data but we did not have enough time to make it work.


Accomplishments that we're proud of


Having a basic program that works


What we learned


Practice with Flask and SQLite


What's next for Lecc


Chart representations of data
Data outlier checking

",,https://github.com/xinhuixu/lecture-sys,https://s3.amazonaws.com/challengepost/zip_files/production/28308/zip_files/lecture-sys.zip,"Best Education Hack, Intuit: College Student Prosperity Case","flask, python, html, bootstrap",billywong118,"SUNY Stony Brook, Wellesley College",1,xinhuixu
HydroMarker: using drones for water testing,http://yhack2017.devpost.com/submissions/84285-hydromarker-using-drones-for-water-testing,"Inspiration

Hurricane Maria made landfall in Puerto Rico on September 20th, 2017, it stripped away the water, transport, energy, healthcare, and telecommunications infrastructure from more than 3 million Americans. Almost immediately, clean water became a scarce commodity on the island. Though first responders and aid organizations sent bottled water to the port of San Juan, not much of it reached inland. Now, Puerto Ricans are drinking from contaminated water sources. The aftermath of this disaster has taken more than 900 American lives and the risk of island-wide water-borne illness is growing.

Puerto Rican students and employees at the University of Massachusetts Amherst are gravely concerned. Among them is Hector Luis, who approached Sustainability Projects Abroad (SPA), a registered student organization, to plan a disaster relief trip to Puerto Rico from January 2nd to 14th, 2017. SPA sent a team to YHack to build an urgent solution called HydroMarker. This prototype will aid local authorities and community leaders in locating, assessing, and remediating contaminated water sources. Millions of lives in Puerto Rico and other disaster-hit regions will be saved.

What it does

HydroMarker collects and tests water samples, maps the data, and determines water usability. The results are available online to anyone. Currently, the HydroMarker uses four parameters: pH, dissolved oxygen, conductivity, and temperature. The command to take measurements is sent to the device through Bluetooth, activating a pump that draws water to the various sensors. An LCD screen displays the readings. Results are geotagged and timestamped online through Google Map API, and compared to EPA regulations. The data provides feedback on which water sources should be avoided and need remediation; which can used for purposes such as cooking, bathing, and laundry; and which can be filtered for safe consumption. 
In addition to benefiting disaster relief and public access to water quality data, Hydromarker can be a commercial business that serves municipalities and business owners who want to repeatedly and consistently test the quality of public and private bodies of water.

How I built it

HydroMarker utilizes the low-cost and open-source Arduino platform. We used an Arduino Mega with motor driver shield and a Bluetooth module to send commands to an onboard DC motor that collect water samples. The device aggregates various data into a GeoJSON format. That data is then fed into a web app that displays markers on Google Maps.

Challenges I ran into

The software challenges included making sure the Arduino was reading inputs from multiple serial ports correctly, and handling possible failures of individual sensors to ensure robustness of the data output to Google Maps. Additionally, ensuring our Map updated with and displayed the correct markers and data on our webpage was a bit of a hurdle. Lastly, attempting to transmit data via Bluetooth and trying to consistently get a GPS signal presented some problems as well.

Accomplishments that I'm proud of

Successfully collected, parsed, and sent sensor data
Mapped geotagged and timestamped data on our webapp
Explored hardware applications

What I learned

We learned a large amount technically i.e. how to pull in data from various serial ports in Arduino, how to use GeoJSON and KML to update markers on Google Maps, how to display that updated map in a webpage. We took a look at the next steps in assembling the hardware for our software. Beyond that, we also learned how to turn Hydromarker into a viable enterprise with a profitable business model while maintaining our disaster relief vision.

What's next for HydroMarker: using drones for water testing

HydroMarker is exploring viability as a commercial business by reaching out to municipalities and businesses in our customer discovery process.
",,http://www.hydromarker.com,https://s3.amazonaws.com/challengepost/zip_files/production/28293/zip_files/The_YPlan.pdf,"Best Healthcare Hack, MLH Best Domain Name registered with Domain.com, Rough Draft Ventures: Most Entrepreneurial Hack, Best Civic Hack, Best Education Hack, Poynter Fellowship: Best Hack to Counter Fake News, Best Use of Amazon Web Services, Intuit: College Student Prosperity Case","arduino, c, html, css, javascript, google-maps, iot, geojson",bchua,University of Massachusetts Amherst,3,rschan,LeahLeshchinsky,nclsduenas
Maestro,http://yhack2017.devpost.com/submissions/84286-maestro,"Inspiration

Our main concern was giving the ability to follow international news, and any other videos, to people with visual
disabilities. As we progressed, we've noticed that this could be used in fields like Education, International Affairs,
Entertainment, and Business.

What it does

Converting a mp3, or mp4 file's audio (dubbing) to desired language and embedding the translated audio in to the video in a higher pitch volume

How we built it

We've built it by using Watson's Speak to Text, Text to Speak API, Google Translate API, SSML

Challenges we ran into

Setting the timestamps of each dialog, limits of the Watson's Bluemix API, new speaking speed of speaker

Accomplishments that we're proud of

Dubbing a video as almost identical to it's original version

What we learned

Before we have started the application we thought the only challenge would be on using APIs, but as we progressed
we have seen that was only the seen part of the iceberg. We faced countless issues about timestamp's of each dialog and we, once again, understood the importance of the planning phase of a project

What's next for Maestro

Optimizing the timestamps, and rates which determines the speed of the dub
",,https://github.com/Saccarab/Maestro,https://s3.amazonaws.com/challengepost/zip_files/production/28294/zip_files/Maestro-master.zip,"JPMorgan Chase: Finance of the Future, Best Finance Hack, Best Civic Hack, Google: Best Google Cloud Platform Hack, Best Education Hack","javascript, ssml, ibm-watson, google-translate, google-cloud",Saccarab,SUNY at Binghamton,3,boz1,yalvac,batatop
Project Booster,http://yhack2017.devpost.com/submissions/84287-project-booster,"Inspiration

We had a hard time registering for clubs and joining projects that we are interested in as first-year students. Club application, especially, is a long, painful process that can be simplified with an organized network, ease-to-use network. As project leaders, such as startup founders, we also had a hard time looking for people with specific interests and skills to join our project.

What it does

It allows students to post about their clubs/programs/events for other students to join/apply.
Each user has a profile that contains information such as profile picture, interests, skill sets, his/her own project, and the projects she/he joined.

How we built it

used android-studio, and firebase

Challenges we ran into

WIFI, github deleting our files, firebase database

Accomplishments that we're proud of

none of us knew android/firebase before, we are first-year students with limited computer science background, and we made a functional app with database

What we learned

Android App development, teamwork, perseverance

What's next for Project Booster: It connects students with projects
",,https://github.com/Qi-Zha0/YHack_2017_Project,,"Google: Best Google Cloud Platform Hack, Best Education Hack, Intuit: College Student Prosperity Case","android-studio, github, firebase, xml, java",jackshi,Columbia University in the City of New York,3,justinwon,Qi-Zha0,sy2743
yhacks-2017,http://yhack2017.devpost.com/submissions/84288-yhacks-2017,"yhacks-2017

Premium Pricing Predictor is our response to Vitech's insurance challenge. Our unique approach is focused on pricing premiums without consideration of medical preconditions, enabling affordable, efficient, and accessible life insurance. Our analytic tools effectively predict premiums with up to 99% accuracy across over 100,000 samples indicating prompt application into pertinent situations. 

Premium Pricing Predictor.pdf contains a full length Data Science report describing methods utilized, visualizations, and analysis. The folder Website includes the Front End for our user interface (index.html). Additional files are technical in nature including sample Machine Learning scripts, queries, and datasets. 
",,https://github.com/rr2962/yhacks-2017,https://s3.amazonaws.com/challengepost/zip_files/production/28295/zip_files/Premium_Pricing_Predictor.pdf,"Vitech: Life Insurance Quoting Challenge, Best Healthcare Hack","jupyter-notebook, html, php, python, javascript, css",ac4260,Columbia University in the City of New York,0
Know Your Rights,http://yhack2017.devpost.com/submissions/84289-know-your-rights,"After being racially profiled by the police and not knowing my rights, I decided to educate myself on my rights and make it easier for minorities to educate themselves as well.

The webapp teaches minorities their apps in a fun interactive way

It is built using CSS and Javascript

The biggest challenge was the research it took.

It is pretty simple and straight forward

I learned a lot about the law system and my rights

In the near future, I want to release it as a real website
",,,,Best Civic Hack,"css, sketch",Hasque,Rochester Institute of Technology,0
Intoview,http://yhack2017.devpost.com/submissions/84290-intoview,"Most of us have had both problematic interviews just as we've had enjoyable ones.
Intoview lands users a quick, easy, and free way to read up on and prepare for an interview for an internship, job, and school application, locally and overseas.

Interviewees: We're here to tell you about companies interviewing for jobs you are interested in, people's interviewing styles, and the type of interview questions to watch out for given your job and location. Just as importantly, it is a platform for you to make a difference and anonymously give feedback on your past experience  interviewer, good or bad.

Coming out of any interview, both parties will have areas for their own success and losses. However, more often than not, interviewers disproportionately fail to receive constructive feedback that would benefit then and their future interviewees.

We are here to provide constructive feedback from interviewees, provide ad evaluation of an interviewer's performance, and offer opportunities to learn from other interviewers. 
",,https://jursni.github.io,https://s3.amazonaws.com/challengepost/zip_files/production/28296/zip_files/jursni.github.io-master.zip,"MLH Best Domain Name registered with Domain.com, Rough Draft Ventures: Most Entrepreneurial Hack, Best Education Hack, Intuit: College Student Prosperity Case","html, css, javascript, github, python, csv, c",gvcarla,"Mount Holyoke College, Western University",2,saraharda,jursni
EcoRoutes,http://yhack2017.devpost.com/submissions/84291-ecoroutes,"Inspiration

We wanted to promote environmental awareness through an app that people use everyday.

What it does

Our web app is a chrome extension that converts the distance traveled and mode of transportation to carbon emissions.

How we built it

We used JavaScript and multiple Google APIs to create an interactive sidebar to Google Maps that allows users to view the size of their carbon footprint. 

Challenges we ran into

One of our teammates left in the middle of the hackathon.

Accomplishments that we're proud of

It was rewarding for us to create a chrome extension that looks very professional.

What we learned

We learned a lot of web development programming, like writing HTML and CSS.

What's next for EcoRoutes

We hope that other organizations can use our database of users' travel info in order to strategically target areas that aren't environmentally aware.
",,,,Best Civic Hack,"javascript, html, css, google-directions, google",yg2545,Columbia University in the City of New York,1,serenac26
Bias.io,http://yhack2017.devpost.com/submissions/84292-bias-io,"Inspiration

Determining what is and isn't fake news is inherently an unsupervised learning task; an algorithm can't decide what is and isn't fake news to a reader susceptible to bias. Revealing the bias of articles, sources and their narratives can reduce this susceptibility.   

What it does

The goal is to be able to take a collection of news articles and visualize the similarity in their narratives through 
 a visual, hierarchical, clustering.

How we built it

We used Python, News API, Docker, Postgres, Kafka, SQLAlchemy and Zookeeper.

Challenges we ran into

We struggled with deciding on a project, leading to a shorter period of time that we were able to program.
For some of us, it was the first Hackathon we'd ever been to and we weren't familiar with a lot of the programs the other members of our team knew how to use already.

Also a team member didn't arrive until the second day, unfortunately.

Accomplishments that we're proud of

We successfully pushed news article stubs into the kafka topic after some grueling devops. 

What's next for Bias.io

We want to load data sources from the database model we created in our biasio-collect script. We'd also like to then subscribe to the kafka topic containing news article stubs and fetch the full article using the newspaper3k library. After, we want to augment the article with nlp based features, using spacy.io (including entity disambiguation, subjectivity analysis, and sentiment analysis) and finally, create a visualization showing the naturally formed hierarchical clusters of news articles and sources; hopefully showing a clear relationship between the assignment of articles in narrative clusters, to the political stance/bias of the news source. Bias.io will not end in yalehack. 
",,https://github.com/dag4202/biasio-web,,Poynter Fellowship: Best Hack to Counter Fake News,"kafka, python, news-api, docker, postgresql, sqlalchemy, zookeeper",rpmcinro,"University of Waterloo, Johnson and Wales University",2,dag4202,fmulligan02
emotionji - streamlining thoughts to emoji,http://yhack2017.devpost.com/submissions/84293-emotionji-streamlining-thoughts-to-emoji,"Inspiration

Our team decided to do the the challenge proposed by Mirum and JWT had proposed. This challenge was to score the emotional tone of speakers and the possible language tones. We liked how straightforward and clear the guidelines were. This allowed us to properly brainstorm and do something realistic over the weekend.

What it does

emotionji is a user-friendly web page that asks the user for text input or to upload a .wav file. It will then determine what emotion the user exhibited (neutral, joy, suprised, fear, sad or anger) and how certain it was of its prediction.

How we built it

We used various web tools and APIs, notably IBM Watson's Tone Analyzer API, Google Speech API, Audio Tokenizer, Natural Language Tool Kit, as well as JSON, Django 2.0 (released only a day before the hack deadline!), AJAX, HTML/Javascript and Python.

Challenges we ran into

We ran into a lot of challenges involving integration of back-end and front-end in web development. Many of us had to learn various frameworks and web tools at the hackathon, and we struggled the most with GET and POST requests and how to display this data in a user-friendly way using Javascript.

Accomplishments that we are proud of

We are proud with the fact that we have a great user-interface along with consistent and good integration of the APIs and tools used. Our project works and is cohesive, and at the end of 36 stressful hours, that in itself is an accomplishment!

What we learned

Many different tools we have never seen or used before. This weekend also proved how frustruating web development can be.

What's next for emotionji - streamlining thoughts to emoji

We would love to keep working on this project in the future! We are close to integrating social tones and displaying user friendly information on various emotions depicted in large text inputs with multiple sentences!
",,https://github.com/niko378/emotionji,,"MLH Best Domain Name registered with Domain.com, Mirum and JWT: Can a Computer Hear How You Feel? Seeing the emotion in IM and voice","machine-learning, ibm-watson, google-web-speech-api, web, html5, javascript, django, json, jquery, ajax, tokenizer, natural-language-processing, python",sharon-ho,"McGill University, University of Waterloo, Concordia University, Montreal",3,dannykong12,tate1010,NicoHudon
YHack-JetBlue-Challenge,http://yhack2017.devpost.com/submissions/84294-yhack-jetblue-challenge,"Inspiration

Everyone in our group loves to travel and for us, it is a lifestyle. Most of the times, we know exactly where we want to go but there are often times we are very willing to explore new options and be surprised by options we may not have thought of.

What it does

Our app allows us to search for flights based on previous flight data that utilizes many parameters to find a flight that maybe a good match for us. Just put in what information you want to give, and we will surprise you with a trip to somewhere nice! We also give some more useful data like predicted weather and estimated cost of living which was outside of the given dataset.

http://54.173.159.195/
run $ npm start

How we built it

Used Express.js, Vue.js, and Node.js with the database done in MySQL. We hosted with AWS on Apache.

Challenges we ran into

Overall, not too bad but there were some major issues with team communication where we all had differing ideas for the final product. We also ran into issues with the wifi and managing our sleep situation while coping with server issues with AWS and dealing with some bugs on MySQL. Also, one of our member's computers refused to charge so that was a disaster kinda....

Accomplishments that we're proud of

In terms of reaching our base goals, we were able to meet them, all be it last minute. While we never quite got to hitting our stretch goals, I feel we learned a lot and I honestly had fun with our group. 1/2 of us were not developers so getting to teach them programming and having them learn while helping was a great experience.

What we learned

From learning about Machine Learning (though we never quite got to implementing it) and talking to different  mentors who were able to fix some small problems we had, we learned a lot about the debugging process for code and towards the end, we were able to optimize our own debugging process that honestly saved us HOURS of time.

What's next for YHack-JetBlue-Challenge

I would love to tackle this challenge with the same team again just to see how much they can all improve in the next year!
",,https://github.com/kevuno/YHack-JetBlue-Challenge,,JetBlue: Best Use of JetBlue Low Fares and Deals Data,"javascript, html",kevuno,Rochester Institute of Technology,0
Ruminate,http://yhack2017.devpost.com/submissions/84295-ruminate,"Problem

Attendance at office hours has been shown to be positively correlated with academic standing. However, 66% of students never attend office hours. Two significant contributing factors to this lack of attendance are the time and location of the office hours. See studies here and here

Solution

Our solution is an easy-to-use website that makes office hours accessible online. Students submit questions to the teacher, and teachers respond to these questions by video. Students can view previous questions and answers, which are recorded in association with individual questions.

Our Mission


Improve office hours attendance
Reduce the friction of attending office hours
Improve student academic performance


Process

Front-end Design: 


Used Sketch to draw up a outline of website
Coded the design using HTML, Javascript, and CSS.


Back-end Design:


Used Django (Python) to build complex database structure


Video Streaming API:


Determined best API for project is YouTube Live Streaming API, but did not have time to implement it


Challenges


Implementing and understanding the YouTube Live Streaming API
Issue with date ranges and time zones, so kept all times in UTC
Publishing website from front-end


Accomplishments


Domain hosting set up here
Functional local website with admin editing and website updating
Business plan with initial, beginning, and future strategies for Ruminate


Our Future

Near future, we plan to connect with specific teachers at Cornell University to test and provide feedback on the software. We will survey some of their students to measure the efficacy of the software on the student's office hour attendance and academic standing. Some functionality we want to add is attendance statistics for the teachers. Later, we plan on expanding into other Upstate New York colleges and generating revenue by creating a biannual subscription service. We will attempt integrate our web service into Blackboard or Canvas to reduce friction of signing up.
",,https://github.com/yashsahota/YHacks,https://s3.amazonaws.com/challengepost/zip_files/production/28297/zip_files/Powerpoint.pptx,"MLH Best Domain Name registered with Domain.com, Cloudflare: Put Cloudflare in front of your hackathon project, make a Cloudflare App, Rough Draft Ventures: Most Entrepreneurial Hack, Best Education Hack, Intuit: College Student Prosperity Case","css, django, python, html, javascript, youtube-live-api, cloudflare, domain.com",MatthewSalazar,Cornell University,1,Clubmine
eBX,http://yhack2017.devpost.com/submissions/84296-ebx,"The eBX – Electronic Betcoin exchange is the future platform for online betting for sports and esport’s. The transactions of eBX are managed and conducted through Ethereum smart contracts and a private blockchain network. All of eBX’s transactions are done in eBX’s very own cryptocurrency called BetCoin. The firm will issue an ICO for BetCoin, which value is driven by the volume and demand for transactions conducted on the eBX. However, the issue of the ICO is first done through Ether smart contracts, and the value of each BetCoin will first initially be equivalent to a value of Ether.  Our team also scraped data from NBA- reference.com to calculate various odds on different bets that each user may purchase. When a user wants to make a bet: 1. They fist select the sport they would like to bet on 2. They will then see a series of games/situations with corresponding betting odds that they may bet on 3. Once they submit a bet they must sign the transaction with their BetCoin wallet private key 3. The transaction is sent to a smart contract 4. After all bets have been collected, one smart contract will hold a pool of all the bets placed 5. As soon as the game finished, the smart contract will be triggered by this even and the money will be distributed to the corresponding winners of the bet.
",,https://github.com/yushakamran/eBX,,"Best Finance Hack, Rough Draft Ventures: Most Entrepreneurial Hack","css, html, javascript, python",conNULL,University of Toronto,0
Career Bot,http://yhack2017.devpost.com/submissions/84297-career-bot,"Inspiration

What it does

A small little assistant for searching for career opportunities.

How we built it

Challenges we ran into

Accomplishments that we're proud of

What we learned

What's next for Career Bot
",,,https://s3.amazonaws.com/challengepost/zip_files/production/28298/zip_files/Archive.zip,"","node.js, express.js, messenger",benjaminhuang1,SUNY Stony Brook,1,davidchen829
Xwalk,http://yhack2017.devpost.com/submissions/84298-xwalk,"Inspiration

What it does

Xwalk is a pair of glasses that help the blind cross the street. It has two primary functions: it helps the blind know when to walk by making a buzzing noise whenever there is a walk signal and it makes repetitive beeps when it sees someone else crossing the street so that he or she can assist the blind.

How I built it

I needed to be able to see the surroundings so I chose to use the Raspberry Pi Zero W for its size and Wifi capabilities. For the walk signal recognition, I used OpenCV2 to train the recognizer. For the assistance part, I used the Google Vision API and ultrasensor to see if there is a person nearby to help

Challenges I ran into

Time and Hardware were major challenges. It was often hard to tell whether software or hardware was the issue. I wished I had more time to 3D print custom fit glasses to put all the electronics in. Also training the data took super long.

Accomplishments that I'm proud of

I'm proud of making functional glasses!

What I learned

I learned how to debug hardware more efficiently!

What's next for Xwalk

The image processing is very slow right now and I hope to make the image processing 2x faster.
",,https://github.com/ketruong/Xwalk.git,,"Best Healthcare Hack, Best Civic Hack, Google: Best Google Cloud Platform Hack","raspberry-pi, opencv, google-vision, picamera",kevintruong766,"",0
MediJet,http://yhack2017.devpost.com/submissions/84299-medijet,"See Slides
",,https://www.canva.com/design/DACoclXqSj0/DlbYk7a8pL7YYY1d1DkIPg/view?utm_content=DACoclXqSj0&utm_campaign=designshare&utm_medium=link&utm_source=sharebutton,,"Best Healthcare Hack, Rough Draft Ventures: Most Entrepreneurial Hack, JetBlue: Best Use of JetBlue Low Fares and Deals Data","react, redux, python",jzeiders,Harvard University,2,NickRance,jeremiahazurin
IntelliQuote,http://yhack2017.devpost.com/submissions/84300-intelliquote,"Inspiration

Help other with the insurance quote and make sure that they get what is suited for them and give them an educated answer based on their health.

What it does

Using a trained ML model to return the insurance quote for a user.

How we built it

We used Python Flask, Pandas, scikitlearn to build the application. We hosted this on google cloud compute so that the world can see it

Challenges we ran into

Machine learning is hard! And as the hackathon progressed, we lost members. This posed a great challenge for us as we had to learn new things that we have never used before and that really put us to the test!

Accomplishments that we're proud of

A 99% accurate ML model!

What we learned

How to use Google cloud compute, Material Design, more about ML and pandas.
",,http://35.227.35.76:8080/,,Vitech: Life Insurance Quoting Challenge,"python, flask, google-compute-engine, mongodb, jquery, the-materials-project, torch, pandas",DerekZhang,Columbia University in the City of New York,0
Food.c,http://yhack2017.devpost.com/submissions/84301-food-c,"Food.C

Like taking pictures of your food? Have Food.C track what you eat to help you eat healthier. We use Keras to detect the content of the photos you take, then match it against its nutrition facts, so you can eat healthier while instagramming your meal. We even use facial recognition to track user profiles and nutritional intake.

How we built it

We run a flask server with a web application, then we write the camera data to the server on a photograph. This is then classified by Keras (VGG16), and then checked against a SQLite database built from the government nutritional data. 

Challenges we ran into

We ran into some strange encoding bugs when we were sending the images to the classifier. Additionally, using the ImageNet model, and a weak wifi connection made it harder to research things so we had to get resourceful.

Accomplishments that we're proud of

We didn't have a clue what we were making until late into the hackathon! But we crunched and got it done.

What we learned

Come prepared! But don't worry about changing plans. And eat your veggies!

What's next for Food.c

Taking over the world!
",,https://github.com/Duck-and-Windmill/eduroam,,"Best Healthcare Hack, MLH Best Domain Name registered with Domain.com, Rough Draft Ventures: Most Entrepreneurial Hack","flask, python, javascript, html5, css3, keras, tensorflow, canvas, sqlite",themichaelyang,Boston University,1,jinghullei
Calc Your Carbon Offset,http://yhack2017.devpost.com/submissions/84302-calc-your-carbon-offset,"Inspiration

What it does

Enter information about your method of travel and we will calculate your carbon emissions as well as how much money you need to donate in order to offset a certain amount.

How we built it

Intended to be a WordPress plugin/widget, the calculator uses php to run a javascript file that processes all the input with css stylesheets to spice up the look.

Challenges we ran into

Basically all the APIs that calculate carbon emission were either deprecated or required us to contact the company, which would probably take more than the duration of the hackathon for us to retrieve the API key. So, we used data straight from the EPA in our calculations and even created our own version of an API using python. In addition, most of our team had never worked with php or javascript and experience in html and css was minimal, so we spent a lot of time reading about the languages and figuring out how to complete the project rather than actually coding anything. As a result, it was a time crunch to complete.

Accomplishments that we're proud of

What we learned


How php, javascript, html, and css interact with each other.


What's next for Calc Your Carbon Offset
",,https://github.com/omivore/costs-of-carbon,,Best Civic Hack,"javascript, php, css, python, self-built-api, heroku, wordpress",irishu37,University of Maryland - College Park,3,allisonw717,omivore,gesna
Freebees,http://yhack2017.devpost.com/submissions/84303-freebees,"Freebees

Lonely instant ramen nights and low meal balance. With Freebees find local deals and help you, a college students, find deals and save money. Allowing you to be more prosperous.

Freebees is build from html, css, js, jquery, and the use of the groupon api. 
",,,https://s3.amazonaws.com/challengepost/zip_files/production/28299/zip_files/Freebees.zip,Intuit: College Student Prosperity Case,"html5, javascript, css, groupon",JohnsonLu3,SUNY Stony Brook,3,ialmosara,RahulSondhi,jonyuen
Party Litmus,http://yhack2017.devpost.com/submissions/84304-party-litmus,"Inspiration

When trying to come up with a lit playlist on Spotify, there's often a struggle to balance songs ""early"" on, when there are few people and conversation is quiet, with the songs you'd typically want to dance to as the night wears on.

What if your playlist automatically curated itself based on some measure of how ""lit"" a party is?

What it does

We leverage the fact that nearly everyone has a smartphone, and nearly every smartphone comes with WiFi. The IEEE802.11 standard includes a type of link-level data frame called ""probe requests"" which are generated by WiFi radios as they search for possible access points. These requests are WiFi ""metadata"" essentially - always there and indicative of a radio - but fortunately do not contain any personally-identifying data. Assuming that on average the number of WiFi radios grows linearly with the number of nearby people, we come up with a broad measure of attendance at a party

How we built it

The project is split into three levels of abstraction: the monitor device which captures WiFi probe requests, a cloud-based backend that acts as a data store as well as API server, and a web-based front end client for the end user to see.

Challenges we ran into

Ideally, this could operate using an internet-capable embedded device monitoring data frames, a cloud-based backend API exposing a data store, and a web-based front end client for the end user. Unfortunately, the hardware available to us did not have a driver capable of monitoring link level WiFi frames. A workaround was to substitute a Macbook Pro for this ""embedded device"", while remaining relatively platform-agnostic in our software for a potential future deployment on a capable device.

Accomplishments that we're proud of

It seems to work?

What we learned

We learned a lot about how the WiFi stack is implemented in Linux, and how to work with link-level 802.11 frames

What's next for Party Litmus

The project is open source and so it's hopefully extensible by anyone who finds a use for it. Ideally, we'd like to be able to incorporate other data into some sort of inference pipeline to provide a better descriptor of ""litness"" (since attendance by itself is not the ultimate factor)
",,https://github.com/litmus-yhack,https://s3.amazonaws.com/challengepost/zip_files/production/28300/zip_files/litmus.zip,Google: Best Google Cloud Platform Hack,"python, google-app-engine, spotify",ad2476,Brown University,2,ShailejaJain,Ibigio
Kumo Contacts,http://yhack2017.devpost.com/submissions/84305-kumo-contacts,"Inspiration

As young professionals, we found ourselves scurrying around our Facebook, LinkedIn, Email Contacts, iPhone contacts, and Google Contacts-- all just to keep track of the professionals in industry that we meet. Keeping track of who they are and when we contacted them last was even more of a hassle: slaving over an Excel sheet can only be so reliable. It was time for a change. It was time for Kumo. 

What it does

Kumo allows for you, under the hood of just one application, to add contacts from LinkedIn and FaceBook, as well as through the conventional means of Phone number and email. All of this can be viewed in one platform-- Kumo Contacts-- so that you won't lose track of what friend you've made. In addition, you can add in other information about the person, like their job title and maybe even some notes to jot down about your conversation with them. 

How we built it

All in React-Native (thanks, Facebook!).

Challenges we ran into

LinkedIn's full-search feature has only been available to registered partners, and Facebook removed add-friend functionality from their API, so we had to find workarounds. 

Accomplishments that we're proud of

Having worked around the above challenges. Creating a very simple yet very elegant UI. 

What we learned

How to use JS more effectively, factoring out code for better reuse. NPM-ing for great solvencies, but still sticking to hardcore React-Native.

What's next for Kumo Contacts


Location: see on a map where you met your contacts.
Contacts: edit after making contact + add on more than one platform. 
Time: filter meeting by time.
Business Card: use business-card reader API for autofill


Download the Expo app on your phone, and click this link to view our app during our presentation! exp://pn-dw4.mjafri118.realkumo.exp.direct:80

Please note: we are currently interested in our school's (Harvard's) Incubation Program, therefore *** we will be keeping the code not publicly available ***. To see our code, please click on the Google Drive link to request to see the code: https://drive.google.com/open?id=1FKkn2lK1dtUdqfNjK2tLCDAbUB7B6S0N Thank you!
",,,,"Best Finance Hack, Rough Draft Ventures: Most Entrepreneurial Hack, Facebook: Best use of a Facebook API or SDK, Best Education Hack, Intuit: College Student Prosperity Case","react-native, javascript, json",MohibJafri,Harvard University,2,hrose,KennethDKim
Compute Feelings for Me,http://yhack2017.devpost.com/submissions/84306-compute-feelings-for-me,"We wanted to show that human emotion was fairly simple to capture from sound waves

The app listens to human speech using a microphone and converts the patterns generate into a set of emotions

Standing on the backs of giants! We used open-source software developed by a gentleman named Chris Wilson, web frameworks and available data on human emotions.

We ran into some major configuration errors along the way. We also switched topics about 20 hours into the hackathon, after realizing that all our anticipated predictive datasets for our initial project had trends that followed events rather than proceeding them.

We have a server running our website, a solid idea and had a good time :).

Configuration and validation first, worry about the detail later.

Next, we hope to build in our own more robust visualization for Compute Feelings for Me. After that, the sky's the limit!
",,http://www.computefeelingsfor.me,,Mirum and JWT: Can a Computer Hear How You Feel? Seeing the emotion in IM and voice,"javascript, apache, amazon-web-services",DanielleRipsman,"University of Waterloo, University of Minnesota - Twin Cities, Wesleyan University",2,rough009,dghosh01
Today@Brown Personalized,http://yhack2017.devpost.com/submissions/84307-today-brown-personalized,"Story

Brown University has traditionally sent out emails every morning containing detailed information about campus events, but recently it completely overhauled its system and made it cumbersome and unintuitive to use. All of a sudden, Brown students weren't reading the daily mail about Brown's most important campus events anymore. And that is a tragedy!

We wanted to remedy that experience and bring a clean, compact, and fully informative organization of Brown's events, every day, to Brown students on a single lightweight web page.

Priorities

Our biggest priority was designing a space in which the news delivered by Brown's Today@Brown system would be communicated in a clean, no-hassle interface. Our two greatest ideas were as follows:


Each student should be able to choose what types of events they want to appear on their feed. No more tech students having their dashboard flooded with architecture and literary arts events! Students would receive quick access to the events they'd be most likely to attend.
Students would be able to add any on-campus event to their Google Calendar in one or two clicks.


Our project is full-stack and hosted in Node.js. Try it out!
",,https://github.com/Oasiris/today-at-brown-node,https://s3.amazonaws.com/challengepost/zip_files/production/28301/zip_files/today-at-brown-personalized.zip,"","node.js, express.js, pug, css3",oasiris,"",0
Peanut,http://yhack2017.devpost.com/submissions/84308-peanut,"PEANUT

Description
The web application helps the students to monitor his finances and suggests consumer destinations based on the spending habits of the fellow university students. This app is implemented by integrating ""Plaid"" financial app, which based on the user's banking transactions produces various categories and sub-categories of spending(i.e Food and Travel, Shopping etc) and provides the app with details like money spent, time and location, the shopping outlets etc.

INSPIRATION :

If you need to compare your spending habits with your fellow students of your university and know where you are missing ou ton cost-effective purchases of food, clothing and special offers on consumer locations? If you want to reduce your spending by knowing the go-to places for your friends and students in your area.

WHAT IT DOES :

It produces the app's user with best cost-effective consumer outlets if his spending is above the average spending of fellow students in the respective departments of spending. For example, if the user's spending on shopping is way over the average spending of his fellow students at his university, the app will suggest the top locations which are the student's go-to areas in his locality and has less spending range. The spending of the user and average spending of users is displayed using histograms.

HOW IT IS DONE:

MEAN Stack application, with the integrating of ""Plaid"" financial app.

WHAT MORE CAN BE DONE:

Integration with university-specific emails and all across the country.
",,https://github.com/palaparthi/YHack17,,"Best Finance Hack, Best Education Hack, Intuit: College Student Prosperity Case","css, javascript, html, angular.js, node.js, mongodb, express.js, plaid",saibhargavi-velugoti,Northeastern University,0
Get a Quote,http://yhack2017.devpost.com/submissions/84309-get-a-quote,"What it does

Our application accepts a variety of data from a potential customer and uses it to recommend the quality of health insurance (Bronze, Silver, Gold, and Platinum) that the customer should get. Our application will also show them how they compare to others and will give them prices for each quality of health insurance. 

How we built it

The front end was built using HTML, CSS, JavaScript, and various javascript libraries. The back end was built using machine learning (Google's Cloud ML and TensorFlow) to develop an informed decision and we used Vitech's database of participants to train and verify our machine learning model. We used Flask to communicate data between the front end and the back end.

Challenges we ran into

Everyone in our team wanted to learn and use new programming languages and tools to make this project. We spent 8 hours in the beginning of the hackathon thinking of ideas and learning how to utilize the various APIs we planned on using and the new languages that we planned on adding to our library.

Accomplishments that we're proud of

We are proud of effectively working together as a team to build something. We split the roles and when the time came to combine the different sections of code, our constant communication made it a seamless process. We were excited to learn machine learning and to expose ourselves to all the other APIs and languages that we didn't know about until this hackathon.

What we learned

Aside from learning machine learning and other programming tools, we also learned that we worked well as a team. Despite everyone's varied experience in programming, we were able to harmonize to create something nice.

What's next for Get a Quote

Next time, we will be working on auto insurance. 
",,https://github.com/aliang6/YHackWifi,,"","html, css, javascript, jquery, d3.js, python, flask, json, csv, google-cloud-ml, vitech-v3-api",aliang6,Stony Brook University,0
trending-news-annotator,http://yhack2017.devpost.com/submissions/84310-trending-news-annotator,"What we built

We built trending-news-annotator to facilitate the creation of question-answer pairs for trending-news articles that appear on Facebook. The question-answer pairs are formatted to resemble the Stanford Question Answering Dataset (SQuAD) for machine comprehension.

Submission

Our submission is contained in the Github repo https://github.com/cherls/trending-news-annotator

The file structure consists of subfolders app/ and dashboard/ consisting of a backend Flask API and React frontend respectively.
",,https://github.com/cherls/trending-news-annotator,,"Facebook: Best use of a Facebook API or SDK, Poynter Fellowship: Best Hack to Counter Fake News","javascript, python, html, css",cherls,University of Toronto,1,brendanneal
thinkb3yond,http://yhack2017.devpost.com/submissions/84311-thinkb3yond,"thinkb3yond at Yhack2017

thinkb3yond is a Chrome Extension and education tool used to help and encourage users to think more critically about the media that they encounter online. While the 3 is in our name because thinkbeyond was already taken, the 3 is also a symbol for the three things that we believe users should think beyond: social media, community, and themselves. 

With nearly 45% of Americans using Facebook and other social media as their main news source and the persistence of fake and sensationalist news, the ability to identify fake news and the political leaning of articles, videos, and even Tweets and Facebook posts is an integral skill. Although social media platforms such as Facebook are making efforts to identify fake news and halt the spread of it, we believe that a lasting and robust solution to halting the spread of sensationalist news is to train the critical thinking skills of internet users and encourage them to take an active role in consuming social media, rather than a passive one.

thinkb3yond promotes critical thinking by using Google Machine Learning APIs and presenting more information about the media that they are interacting with. The Google Natural Language API, for example, is utilized to calculate the sentiment of text in news article and indicate to users that there is a highly positive, highly negative, or neutral attitude in the writing. This is useful because sensationalist and fake news tend to be written with more sentiment, while real news tends to have more a more neutral tone. This serves two purposes, first, it provides feedback to the user about the credibility of the media that they are interacting with and second, and we find more important, we help train the users ability to measure credibility on their own, which they can take beyond their social media usage.

Deployment

We are using Google Cloud Platform to deploy the server of our Chrome Extension.

Built With


Google Natural Language API


We are using the Natural Language API to analyze the sentiment of media with text, from text in articles to text from pictures.

Google Vision API


We are using the Vision API to gather information and analyze images that users might encounter while surfing the web or using social media.

In the future...


Video Analysis and Parsing: We would like to work with some method of analyzing video. The Google Cloud Video Intelligence API could have been a good start to this, but it only provides labeling, while what we want is to be able to analyze text, the transcription of speech in the video, and possibly the political leaning of the images used in the video. 
Google Speech API: This would be used to take audio and transcribe it to speech so that we can analyze and parse speeches with the Natural Language API.



Hackers


Sushma Mahadeo - 6th year Bachelor Student from the CUNY John Jay College of Criminal Justice
Cleider Gomez - 2nd year Bachelor Student from the University of California, Irvine
Janella Pizarro - 5th year Bachelor Student from the University of California, Irvine
Shoumik Chowdhury - 1st year Bachelor Student from Yale University


Acknowledgements

We would like to thank the Yhack volunteers, judges, and mentors for hosting a great hackathon and for all of the assistance. Special thanks to Ryan from Google for providing guidance in developing with the Google Cloud Platform and using the Google Machine Learning APIs.
",,https://github.com/thepizarrocode/Yhack2017,,"MLH Best Domain Name registered with Domain.com, Google: Best Google Cloud Platform Hack, Best Education Hack, Poynter Fellowship: Best Hack to Counter Fake News","javascript, html, css, bootstrap, google-cloud, google-natural-language-api, chrome, express.js, node.js",pizarroj,"John Jay College of Criminal Justice of the City University of New York, University of California - Irvine",2,Shorttriptomars,cleidergo
Buzzword Flight Destination Finder,http://yhack2017.devpost.com/submissions/84312-buzzword-flight-destination-finder,"Inspiration

We wanted to use the datasets provided by Jet Blue to create a user experience revolved around where the user wanted to travel.

What it does

It finds possible Jet Blue flight destinations based on your point of origin, and then displays buzzwords from a google search of the destination.

How we built it

Using python and modules to read the provided data files.

Challenges we ran into

We ran into many challenges where we had to repeatedly simplify the scope of our hack.

Accomplishments that we're proud of

We are proud of completing and submitting a working hack of some form.

What we learned

General python knowledge.

What's next for Buzzword Flight Destination Finder

Expand upon other functionalities.
",,https://github.com/gordonwu66/YHack-2017.git,https://s3.amazonaws.com/challengepost/zip_files/production/28302/zip_files/FlightAndKeywords.py.zip,JetBlue: Best Use of JetBlue Low Fares and Deals Data,python,gordonwu66,"University of Maryland - College Park, New York University",1,kg2265
PolyGlot,http://yhack2017.devpost.com/submissions/84313-polyglot,"Inspiration

Although we are now able to transcribe subtitles for any video in any language, we noticed that there is no technology that facilitates audio-to-audio translation in real time. Oftentimes, when watching a video – such as a foreign movie or TV show – in another language with subtitles, attention is diverted away from the picture onscreen and focused more on the text at the bottom, which can detract from the viewing experience altogether. This audio-to-audio translation therefore allows the viewer to fully immerse themselves in the video they are watching, and concurrently eliminates the need for film/TV companies to rerecord their productions in other languages.

What it does

This android application converts any video  that's provided by a user and converts it to a new video with it's audio translated into any language specified by the user. 

How we built it


Microsoft Video Indexer to get a transcript of the provided video and make use of the time stamps
Android Text to Speech API to convert the audio into any language specified by the user
Firebase to store the uploaded video files


Challenges we ran into


Trying to upload a video file using a POST request


Accomplishments that we're proud of


Since there aren't any APIs to convert speech to speech, we had to first go from Speech to text, and then text to speech.
Synced speech with the video with right amount of pause. We had to create our own algorithm to do this


What we learned

-Using Microsoft APIs


Getting better with Android Studio since we all had limited knowledge of it coming into this Hackathon
## What's next for PolyGlot
Being able to store more videos so that the user does not have to keep uploading the same video to view it again
Using Bing Speech API so that the user can have the choice of selecting a specific voice that they'd like to hear the audio back from

",,https://github.com/tperamun/PolyGlot,,Best Education Hack,"java, android-studio, microsoft-video-indexer-api",tperamun,"",1,KennyGalang
SlackFeel,http://yhack2017.devpost.com/submissions/84314-slackfeel,"Inspiration

After having used Slack for Hackathons and projects and seeing the variety of emotional response, we thought it would be interesting to code a bot that would detect the emotional tones of Slack messages and respond accordingly.

How we built it

We used nodejs to create an Express web server linking to Slack and using the API to post messages to the Slack channel.

What's next for SlackFeel

Bots that can hold conversation and modify their own tone based on the responses they receive.
",,,https://s3.amazonaws.com/challengepost/zip_files/production/28303/zip_files/index.js,"","ibm-watson, node.js, javascript, slack-api, slack",brysonpdavis,Wesleyan University,0
Yhack BestHotTechnologyPredictor-ANSR ,http://yhack2017.devpost.com/submissions/84315-yhack-besthottechnologypredictor-ansr,"Read ReadME found in Yhack/BHTP folder

YHack

Hackathon projects


Contains all challenges that were attempted for Yhacks.


Authors:


Roy Khoury
Ajmer Singh Gadreh
Nicolas Brodeur-champagne

",,https://github.com/AjmerSingh7537/YHack,,Informa: Best Hot Technology Predictor,"javascript, html, node.js, angular.js, express.js, bootstrap",Niconoloco,"Concordia University, Montreal",1,roykhoury
Mappable,http://yhack2017.devpost.com/submissions/84316-mappable,"Inspiration

The world feels more and more polarized every day; how might we create technology that connects people's experiences across geographical and political boundaries that they may not have realized? 

What it does

Pick any point on the map and we'll show you recent news articles and tweets originating from that geographical region.

How we built it

Using Google APIs and a python backend with Ajax and Flask, we retrieved data about news articles and tweets and published them onto a map -based frontend written in HTML and CSS.

What's next for Mappable

We're interested in visualizing how the experiences and opinions of people who live in close proximity color the way that the news looks and sounds. Our next steps would include more in-depth analyses of the differences between different places.
",,https://github.com/mheitman/YHACK,https://s3.amazonaws.com/challengepost/zip_files/production/28304/zip_files/YHACK-master.zip,Best Education Hack,"python, javascript, html, google",karen_tu,Brown University,2,mae_heitmann,dao_han_lim
Marble Grapes,http://yhack2017.devpost.com/submissions/84317-marble-grapes,"Inspiration

Informa’s customers want to understand what new technologies will be most relevant to their businesses. This is also more “hype” around technologies. Therefore, it is increasingly important for companies to stay informed about emerging technologies.

What it does

Marble Grapes display the most relevant technologies for each of Informa's 6 industry-specific clients.

How we built it

We developed a neural network to algorithmically predict the estimated “noise” of a technology.
This information is then displayed in a dynamic dashboard for Informa’s market analysts.

Challenges we ran into

Time constraints were a significant problem. There was limited accessibility of meaningful data. There were also minor syntax issues with Javascript ES6.

Accomplishments that we're proud of

Interviewing Informa, and understanding the problem in a deep way. We're also proud of developing a website that is intuitive to use.

What we learned

We learned that it is hard to access meaningful data, despite having a good solution in mind. We also learned that 4 young adults can eat a surprising amount of grapes in a short period of time.

What's next for Maple Grapes

We'd like to improve the accuracy of the algorithm by increasing the body of historical data for technological successes and failures. We'd also to account for a social media impact score, by doing sentiment analysis.
",,https://github.com/mxdi9i7/informa_predictor_yhack2017,https://s3.amazonaws.com/challengepost/zip_files/production/28305/zip_files/Pitch.pdf,"Best Finance Hack, Informa: Best Hot Technology Predictor","express.js, node.js, javascript, python, numpy",skumarmars,University of Toronto,1,avkashm
Migrate,http://yhack2017.devpost.com/submissions/84318-migrate,"Inspiration

How many times have you Ubered or Lyfted from campus to your nearest airport? And how many of those times were you alone? Every school break, thousands of college kids flock to the airports at the same time. But they don't know who else to share Uber or Lyft rides with.

What it does

This web app resolves the problem by matching users with similar flight times, so that they can coordinate Ubering or Lyfting together to the airport, or wherever. This can reduce the cost by more than half for each person!

Step 1. Give Your Travel Plans
Provide Migrate with the day you plan to fly out of an airport near campus, as well as the earliest and latest times in the day you can leave.

Step 2. Merge and Coordinate!
Migrate will alert you whenever another student has an overlapping shared ride with you. When at most 6 people match, a groupchat will start and you can take it from there!

How we built it

This app was reliantly built using Google Cloud Services. We integrated Google App Engine and Facebook login to get accounts up and running.

Challenges we ran into

Our greatest challenge was by-far setting up the database. We were unfamiliar with Google's version of relational databases and how to represent them, so the learning curve was sharp. Eventually we got the bare bone application working, but with the sacrifice of missing styling. And that's because we're a team of two!

Accomplishments that we're proud of

We're happy that we conquered the technologies we sought out to use (besides Facebook). Neither of us had used Bootstrap before, despite writing other websites from scratch. And we now feel comfortable just-starting a web app using Google Cloud Platform 

What we learned

Everything... 

What's next for yhack2017

Three words: Rocket ship sharing
",,https://github.com/Franklify/yhack2017,,"Google: Best Google Cloud Platform Hack, Facebook: Best use of a Facebook API or SDK, Intuit: College Student Prosperity Case","python, javascript, html, css, c",Franklify,"",0
Open Mind,http://yhack2017.devpost.com/submissions/84319-open-mind,"Inspiration

In a sense, social media has democratized news media itself -- through it, we have all become ""news editors"" to some degree, shaping what our friends read through our shares, likes, and comments. Is it any wonder, then, that ""fake news"" has become such a widespread problem? In such partisan times, it is easy to find ourselves ourselves siloed off within ideological echo chambers. After all, we are held in thrall not only by our cognitive biases to seek out confirmatory information, but also by the social media algorithms trained to feed such biases for the sake of greater ad revenue. Most worryingly, these ideological silos can serve as breeding grounds for fake news, as stories designed to mislead their audience are circulated within the target political community, building outrage and exacerbating ignorance with each new share. 

We believe that the problem of fake news is intimately related to the problem of the ideological echo chambers we find ourselves inhabiting. As such, we designed ""Open Mind"" to attack these two problems at their root.

What it does

""Open Mind"" is a Google Chrome extension designed to (1) combat the proliferation of fake news, and (2) increase exposure to opposing viewpoints. It does so using a multifaceted approach -- first, it automatically ""blocks"" known fake news websites from being displayed on the user's browser, providing the user with a large warning screen and links to more reputable sources (the user can always click through to view the allegedly fake content, however; we're not censors!). Second, the user is given direct feedback on how partisan their reading patterns are, in the form of a dashboard which tracks their political browsing history. This dashboard then provides a list of recommended articles that users can read in order to ""balance out"" their reading history.

How we built it

We used React for the front end, and a combination of Node.js and Python for the back-end. Our machine learning models for recommending articles were built using Python's Tensorflow library, and NLP was performed using the Alyien, Semantria, and Google Cloud Natural Language APIs.

What we learned

We learned a great deal more about fake news, and NLP in particular.

What's next for Open Mind

We aim to implement a ""political thermometer"" that appears next to political articles, showing the degree to which the particular article is conservative or liberal. In addition, we aim to verify a Facebook-specific ""share verification"" feature, where users are asked if they are sure they want to share an article that they have not already read (based on their browser history).
",,https://github.com/lopez-brau/YHack2017,,"Best Civic Hack, Google: Best Google Cloud Platform Hack, Best Education Hack, Poynter Fellowship: Best Hack to Counter Fake News","react, python, tensorflow, node.js",stefanuddenberg,"Yale University, Dartmouth College",1,lopez-brau
Cryptocurrentcy,http://yhack2017.devpost.com/submissions/84320-cryptocurrentcy,"Inspiration

Cryptocurrencies are a very recent trend and very few people envisioned Bitcoin's meteoric price increase. However, there are hundreds of other cryptocurrencies some of which have shown the explosive potential of Bitcoin. Our goal was to use machine learning to detect what's the difference between a cryptocurrency that booms or busts.

What it does

Instead of just using an algorithm that uses the price of a cryptocurrency itself to predict future price our team decided it would be very valuable to track online sentiment about cryptocurrencies. We believe this will be especially effective since cryptocurrencies's platforms are entirely online as well as chatter about buying and selling the currency. Additionally, since cryptocurrencies' prices tend to be very momentum based we believe this increases the accuracy of our prediction. Using data from Reddit and news sources about the cryptocurrency along with the price history, we predict what new, unfamiliar cryptocurrencies have the most promise.

How we built it

We scraped the entirety of Reddit for mentions of cryptocurrencies with the 200 highest market caps. We then built a classifier using a decision tree algorithm with the Google Cloud Natural Language API training with Bitcoin data. 

Challenges we ran into

We got massive amounts of data from Reddit and had to build our own server and then parse through the data (500 GB) to find posts pertaining to cryptocurrencies. Even though we built a model, we did not have the computing power to run it. Additionally, none of our team members had extensive experience with machine learning.

Accomplishments that we're proud of

We are proud of the fact that none of us knew ML, but were able to teach ourselves the basics and apply them to find a model for the data.

What's next for Crypto-current-cy

For this project, we focused on cryptocurrencies since we believed that the price would be correlated relatively strongly with online news compared to other stocks or technologies. However, moving forward we would like to take this experience and think about how to apply news and social media sentiment it to predicting success of new technologies.
",,https://currentcy.surge.sh,,"Best Finance Hack, Informa: Best Hot Technology Predictor, Google: Best Google Cloud Platform Hack","python, google-cloud, html5, css3, javascript",shry4ns,"Rice University, University of Western Ontario",2,herwigmark,yixinj
Fakebook,http://yhack2017.devpost.com/submissions/84321-fakebook,"** Inspiration**
In the current political climate and the widespread issue of fake news on social media, we found it imperative for this problem to be solved. There needs to be quick, reliable flagging of potentially malicious posts that try to deceive other social-media users. By flagging the posts early using machine learning without the input of other users, as is the current system on Facebook, the algorithm produces faster results. This was the inspirational idea for us to pursue the fake news challenge.

** What it does **
Fakebook uses advanced linear-regression machine learning algorithms to directly flag users and posts that are used to spread deceiving information. The process used in the demo is relatively simple, in that we upload a facebook user account to a custom web app, and the web app pushes the data crawled from the account using the facebook api to the machine learning algorithm. This algorithm in turn produces a percent accuracy and determines whether to flag the post as malicious or not. In the future, if facebook uses this idea we hope they use more data to improve the learning model, which currently has an accuracy rate of about 93.4%. The model uses the status id, message, number of comments, number of shares, likes, loves, reactions, comments and the polarity of the comments as inputs for the model, and focuses on flagging a specific user as opposed to a post at first. Once the user is flagged, the individual posts are checked based on the algorithm and are flagged if appropriate. 

** How we built it **
To build this machine learning system, we used the scikit learning library to create a linear regression model for determining the result given specific data. For training the model, we used a web-crawler based on facebook's graph api to aggregate posts between specific dates, and all of the likes and comments and reactions as appropriate. We had over 200 data inputs to feed in the model, and therefore over 1000 data points. We also used BuzzFeed's open source facebook fake or real data for labeling the posts, using this data to train the model as well.

** Challenges we ran into **
We ran into a lot of challenges with aggregating the data and actually creating the machine learning algorithm. There were so many errors, and sometimes it worked and other times it just refused. However, with perserverence we were able to debug most of the problems and create a working prototype. However, given more time the web crawler and algorithm for machine learning, in addition to the web app, will be flawless.
",,https://github.com/abouelkhair5/fakebook,,"Facebook: Best use of a Facebook API or SDK, Poynter Fellowship: Best Hack to Counter Fake News","facebook-graph, textblob, nltk, json, logistic-regression-ml-api, scikit-learn",jschmidtnj,"Stevens Institute of Technology, University of Waterloo, Oklahoma State University - Oklahoma City",2,abouelkhair5,GaneshNomula
Fun Times,http://yhack2017.devpost.com/submissions/84322-fun-times,"What it does

An Android app to display interesting nearby places based on the user's pictures using Google's Vision API.
",,https://github.com/M1Hackers/FunTimes,https://s3.amazonaws.com/challengepost/zip_files/production/28306/zip_files/FunTimes.apk,Google: Best Google Cloud Platform Hack,"android, android-s, google-maps",CyanoKobalamyne,Massachusetts Institute of Technology,2,karunyas,Clhsu
cerebricks,http://yhack2017.devpost.com/submissions/84323-cerebricks,"Inspiration

Current recruiting sites are full of problems that we aim to solve with our collaborative and intuitive web service.

What it does

Cerebricks allows users to collaborate on real world tech projects from real companies in teams created by the users. Through our platform, students begin at a starting salary of $15.00/hr with the opportunity to increase their potential earnings through education and completion of projects. In addition, hourly wages can drop due to poor performance or failure to complete projects. When applying to jobs, students can form teams through the application page and tackle projects in a collaborative manner. Educational resources are also provided on the site to help our users tackle any potential problems. All payments are through our service and allow for potential transfers of crypto currencies. Our three pillars, are Educate, Connect, and Advance. 

How I built it

We used react framework and Material UI for components. Designed frontend, logo, marketing website, and used libraries and APIs for natural language processing. 

Challenges I ran into

Creating an environment conducive to the growth of beginner programmers while also catering to experienced programmers proved to be a challenge, as striking a balance between the two led us to reconsider who our target demographic was. 

Accomplishments that I'm proud of

Creating a full functioning frontend with data to manipulate. 

What I learned

Through the curation of educational resources targeted at beginner programmers, we learned of many different platforms that can be used to introduce people to programming, a skill that could certainly be used in introducing non-programmers to CS. We also learned effective methods of collaboration in a team environment, as effective delegation of tasks was key in the development of our product. 

What's next for Cerebricks

We plan on expanding our back-end infrastructure to provide true functionality for our product. Additionally, we aim to polish our frontend for a truly smooth and intuitive user experience. 
",,http://app.cerebricks.com,,"Rough Draft Ventures: Most Entrepreneurial Hack, Facebook: Best use of a Facebook API or SDK, Best Education Hack, Best Use of Amazon Web Services, Intuit: College Student Prosperity Case","react, node.js, javascript, amazon-web-services, s3, google-cloud",glee43,Brown University,1,AndrewDuca
TweepBot,http://yhack2017.devpost.com/submissions/84324-tweepbot,"Inspiration

ML to interact with human emotion

What it does

How we built it

Challenges we ran into

Accomplishments that we're proud of

What we learned

What's next for TweepBot
",,,,"Mirum and JWT: Can a Computer Hear How You Feel? Seeing the emotion in IM and voice, Google: Best Google Cloud Platform Hack","python, html5, css, firebase, javascript, twitter, bootstrap",mgob,"McMaster University, Brown University, University of Waterloo",3,oliviatinios,shuchi-a,2017soft
GFormers,http://yhack2017.devpost.com/submissions/84325-gformers,"Inspiration

The inspiration came after we participated to the Cloud Platform on board conference in Montreal

What it does

The web app takes an image that a user uploads to the site and converts it to Google Forms. It is saved in the Google Drive

How we built it

We used Node,js, Google Cloud Platform with the help if the Vision API, AppScript API

Challenges we ran into

We had a lot of problems connecting the AppScript mainly because we didn't know all the settings to include for authentification when sending the request.

Accomplishments that we're proud of

We build an app that works with a nice UI

What we learned

Google Cloud Platform is a great platform.

What's next for GFormers

The sky is the limit
",,http://gformers.com,https://s3.amazonaws.com/challengepost/zip_files/production/28307/zip_files/Untitled_Document.,"Google: Best Google Cloud Platform Hack, Best Education Hack",node.js,walterfleury,"Concordia University, Montreal, University of Ottawa",3,justgfather,Franck851,yanis333
K2,http://yhack2017.devpost.com/submissions/84326-k2,"Inspiration

A couple days ago our team developed a revolutionary bitcoin trading algorithm that significantly out-performed market returns - we were ecstatic. 

We soon learned, however, that the market is very unfriendly to innovators, lacking an accessible means to trade and backtest trading algorithms. This is where K2 steps in.

What it does

K2 is a comprehensive backtesting platform for currency data, specializing in cryptocurrency, offering users the opportunity to create trading algorithms and simulate them on real-time and historical market data. We seek to equalize the playing field by enabling the general public to develop and test trading strategies. We created our own simple, Python-based API for users to use to develop their algorithm. They can then specify a trading interval, time frame, and currency symbol, and our backend visualizes the cumulative returns and generates financial metrics, quantifying the algorithm's performance against the market.

How I built it

K2 was built in JavaScript, jQuery, HTML5, CSS3, Python, AJAX, Node.js, Pandas, Numpy, Empyrical.

Challenges I ran into

Integrating the frontend with the backend proved quite difficult for our team. Our backtesting API is Python-based, so we had to execute Python code from the client-side and seamlessly incorporate the response into our frontend. 

Accomplishments that I'm proud of

Successfully creating a financially sound backtesting platform complete with a slippage model and transaction fees that can simulate trading strategies on real-time market data. 

What I learned

Methods to integrate client and server-side systems. 

What's next for K2

A great idea is just that- an idea. We hope to publish, grow, and promote K2 through b2b sales, proprietary use, and customer outreach to truly bring wall-street to main-street. 
",,http://everestcapital.io/k2/,,"Cloudflare: Put Cloudflare in front of your hackathon project, make a Cloudflare App, FINRA: Be a Hero - Use Data Analytics to Catch Financial Bad Guys!, JPMorgan Chase: Finance of the Future, Best Finance Hack, Rough Draft Ventures: Most Entrepreneurial Hack, Best Civic Hack, Intuit: College Student Prosperity Case","html5, css3, javascript, ajax, node.js, jquery, python, numpy, empyrical, pandas",wisekevin,"Princeton University, Rice University",2,JoelAbraham,parkourninja
yhack2017,http://yhack2017.devpost.com/submissions/84327-yhack2017,"yhack2017

Originally, we were going to try an education hack that would help students with studying for their finals. This was inspired off us having our own set of finals coming up soon and the idea was that students could write their own study guides and submit them to have other students (preferably taking the same subject) take a look at their material. The thought process was that both parties could benefit: the people writing these study guides have to reaffirm what they've learned in order to write the guides and answer any criticism/questions about what they've written and the people who came online to find a study guide would, well, have a study guide. Ultimately, we scrapped this idea since we found there to be a few too many similarities with existing education technologies and came up with the idea we have now.

Time and time again, my parents and millions of people around the world undertake the tedious and daily task of making shopping lists. These lists range everything from grocery shopping, event shopping, ingredient shopping for family recipes, Costco shopping, pharmaceutical shopping, etc. Even after taking out valuable time to reassess the current affairs of their household to make a simple list, these same  people bring home the goods and reenter their state of blissful ignorance. Our application was built to tackle this lack of knowledge of the state of perishable and usable goods in one’s household. Using an intuitive and minimalistic user interface, our application is able to track the items in a household, keep track of when they will expire, and calculate (with a reasonable degree of accuracy) how long it will take for the people to finish their products. Moreover, when these same, but now informed, people take the streets to shop once more, they will be able to compile lists that tell them exactly what they need and what they have of the items on their list. This will lead to healthier, more efficient, more informed, and less wasteful lifestyles. Our application is not only scalable, but we also have many plans for its future. Collaboration and sharing of lists between users is soon to come, making it possible to exchange recipe lists or collaborate on getting items for a party or stocking up on household goods on a daily bases. The possibilities may be endless, but when our app lists them out, you’ll take full advantage of them.
",,https://github.com/wxiang54/yhack2017,,Best Finance Hack,"html, python, css, makefile, bootstrap",jiaweichen1,"SUNY Stony Brook, Yale University, Rensselaer Polytechnic Institute",3,Phionx,wxiang54,jchua1
Idea Bin,http://yhack2017.devpost.com/submissions/84328-idea-bin,"Inspiration

When we started the hackathon, we had a tough time coming up with ideas. Whereas, earlier in the day, we had so many ideas about implementing software to improve our lives.

What it does

Idea bin is a platform for people to list out their everyday problems that may be solved using software. In this busy world, people always have ideas, but usually not enough time to implement them personally. So, idea-bin is a useful tool for such people to see their ideas materialized, without much personal effort. On the other hand, young programmers today, have much difficulty coming up with new,  original ideas for projects. This would not only help them gain valuable experience, but also some side-money.

How we built it

We used node.js for the back-end, and css/html for the front-end. We used the online platform 'Glitch"" to collaborate and write the code.

Challenges we ran into

Since all of us had almost no prior experience in software development using node.js, we found it challenging to learn a whole new language and implement our program.

Accomplishments that I'm proud of

It was the first hackathon for most of us. Getting through the 36-hour coding without immersing ourselves in caffeine was an accomplishment we are proud of. Also, learning a whole new language during that time adds to the feeling of accomplishment.

What we learned

With minimal experience in web-development using node.js, all of us are proud of adding another programming language under our belt.

What's next for Idea Bin

We might actually add a post-matching interface for programmers to learn more precise details of the problem so that they could solve it more efficiently.
",,https://idea-bin.glitch.me/,https://s3.amazonaws.com/challengepost/zip_files/production/28309/zip_files/Link.docx,"Best Finance Hack, Rough Draft Ventures: Most Entrepreneurial Hack, Best Education Hack, Intuit: College Student Prosperity Case","node.js, javascript, css",aakarsh19,"McGill University, New York University",1,JUCHY
Hot Tech Predictor,http://yhack2017.devpost.com/submissions/84329-hot-tech-predictor,"What it does

Given some company names or industries as data, our model can predict how that industry will do in the coming years.

How we built it

We used a lot of data, including tweets and reddit posts and stock prices.

Challenges we ran into

This was our first ML project
",,,,Informa: Best Hot Technology Predictor,python,yash97mathur,"",0
Floo,http://yhack2017.devpost.com/submissions/84330-floo,"Inspiration

When deciding on places to travel to, we often think of places we've seen in movies or content we've come across while surfing the internet. We wanted to create a project that could help people discover locations and book flights on JetBlue. 

What it does

When people see a cool location online, perhaps in a video or search engine, people can use the Chrome extension to take a snapshot of their current window. This image is then downloaded locally and sent to our server which uses the Google Cloud Platform to identify landmarks and location. Our server then returns alerts that show the cheapest flights and hottest deals to the particular location shown in the image. In this way, users are free to indulge in their spontaneous side without breaking the bank!

How we built it

We used HTML and Javascript to build the Google Chrome extension. For our backend, we used Flask as our server, and Python to parse the screenshot and CSV files.

Challenges we ran into

Although computer vision models to determine location are surprisingly accurate, there were still limitations to the types of places they could recognize. However, we were able to overcome this limitation by also using Google Vision API's web detection. In addition, we ran into trouble sending POST requests in Javascript. Additionally, we ran into a few issues when combining our front end with our back end.
",,,,"JetBlue: Best Use of JetBlue Low Fares and Deals Data, Google: Best Google Cloud Platform Hack","",jgong,Columbia University in the City of New York,1,ochow
MakeHaven-Slack-Bot,http://yhack2017.devpost.com/submissions/84331-makehaven-slack-bot,"Inspiration: We wanted to have fun while still having impact on New Haven's community

What it does: Using a Slack Bot to automate the onboarding process for new members, specifically:


Provide a link to an online waver 
Watch orientation videos
Sign up for Slack Community
Schedule key pickup
Identify area of interest 
Watch tool orientation video 
Schedule meeting with volunteer coordinator for tool to be approved for use.


How I built it: We mainly used Botkit and node.js.

Challenges I ran into: We could not use interactive commands without registering our app with Slack.

Accomplishments that I'm proud of: Achieved most of MakeHaven's demands for streamlining the onboarding process

What I learned: Technical: Botkit, node.js, Glitch, Heroku.

What's next for MakeHaven-Slack-Bot: Improve user interface so that the onboarding process requires a minimum amount of user input
",,https://github.com/nguyenkatherine/MakeHaven-Slack-Bot,,Best Civic Hack,"node.js, botkit",nguyenkatherine,"Cornell University, Columbia University in the City of New York",1,yl3803
Resume Guider ,http://yhack2017.devpost.com/submissions/84332-resume-guider,"Inspiration

Tailoring a resume to a job posting is very time consuming and not everyone know how to make an effective one. 

What it does

Searches job posting for key words which are used to effectively create a resume that will highlight relevant skills and experience. Helps remove necessary information from resumes and increases the chances of candidates to move further into the employment process. 

How we built it

Used web development tech including html, css, bootstrap, javascript. Search algorithm to find key words from existing set of data and give an output of tailored questions to eventually build a resume for the job posting.

Challenges we ran into

search algorithms, updating questions based on inputs, carrying data forward to display a final resume

Accomplishments that we're proud of

it works effectively, and makes sure people have the right mindset while making their resumes for a job they like

What we learned

learned how to create styles, and use existing code from other programmers for things that are beyond our scope

What's next for Resume Guider

make a better searching algorithm and better output questions to make it easier for students to apply with confidence and build their future. also add a component that analyses their time allocations vs results to tell them where to invest their time in the future 
",,https://github.com/HrydayaG/YHack,https://s3.amazonaws.com/challengepost/zip_files/production/28310/zip_files/resumeCheck.html,Intuit: College Student Prosperity Case,"html, javascript, bootstrap, css3",HrydayaG,"McMaster University, University of Toronto",1,DhairyaDave21
Carbon Fund Bot ,http://yhack2017.devpost.com/submissions/84334-carbon-fund-bot,"Inspiration

We decided to try the Best Civic Hack challenge with YHack & Yale Code4Good -- the collaboration with the New Haven/León Sister City Project. The purpose of this project is to both fundraise money, and raise awareness about the impact of greenhouse gases through technology.

What it does

The Carbon Fund Bot is a Facebook messenger chat agent based on the Yale Community Carbon Fund calculator. It ensues a friendly conversation with the user - estimating the amount of carbon emission from the last trip according to the source and destination of travel as well as the mode of transport used. It serves the purpose to raise money equivalent to the amount of carbon emission - thus donating the same to a worthy organization and raising awareness about the harm to the environment.

How we built it

We built the messenger chatbot with Node.js and Heroku. Firstly, we created a new messenger app from the facebook developers page. We used a facebook webhook for enabling communication between facebook users and the node.js application. To persist user information, we also used MongoDB (mLabs).  According to the user's response, an appropriate response was generated. An API was used to calculate the distance between two endpoints (either areial or road distance) and their carbon emission units were computed using it. 

Challenges we ran into
There was a steep curve for us learning Node.js and using callbacks in general. We spent a lot of time figuring out how to design the models, and how a user would interact with the system. Natural Language Processing was also a problem.

Accomplishments that we're proud of
We were able to integrate the easy to use and friendly Facebook Messenger through the API with the objective of working towards a social cause through this idea

What's next
Using Api.Ai for better NLP is on the cards. Using the logged journeys of users can be mined and can be used to gain valuable insights into carbon consumption.
",,https://github.com/shailrshah/fb-bot,,"Best Civic Hack, Facebook: Best use of a Facebook API or SDK","facebook-graph, facebook-chat, node.js, javascript, heroku, html5, css3, mongodb",AunshChaudhari,Northeastern University,1,shailrshah
Emotional Talks,http://yhack2017.devpost.com/submissions/84335-emotional-talks,"Inspiration

I got the inspiration from the Mirum challenge, which was to be able to recognize emotion in speech and text. 

What it does

It records speech from people for a set time, separating individual transcripts based on small pauses in between each person talking. It then transcribes this to a JSON string using the Google Speech API and passes this string into the IBM Watson Tone Analyzer API to analyze the emotion in each snippet.

How I built it

I had to connect to the Google Cloud SDK and Watson Developer Cloud first, and learn some python that was necessary to get them working. I then wrote one script file, recording audio with pyaudio and using the APIs for the other two to get JSON data back.

Challenges I ran into

I had trouble making a GUI, so I abandoned trying to make it. I didn't have enough practice with making GUIs in Python before this hackathon, and the use of the APIs were time-consuming already. Another challenge I ran into was getting the google-cloud-sdk to work on my laptop, as it seemed that there were conflicting files or missing files at times.

Accomplishments that I'm proud of

I'm proud that I got the google-cloud-sdk set up and got the Speech API to work, as well as get an API which I had never heard of to work, the IBM Watson one.

What I learned

To keep trying to get control of APIs, but ask for help from others who might've set theirs up already. I also learned to manage my time more effectively. This is my second hackathon, and I got a lot more work done than I did last time.

What's next for Emotional Talks

I want to add a GUI that will make it easy for viewers to analyze their conversations, and perhaps also use some future Speech APIs to better process the speech part. This could potentially be sold to businesses for use in customer care calls.
",,,https://s3.amazonaws.com/challengepost/zip_files/production/28311/zip_files/EmotionalTalks-master.zip,"Mirum and JWT: Can a Computer Hear How You Feel? Seeing the emotion in IM and voice, Google: Best Google Cloud Platform Hack","python, google-speech, ibm-watson",yashaslokesh,University of Maryland - College Park,0
Project Underground,http://yhack2017.devpost.com/submissions/84336-project-underground,"YHackOlin: Project Underground

Code for YHack 2017

Our Story:

Inspiration

As students who come from a tiny school with a project-based learning curriculum and culture, we were inspired by the fact that even in our close community there are many awesome and interesting projects going on that we don't know about. Upon talking to people from different universities here at YHack, we found that students from larger schools are even less aware of the projects going on around them, especially outside of their majors. Our web app provides an easy way for anyone to share their projects with a large number of people, and a way for people- college students in particular- to inform themselves about what others are doing, and what kinds of things they could try in the future.

What it does

Our web app is a social media site for project sharing. It categorizes projects based on subject and education level, and has an explore feature where people can find something completely unexpected. On the Trending page, users can see the most viewed posts of the week. After creating an account through the website, Gmail, Facebook, or Github, users can upload projects of their own and “Favorite” projects to view them later. It also has the potential to make students more prosperous not only in wealth of knowledge, but in wealth of opportunity. Having a better idea of what’s going on nearby and seeing what people of similar education level have accomplished would help give students a holistic perspective of where technology is today and inspire people to get involved in a project of their own. For the students posting their projects, this could also be a way for them to be recognized by industry in the future.

How we built it

We built this website using Django as our framework for the backend, and imported style sheets and UIs from Bootstrap, Story from HTML5 Up, and CreativeTim for the frontend. We utilized Dreamweaver while building the frontend. We also used the Facebook/Google/Github API to add login capabilities through Facebook/Google/Github.

Challenges we ran into

We coded several of the web pages separately. When it came to combining those and integrating them with the backend, there were many style conflicts where CSS classes and tags had the same names. We changed a lot of names, debugged a lot of errors, and definitely learned about the perks of keeping code organized and constantly communicating with the rest of the team.

Accomplishments that we're proud of

With little to no experience coding websites among the four of us, we’re pretty proud that we were able to make a mostly working social media site in less than 2 days! We taught ourselves Django, Dreamweaver, and the HTML/CSS elements that weren’t covered in Codecademy’s beginning tutorials.

What we learned

We definitely learned the importance of commenting and organizing code. We also learned about the software designing process- the short time frame of the hackathon forced us to decide what to prioritize and how to not get too caught up on the details until there’s basic functionality. In the future, that will be a very valuable skill to have when tackling larger scale coding projects.

What's next for Project Underground

For the web app, we would probably try to fix bugs, add more functionalities to the app, and flesh out the website. For the team, who knows! We will definitely keep learning about web development, and will probably all be attending more hackathons in the future.

Showcase





Made with ♥ by Utsav, Khang, Emma, Diego
",https://youtu.be/IbwtVWW4mkc,https://github.com/Utsav22G/YHackOlin,,"Google: Best Google Cloud Platform Hack, Facebook: Best use of a Facebook API or SDK, Best Education Hack, Intuit: College Student Prosperity Case","django, html, css, bootstrap, javascript, python, facebook-login-api, love",minhkhangvu,Franklin W. Olin College of Engineering,3,dberny,Utsav22G,emmapan
Alzheimers,http://yhack2017.devpost.com/submissions/84337-alzheimers,"Inspiration

Alzheimer's is the most common form of dementia of the world, and most often family members are tasked with taking care of those who may be diagnosed with Alzheimer's. However, easily understood advice can be difficult to find, so we compiled the information into an app to help these caregivers.

What it does

The app asks for symptom inputs, and provides a diagnosis, as well as advice for what the caregiver can do.

How we built it

The app was built in Android Studio, using Java.

Challenges we ran into

It was difficult making a user interface that was easy to understand and quick use. However, we believe our ""survey"" method is easy for all.

Accomplishments that we're proud of

We're proud to have built a functional app despite our inexperience.

What we learned

We learned basic commands, as well as how to implement a logical flow within the app.

What's next for Alzheimers

The app can be further expanded by connecting to a database to provide even more information.
",,https://docs.google.com/document/d/1eNZQ6yJmY_SlijDAWTXpuaIpmqeBfRXZf2zW7Wr8gSg/edit,https://s3.amazonaws.com/challengepost/zip_files/production/28312/zip_files/Alzheimers.zip,"","android-studio, java",superav,"University of Maryland - College Park, Yale University",2,awei9,rjtung15
Alexa Skills - Translate and The Donald,http://yhack2017.devpost.com/submissions/84338-alexa-skills-translate-and-the-donald,"We are both beginner's to both programming and computer science and wanted to test our skills by learning something new. Since we are studying Java in our CS111 class, we decided to learn some JavaScript (specifically node.js) so that we could work with and develop Amazon Alexa skills. We attempted more difficult challenges, but due to our limited knowledge, we decided to hack something more easily accessible. We decided to have fun with the project, which led to our creation of the Donald Trump Tweet skill, something that we both found very funny. Overall, this was a very good learning experience, and we both feel much more comfortable tackling new information and software/development challenges going forward. 
",,,https://s3.amazonaws.com/challengepost/zip_files/production/28313/zip_files/index.js,"Best Education Hack, Poynter Fellowship: Best Hack to Counter Fake News, Best Use of Amazon Web Services","amazon-alexa, amazon-web-services",jonathankingfc,"Rutgers, The State University of New Jersey",1,jia28
Today@Brown Personalized (Competition),http://yhack2017.devpost.com/submissions/84339-today-brown-personalized-competition,"Story

Brown University has traditionally sent out emails every morning containing detailed information about campus events, but recently it completely overhauled its system and made it cumbersome and unintuitive to use. All of a sudden, Brown students weren't reading the daily mail about Brown's most important campus events anymore. And that is a tragedy!

We wanted to remedy that experience and bring a clean, compact, and fully informative organization of Brown's events, every day, to Brown students on a single lightweight web page.

Priorities

Our biggest priority was designing a space in which the news delivered by Brown's Today@Brown system would be communicated in a clean, no-hassle interface. Our two greatest ideas were as follows:


Each student should be able to choose what types of events they want to appear on their feed. No more tech students having their dashboard flooded with architecture and literary arts events! Students would receive quick access to the events they'd be most likely to attend.
Students would be able to add any on-campus event to their Google Calendar in one or two clicks. (We didn't end up finishing this feature.)


Our project is full-stack and hosted in Node.js. Try it out!
",,https://github.com/Oasiris/today-at-brown-node,https://s3.amazonaws.com/challengepost/zip_files/production/28314/zip_files/today-at-brown-personalized.zip,Intuit: College Student Prosperity Case,"node.js, express.js, pug, css3, javascript",oasiris,"",2,griffin_beels,kendrick_cole
